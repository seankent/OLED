ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"oled.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	initCmds
  20              		.section	.rodata
  21              		.align	2
  22              		.type	initCmds, %object
  23              		.size	initCmds, 8
  24              	initCmds:
  25 0000 00       		.byte	0
  26 0001 8D       		.byte	-115
  27 0002 14       		.byte	20
  28 0003 A1       		.byte	-95
  29 0004 C8       		.byte	-56
  30 0005 AF       		.byte	-81
  31 0006 20       		.byte	32
  32 0007 00       		.byte	0
  33              		.section	.text.oled_Init,"ax",%progbits
  34              		.align	2
  35              		.global	oled_Init
  36              		.thumb
  37              		.thumb_func
  38              		.type	oled_Init, %function
  39              	oled_Init:
  40              	.LFB63:
  41              		.file 1 "oled.c"
   1:oled.c        **** //======================================
   2:oled.c        **** // include                                         
   3:oled.c        **** //======================================
   4:oled.c        **** #include "oled.h"
   5:oled.c        **** 
   6:oled.c        **** //======================================
   7:oled.c        **** // private function declarations                                        
   8:oled.c        **** //======================================
   9:oled.c        **** void SetColumnAddress(oled_t * oled, uint8 A, uint8 B);
  10:oled.c        **** void SetPageAddress(oled_t * oled, uint8 A, uint8 B);
  11:oled.c        **** void WriteGRAM(oled_t * oled, int x0, int y0, int x1, int y1, uint8 color);
  12:oled.c        **** void DrawHLine(oled_t * oled, int y, int x0, int x1);
  13:oled.c        **** void DrawVLine(oled_t * oled, int x, int y0, int y1);
  14:oled.c        **** void BresenhamLineAlgorithm(oled_t * oled, int x0, int y0, int dx, int dy, uint8 rot);
  15:oled.c        **** void PlotPerpLineL(oled_t * oled, int x0, int y0, int dx, int dy, int x, int y, int step, uint8 rot
  16:oled.c        **** void PlotPerpLineR(oled_t * oled, int x0, int y0, int dx, int dy, int x, int y, int step, uint8 rot
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 2


  17:oled.c        **** void PlotPoint(oled_t * oled, int x0, int y0, int x, int y, uint8 rot);
  18:oled.c        **** void BresenhamCircleAlgorithm(oled_t *oled, int xc, int yc, int rIn, int rOut, uint8 octants);
  19:oled.c        **** void PlotCircle(oled_t * oled, int xc, int yc, int x, int yIn, int yOut, uint8 octants);
  20:oled.c        **** void Swap(int* var0, int* var1);
  21:oled.c        **** 
  22:oled.c        **** //======================================
  23:oled.c        **** // initialization commands for ssd1306 driver                             
  24:oled.c        **** //======================================
  25:oled.c        **** const uint8 initCmds[] = {
  26:oled.c        ****     0x00,
  27:oled.c        ****     SSD1306_CHARGEPUMP,
  28:oled.c        ****     0x14,
  29:oled.c        ****     SSD1306_SEGREMAP | 0x1,
  30:oled.c        ****     SSD1306_COMSCANDIRECTION,
  31:oled.c        ****     SSD1306_DISPLAYON,
  32:oled.c        ****     SSD1306_MEMORYADDRESSINGMODE,   // set memory addressing mode to Horizonatal Addressing Mode
  33:oled.c        ****     0x00
  34:oled.c        **** };
  35:oled.c        **** 
  36:oled.c        **** //======================================
  37:oled.c        **** // oled_Init()
  38:oled.c        **** // this function initializes the oled_t struct
  39:oled.c        **** // and sends the necessary initialization
  40:oled.c        **** // commands to the display
  41:oled.c        **** //
  42:oled.c        **** // Parameters:
  43:oled.c        **** //     oled - pointer to a oled_t structure
  44:oled.c        **** //     slaveAddr - 7-bit I2C address
  45:oled.c        **** //     SendStart - function pointer to I2C_MasterSendStart()
  46:oled.c        **** //     SendStop - function pointer to I2C_MasterSendStop()
  47:oled.c        **** //     WriteByte - function pointer to I2C_MasterWriteByte()
  48:oled.c        **** //======================================
  49:oled.c        **** void oled_Init(oled_t * oled, uint8 slaveAddr, uint8 (*SendStart)(uint8, uint8), uint8 (*SendStop)(
  50:oled.c        **** {
  42              		.loc 1 50 0
  43              		.cfi_startproc
  44              		@ args = 4, pretend = 0, frame = 24
  45              		@ frame_needed = 1, uses_anonymous_args = 0
  46 0000 80B5     		push	{r7, lr}
  47              		.cfi_def_cfa_offset 8
  48              		.cfi_offset 7, -8
  49              		.cfi_offset 14, -4
  50 0002 86B0     		sub	sp, sp, #24
  51              		.cfi_def_cfa_offset 32
  52 0004 00AF     		add	r7, sp, #0
  53              		.cfi_def_cfa_register 7
  54 0006 F860     		str	r0, [r7, #12]
  55 0008 7A60     		str	r2, [r7, #4]
  56 000a 3B60     		str	r3, [r7]
  57 000c 0B46     		mov	r3, r1
  58 000e FB72     		strb	r3, [r7, #11]
  51:oled.c        ****     oled->slaveAddr = slaveAddr;                    // set oled's I2C address
  59              		.loc 1 51 0
  60 0010 FB68     		ldr	r3, [r7, #12]
  61 0012 FA7A     		ldrb	r2, [r7, #11]
  62 0014 1A70     		strb	r2, [r3]
  52:oled.c        ****     oled->SendStart = SendStart;                    // pass oled the I2C_MasterSendStart() function
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 3


  63              		.loc 1 52 0
  64 0016 FB68     		ldr	r3, [r7, #12]
  65 0018 7A68     		ldr	r2, [r7, #4]
  66 001a 5A60     		str	r2, [r3, #4]
  53:oled.c        ****     oled->SendStop = SendStop;                      // pass oled the I2C_MasterSendStop() function
  67              		.loc 1 53 0
  68 001c FB68     		ldr	r3, [r7, #12]
  69 001e 3A68     		ldr	r2, [r7]
  70 0020 9A60     		str	r2, [r3, #8]
  54:oled.c        ****     oled->WriteByte = WriteByte;                    // pass oled the I2C_MasterWriteByte() function
  71              		.loc 1 54 0
  72 0022 FB68     		ldr	r3, [r7, #12]
  73 0024 3A6A     		ldr	r2, [r7, #32]
  74 0026 DA60     		str	r2, [r3, #12]
  55:oled.c        ****     oled->bkColor = 0;                              // set background color
  75              		.loc 1 55 0
  76 0028 FB68     		ldr	r3, [r7, #12]
  77 002a 0022     		movs	r2, #0
  78 002c 1A74     		strb	r2, [r3, #16]
  56:oled.c        ****     oled->color = 1;                                // set foreground color
  79              		.loc 1 56 0
  80 002e FB68     		ldr	r3, [r7, #12]
  81 0030 0122     		movs	r2, #1
  82 0032 5A74     		strb	r2, [r3, #17]
  57:oled.c        ****     oled->penSize = 0;                              // set pen size
  83              		.loc 1 57 0
  84 0034 FB68     		ldr	r3, [r7, #12]
  85 0036 0022     		movs	r2, #0
  86 0038 9A74     		strb	r2, [r3, #18]
  58:oled.c        ****     oled->font = &font;                             // set font
  87              		.loc 1 58 0
  88 003a FB68     		ldr	r3, [r7, #12]
  89 003c 124A     		ldr	r2, .L4
  90 003e 5A61     		str	r2, [r3, #20]
  59:oled.c        ****     oled->bmMode = OLED_BM_NORMAL;                  // set bitmap mode
  91              		.loc 1 59 0
  92 0040 FB68     		ldr	r3, [r7, #12]
  93 0042 0022     		movs	r2, #0
  94 0044 1A76     		strb	r2, [r3, #24]
  60:oled.c        ****     oled->textMode = OLED_TEXT_TRAN;                // set text mode
  95              		.loc 1 60 0
  96 0046 FB68     		ldr	r3, [r7, #12]
  97 0048 0222     		movs	r2, #2
  98 004a 5A76     		strb	r2, [r3, #25]
  61:oled.c        **** 
  62:oled.c        ****     oled->SendStart(slaveAddr, 0x00);               // generate Start condition and send slave addr
  99              		.loc 1 62 0
 100 004c FB68     		ldr	r3, [r7, #12]
 101 004e 5B68     		ldr	r3, [r3, #4]
 102 0050 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 103 0052 0021     		movs	r1, #0
 104 0054 1046     		mov	r0, r2
 105 0056 9847     		blx	r3
 106              	.LBB2:
  63:oled.c        ****     for (int i=0; i<(int)sizeof(initCmds); i++){  
 107              		.loc 1 63 0
 108 0058 0023     		movs	r3, #0
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 4


 109 005a 7B61     		str	r3, [r7, #20]
 110 005c 0AE0     		b	.L2
 111              	.L3:
  64:oled.c        ****         oled->WriteByte(initCmds[i]);               // send initialization commands/parameters
 112              		.loc 1 64 0 discriminator 3
 113 005e FB68     		ldr	r3, [r7, #12]
 114 0060 DB68     		ldr	r3, [r3, #12]
 115 0062 0A49     		ldr	r1, .L4+4
 116 0064 7A69     		ldr	r2, [r7, #20]
 117 0066 0A44     		add	r2, r2, r1
 118 0068 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 119 006a 1046     		mov	r0, r2
 120 006c 9847     		blx	r3
  63:oled.c        ****     for (int i=0; i<(int)sizeof(initCmds); i++){  
 121              		.loc 1 63 0 discriminator 3
 122 006e 7B69     		ldr	r3, [r7, #20]
 123 0070 0133     		adds	r3, r3, #1
 124 0072 7B61     		str	r3, [r7, #20]
 125              	.L2:
  63:oled.c        ****     for (int i=0; i<(int)sizeof(initCmds); i++){  
 126              		.loc 1 63 0 is_stmt 0 discriminator 1
 127 0074 7B69     		ldr	r3, [r7, #20]
 128 0076 072B     		cmp	r3, #7
 129 0078 F1DD     		ble	.L3
 130              	.LBE2:
  65:oled.c        ****     }   
  66:oled.c        ****     oled->SendStop();                               // generate Stop condition
 131              		.loc 1 66 0 is_stmt 1
 132 007a FB68     		ldr	r3, [r7, #12]
 133 007c 9B68     		ldr	r3, [r3, #8]
 134 007e 9847     		blx	r3
  67:oled.c        **** }
 135              		.loc 1 67 0
 136 0080 00BF     		nop
 137 0082 1837     		adds	r7, r7, #24
 138              		.cfi_def_cfa_offset 8
 139 0084 BD46     		mov	sp, r7
 140              		.cfi_def_cfa_register 13
 141              		@ sp needed
 142 0086 80BD     		pop	{r7, pc}
 143              	.L5:
 144              		.align	2
 145              	.L4:
 146 0088 00000000 		.word	font
 147 008c 00000000 		.word	initCmds
 148              		.cfi_endproc
 149              	.LFE63:
 150              		.size	oled_Init, .-oled_Init
 151              		.section	.text.oled_SetColor,"ax",%progbits
 152              		.align	2
 153              		.global	oled_SetColor
 154              		.thumb
 155              		.thumb_func
 156              		.type	oled_SetColor, %function
 157              	oled_SetColor:
 158              	.LFB64:
  68:oled.c        **** 
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 5


  69:oled.c        **** //========================================
  70:oled.c        **** // oled_SetColor()
  71:oled.c        **** // this function sets the foreground color
  72:oled.c        **** //
  73:oled.c        **** // Parameters:
  74:oled.c        **** //     oled - pointer to a oled_t structure
  75:oled.c        **** //     color: 0 (black) or 1 (white)
  76:oled.c        **** //========================================
  77:oled.c        **** void oled_SetColor(oled_t * oled, uint8 color)
  78:oled.c        **** {
 159              		.loc 1 78 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 8
 162              		@ frame_needed = 1, uses_anonymous_args = 0
 163              		@ link register save eliminated.
 164 0000 80B4     		push	{r7}
 165              		.cfi_def_cfa_offset 4
 166              		.cfi_offset 7, -4
 167 0002 83B0     		sub	sp, sp, #12
 168              		.cfi_def_cfa_offset 16
 169 0004 00AF     		add	r7, sp, #0
 170              		.cfi_def_cfa_register 7
 171 0006 7860     		str	r0, [r7, #4]
 172 0008 0B46     		mov	r3, r1
 173 000a FB70     		strb	r3, [r7, #3]
  79:oled.c        ****     if ((color == 0) || (color == 1)) oled->color = color;
 174              		.loc 1 79 0
 175 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 176 000e 002B     		cmp	r3, #0
 177 0010 02D0     		beq	.L7
 178              		.loc 1 79 0 is_stmt 0 discriminator 2
 179 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 180 0014 012B     		cmp	r3, #1
 181 0016 02D1     		bne	.L9
 182              	.L7:
 183              		.loc 1 79 0 discriminator 3
 184 0018 7B68     		ldr	r3, [r7, #4]
 185 001a FA78     		ldrb	r2, [r7, #3]
 186 001c 5A74     		strb	r2, [r3, #17]
 187              	.L9:
  80:oled.c        **** }
 188              		.loc 1 80 0 is_stmt 1
 189 001e 00BF     		nop
 190 0020 0C37     		adds	r7, r7, #12
 191              		.cfi_def_cfa_offset 4
 192 0022 BD46     		mov	sp, r7
 193              		.cfi_def_cfa_register 13
 194              		@ sp needed
 195 0024 80BC     		pop	{r7}
 196              		.cfi_restore 7
 197              		.cfi_def_cfa_offset 0
 198 0026 7047     		bx	lr
 199              		.cfi_endproc
 200              	.LFE64:
 201              		.size	oled_SetColor, .-oled_SetColor
 202              		.section	.text.oled_GetColor,"ax",%progbits
 203              		.align	2
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 6


 204              		.global	oled_GetColor
 205              		.thumb
 206              		.thumb_func
 207              		.type	oled_GetColor, %function
 208              	oled_GetColor:
 209              	.LFB65:
  81:oled.c        **** 
  82:oled.c        **** //========================================
  83:oled.c        **** // oled_GetColor()
  84:oled.c        **** // this function returns the current foreground
  85:oled.c        **** // color
  86:oled.c        **** //
  87:oled.c        **** // Parameters:
  88:oled.c        **** //     oled - pointer to a oled_t structure
  89:oled.c        **** //========================================
  90:oled.c        **** uint8 oled_GetColor(oled_t * oled)
  91:oled.c        **** {
 210              		.loc 1 91 0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 8
 213              		@ frame_needed = 1, uses_anonymous_args = 0
 214              		@ link register save eliminated.
 215 0000 80B4     		push	{r7}
 216              		.cfi_def_cfa_offset 4
 217              		.cfi_offset 7, -4
 218 0002 83B0     		sub	sp, sp, #12
 219              		.cfi_def_cfa_offset 16
 220 0004 00AF     		add	r7, sp, #0
 221              		.cfi_def_cfa_register 7
 222 0006 7860     		str	r0, [r7, #4]
  92:oled.c        ****     return oled->color;
 223              		.loc 1 92 0
 224 0008 7B68     		ldr	r3, [r7, #4]
 225 000a 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
  93:oled.c        **** }
 226              		.loc 1 93 0
 227 000c 1846     		mov	r0, r3
 228 000e 0C37     		adds	r7, r7, #12
 229              		.cfi_def_cfa_offset 4
 230 0010 BD46     		mov	sp, r7
 231              		.cfi_def_cfa_register 13
 232              		@ sp needed
 233 0012 80BC     		pop	{r7}
 234              		.cfi_restore 7
 235              		.cfi_def_cfa_offset 0
 236 0014 7047     		bx	lr
 237              		.cfi_endproc
 238              	.LFE65:
 239              		.size	oled_GetColor, .-oled_GetColor
 240 0016 00BF     		.section	.text.oled_SetBkColor,"ax",%progbits
 241              		.align	2
 242              		.global	oled_SetBkColor
 243              		.thumb
 244              		.thumb_func
 245              		.type	oled_SetBkColor, %function
 246              	oled_SetBkColor:
 247              	.LFB66:
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 7


  94:oled.c        **** 
  95:oled.c        **** //========================================
  96:oled.c        **** // oled_SetBkColor()
  97:oled.c        **** // this function sets the background color
  98:oled.c        **** //
  99:oled.c        **** // Parameters:
 100:oled.c        **** //     oled - pointer to a oled_t structure
 101:oled.c        **** //     bkColor: 0 (black) or 1 (white)
 102:oled.c        **** //========================================
 103:oled.c        **** void oled_SetBkColor(oled_t * oled, uint8 bkColor)
 104:oled.c        **** {
 248              		.loc 1 104 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 8
 251              		@ frame_needed = 1, uses_anonymous_args = 0
 252              		@ link register save eliminated.
 253 0000 80B4     		push	{r7}
 254              		.cfi_def_cfa_offset 4
 255              		.cfi_offset 7, -4
 256 0002 83B0     		sub	sp, sp, #12
 257              		.cfi_def_cfa_offset 16
 258 0004 00AF     		add	r7, sp, #0
 259              		.cfi_def_cfa_register 7
 260 0006 7860     		str	r0, [r7, #4]
 261 0008 0B46     		mov	r3, r1
 262 000a FB70     		strb	r3, [r7, #3]
 105:oled.c        ****     if ((bkColor == 0) || (bkColor == 1)) oled->bkColor = bkColor;
 263              		.loc 1 105 0
 264 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 265 000e 002B     		cmp	r3, #0
 266 0010 02D0     		beq	.L13
 267              		.loc 1 105 0 is_stmt 0 discriminator 2
 268 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 269 0014 012B     		cmp	r3, #1
 270 0016 02D1     		bne	.L15
 271              	.L13:
 272              		.loc 1 105 0 discriminator 3
 273 0018 7B68     		ldr	r3, [r7, #4]
 274 001a FA78     		ldrb	r2, [r7, #3]
 275 001c 1A74     		strb	r2, [r3, #16]
 276              	.L15:
 106:oled.c        **** }
 277              		.loc 1 106 0 is_stmt 1
 278 001e 00BF     		nop
 279 0020 0C37     		adds	r7, r7, #12
 280              		.cfi_def_cfa_offset 4
 281 0022 BD46     		mov	sp, r7
 282              		.cfi_def_cfa_register 13
 283              		@ sp needed
 284 0024 80BC     		pop	{r7}
 285              		.cfi_restore 7
 286              		.cfi_def_cfa_offset 0
 287 0026 7047     		bx	lr
 288              		.cfi_endproc
 289              	.LFE66:
 290              		.size	oled_SetBkColor, .-oled_SetBkColor
 291              		.section	.text.oled_GetBkColor,"ax",%progbits
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 8


 292              		.align	2
 293              		.global	oled_GetBkColor
 294              		.thumb
 295              		.thumb_func
 296              		.type	oled_GetBkColor, %function
 297              	oled_GetBkColor:
 298              	.LFB67:
 107:oled.c        **** 
 108:oled.c        **** //========================================
 109:oled.c        **** // oled_GetBkColor()
 110:oled.c        **** // this function returns the current background
 111:oled.c        **** // color
 112:oled.c        **** //
 113:oled.c        **** // Parameters:
 114:oled.c        **** //     oled - pointer to a oled_t structure
 115:oled.c        **** //========================================
 116:oled.c        **** uint8 oled_GetBkColor(oled_t * oled)
 117:oled.c        **** {
 299              		.loc 1 117 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 8
 302              		@ frame_needed = 1, uses_anonymous_args = 0
 303              		@ link register save eliminated.
 304 0000 80B4     		push	{r7}
 305              		.cfi_def_cfa_offset 4
 306              		.cfi_offset 7, -4
 307 0002 83B0     		sub	sp, sp, #12
 308              		.cfi_def_cfa_offset 16
 309 0004 00AF     		add	r7, sp, #0
 310              		.cfi_def_cfa_register 7
 311 0006 7860     		str	r0, [r7, #4]
 118:oled.c        ****     return oled->bkColor;
 312              		.loc 1 118 0
 313 0008 7B68     		ldr	r3, [r7, #4]
 314 000a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 119:oled.c        **** }
 315              		.loc 1 119 0
 316 000c 1846     		mov	r0, r3
 317 000e 0C37     		adds	r7, r7, #12
 318              		.cfi_def_cfa_offset 4
 319 0010 BD46     		mov	sp, r7
 320              		.cfi_def_cfa_register 13
 321              		@ sp needed
 322 0012 80BC     		pop	{r7}
 323              		.cfi_restore 7
 324              		.cfi_def_cfa_offset 0
 325 0014 7047     		bx	lr
 326              		.cfi_endproc
 327              	.LFE67:
 328              		.size	oled_GetBkColor, .-oled_GetBkColor
 329 0016 00BF     		.section	.text.oled_SetPenSize,"ax",%progbits
 330              		.align	2
 331              		.global	oled_SetPenSize
 332              		.thumb
 333              		.thumb_func
 334              		.type	oled_SetPenSize, %function
 335              	oled_SetPenSize:
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 9


 336              	.LFB68:
 120:oled.c        **** 
 121:oled.c        **** //========================================
 122:oled.c        **** // oled_SetPenSize()
 123:oled.c        **** // this function sets the pen size
 124:oled.c        **** // for drawing operations. A pen size of 0
 125:oled.c        **** // draws the thinnest lines (1 pixel
 126:oled.c        **** // thick)
 127:oled.c        **** //
 128:oled.c        **** // Parameters:
 129:oled.c        **** //     oled - pointer to a oled_t structure
 130:oled.c        **** //     penSize - pen size
 131:oled.c        **** //========================================
 132:oled.c        **** void oled_SetPenSize(oled_t * oled, uint8 penSize)
 133:oled.c        **** {
 337              		.loc 1 133 0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 8
 340              		@ frame_needed = 1, uses_anonymous_args = 0
 341              		@ link register save eliminated.
 342 0000 80B4     		push	{r7}
 343              		.cfi_def_cfa_offset 4
 344              		.cfi_offset 7, -4
 345 0002 83B0     		sub	sp, sp, #12
 346              		.cfi_def_cfa_offset 16
 347 0004 00AF     		add	r7, sp, #0
 348              		.cfi_def_cfa_register 7
 349 0006 7860     		str	r0, [r7, #4]
 350 0008 0B46     		mov	r3, r1
 351 000a FB70     		strb	r3, [r7, #3]
 134:oled.c        ****     oled->penSize = penSize;
 352              		.loc 1 134 0
 353 000c 7B68     		ldr	r3, [r7, #4]
 354 000e FA78     		ldrb	r2, [r7, #3]
 355 0010 9A74     		strb	r2, [r3, #18]
 135:oled.c        **** }
 356              		.loc 1 135 0
 357 0012 00BF     		nop
 358 0014 0C37     		adds	r7, r7, #12
 359              		.cfi_def_cfa_offset 4
 360 0016 BD46     		mov	sp, r7
 361              		.cfi_def_cfa_register 13
 362              		@ sp needed
 363 0018 80BC     		pop	{r7}
 364              		.cfi_restore 7
 365              		.cfi_def_cfa_offset 0
 366 001a 7047     		bx	lr
 367              		.cfi_endproc
 368              	.LFE68:
 369              		.size	oled_SetPenSize, .-oled_SetPenSize
 370              		.section	.text.oled_GetPenSize,"ax",%progbits
 371              		.align	2
 372              		.global	oled_GetPenSize
 373              		.thumb
 374              		.thumb_func
 375              		.type	oled_GetPenSize, %function
 376              	oled_GetPenSize:
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 10


 377              	.LFB69:
 136:oled.c        **** 
 137:oled.c        **** //========================================
 138:oled.c        **** // oled_GetPenSize()
 139:oled.c        **** // this function returns the current pen size
 140:oled.c        **** //
 141:oled.c        **** // Parameters:
 142:oled.c        **** //     oled - pointer to a oled_t structure
 143:oled.c        **** //========================================
 144:oled.c        **** uint8 oled_GetPenSize(oled_t * oled)
 145:oled.c        **** {
 378              		.loc 1 145 0
 379              		.cfi_startproc
 380              		@ args = 0, pretend = 0, frame = 8
 381              		@ frame_needed = 1, uses_anonymous_args = 0
 382              		@ link register save eliminated.
 383 0000 80B4     		push	{r7}
 384              		.cfi_def_cfa_offset 4
 385              		.cfi_offset 7, -4
 386 0002 83B0     		sub	sp, sp, #12
 387              		.cfi_def_cfa_offset 16
 388 0004 00AF     		add	r7, sp, #0
 389              		.cfi_def_cfa_register 7
 390 0006 7860     		str	r0, [r7, #4]
 146:oled.c        ****     return oled->penSize;
 391              		.loc 1 146 0
 392 0008 7B68     		ldr	r3, [r7, #4]
 393 000a 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 147:oled.c        **** }
 394              		.loc 1 147 0
 395 000c 1846     		mov	r0, r3
 396 000e 0C37     		adds	r7, r7, #12
 397              		.cfi_def_cfa_offset 4
 398 0010 BD46     		mov	sp, r7
 399              		.cfi_def_cfa_register 13
 400              		@ sp needed
 401 0012 80BC     		pop	{r7}
 402              		.cfi_restore 7
 403              		.cfi_def_cfa_offset 0
 404 0014 7047     		bx	lr
 405              		.cfi_endproc
 406              	.LFE69:
 407              		.size	oled_GetPenSize, .-oled_GetPenSize
 408 0016 00BF     		.section	.text.oled_SetFont,"ax",%progbits
 409              		.align	2
 410              		.global	oled_SetFont
 411              		.thumb
 412              		.thumb_func
 413              		.type	oled_SetFont, %function
 414              	oled_SetFont:
 415              	.LFB70:
 148:oled.c        **** 
 149:oled.c        **** //========================================
 150:oled.c        **** // oled_SetFont()
 151:oled.c        **** // this function sets the font for 
 152:oled.c        **** // text displaying operations (i.e. oled_DispChar()
 153:oled.c        **** // and oled_DispString())
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 11


 154:oled.c        **** //
 155:oled.c        **** // Parameters:
 156:oled.c        **** //     oled - pointer to a oled_t structure
 157:oled.c        **** //     font - pointer to a font_t structure
 158:oled.c        **** //========================================
 159:oled.c        **** void oled_SetFont(oled_t * oled, font_t * font)
 160:oled.c        **** {
 416              		.loc 1 160 0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 8
 419              		@ frame_needed = 1, uses_anonymous_args = 0
 420              		@ link register save eliminated.
 421 0000 80B4     		push	{r7}
 422              		.cfi_def_cfa_offset 4
 423              		.cfi_offset 7, -4
 424 0002 83B0     		sub	sp, sp, #12
 425              		.cfi_def_cfa_offset 16
 426 0004 00AF     		add	r7, sp, #0
 427              		.cfi_def_cfa_register 7
 428 0006 7860     		str	r0, [r7, #4]
 429 0008 3960     		str	r1, [r7]
 161:oled.c        ****     oled->font = font;
 430              		.loc 1 161 0
 431 000a 7B68     		ldr	r3, [r7, #4]
 432 000c 3A68     		ldr	r2, [r7]
 433 000e 5A61     		str	r2, [r3, #20]
 162:oled.c        **** }
 434              		.loc 1 162 0
 435 0010 00BF     		nop
 436 0012 0C37     		adds	r7, r7, #12
 437              		.cfi_def_cfa_offset 4
 438 0014 BD46     		mov	sp, r7
 439              		.cfi_def_cfa_register 13
 440              		@ sp needed
 441 0016 80BC     		pop	{r7}
 442              		.cfi_restore 7
 443              		.cfi_def_cfa_offset 0
 444 0018 7047     		bx	lr
 445              		.cfi_endproc
 446              	.LFE70:
 447              		.size	oled_SetFont, .-oled_SetFont
 448 001a 00BF     		.section	.text.oled_SetBmMode,"ax",%progbits
 449              		.align	2
 450              		.global	oled_SetBmMode
 451              		.thumb
 452              		.thumb_func
 453              		.type	oled_SetBmMode, %function
 454              	oled_SetBmMode:
 455              	.LFB71:
 163:oled.c        **** 
 164:oled.c        **** //========================================
 165:oled.c        **** // oled_SetBmMode()
 166:oled.c        **** // this function sets the bitmap display
 167:oled.c        **** // mode
 168:oled.c        **** //
 169:oled.c        **** // Parameters:
 170:oled.c        **** //     oled - pointer to a oled_t structure
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 12


 171:oled.c        **** //     bmMode - bitmap display mode
 172:oled.c        **** //========================================
 173:oled.c        **** void oled_SetBmMode(oled_t * oled, uint8 bmMode)
 174:oled.c        **** {
 456              		.loc 1 174 0
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 8
 459              		@ frame_needed = 1, uses_anonymous_args = 0
 460              		@ link register save eliminated.
 461 0000 80B4     		push	{r7}
 462              		.cfi_def_cfa_offset 4
 463              		.cfi_offset 7, -4
 464 0002 83B0     		sub	sp, sp, #12
 465              		.cfi_def_cfa_offset 16
 466 0004 00AF     		add	r7, sp, #0
 467              		.cfi_def_cfa_register 7
 468 0006 7860     		str	r0, [r7, #4]
 469 0008 0B46     		mov	r3, r1
 470 000a FB70     		strb	r3, [r7, #3]
 175:oled.c        ****     if ((bmMode == OLED_BM_NORMAL) || 
 471              		.loc 1 175 0
 472 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 473 000e 002B     		cmp	r3, #0
 474 0010 0ED0     		beq	.L23
 475              		.loc 1 175 0 is_stmt 0 discriminator 1
 476 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 477 0014 012B     		cmp	r3, #1
 478 0016 0BD0     		beq	.L23
 176:oled.c        ****         (bmMode == OLED_BM_INV) ||
 479              		.loc 1 176 0 is_stmt 1
 480 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 481 001a 022B     		cmp	r3, #2
 482 001c 08D0     		beq	.L23
 177:oled.c        ****         (bmMode == OLED_BM_WHITE_TRAN) || 
 483              		.loc 1 177 0
 484 001e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 485 0020 032B     		cmp	r3, #3
 486 0022 05D0     		beq	.L23
 178:oled.c        ****         (bmMode == OLED_BM_BLACK_TRAN) ||
 487              		.loc 1 178 0
 488 0024 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 489 0026 042B     		cmp	r3, #4
 490 0028 02D0     		beq	.L23
 179:oled.c        ****         (bmMode == OLED_BM_WHITE_FILL) || 
 491              		.loc 1 179 0
 492 002a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 493 002c 052B     		cmp	r3, #5
 494 002e 02D1     		bne	.L25
 495              	.L23:
 180:oled.c        ****         (bmMode == OLED_BM_BLACK_FILL)) oled->bmMode = bmMode;
 496              		.loc 1 180 0
 497 0030 7B68     		ldr	r3, [r7, #4]
 498 0032 FA78     		ldrb	r2, [r7, #3]
 499 0034 1A76     		strb	r2, [r3, #24]
 500              	.L25:
 181:oled.c        **** }
 501              		.loc 1 181 0
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 13


 502 0036 00BF     		nop
 503 0038 0C37     		adds	r7, r7, #12
 504              		.cfi_def_cfa_offset 4
 505 003a BD46     		mov	sp, r7
 506              		.cfi_def_cfa_register 13
 507              		@ sp needed
 508 003c 80BC     		pop	{r7}
 509              		.cfi_restore 7
 510              		.cfi_def_cfa_offset 0
 511 003e 7047     		bx	lr
 512              		.cfi_endproc
 513              	.LFE71:
 514              		.size	oled_SetBmMode, .-oled_SetBmMode
 515              		.section	.text.oled_GetBmMode,"ax",%progbits
 516              		.align	2
 517              		.global	oled_GetBmMode
 518              		.thumb
 519              		.thumb_func
 520              		.type	oled_GetBmMode, %function
 521              	oled_GetBmMode:
 522              	.LFB72:
 182:oled.c        **** 
 183:oled.c        **** //========================================
 184:oled.c        **** // oled_GetBmMode()
 185:oled.c        **** // this function returns the current bitmap 
 186:oled.c        **** // display mode
 187:oled.c        **** //
 188:oled.c        **** // Parameters:
 189:oled.c        **** //     oled - pointer to a oled_t structure
 190:oled.c        **** //========================================
 191:oled.c        **** uint8 oled_GetBmMode(oled_t * oled)
 192:oled.c        **** {
 523              		.loc 1 192 0
 524              		.cfi_startproc
 525              		@ args = 0, pretend = 0, frame = 8
 526              		@ frame_needed = 1, uses_anonymous_args = 0
 527              		@ link register save eliminated.
 528 0000 80B4     		push	{r7}
 529              		.cfi_def_cfa_offset 4
 530              		.cfi_offset 7, -4
 531 0002 83B0     		sub	sp, sp, #12
 532              		.cfi_def_cfa_offset 16
 533 0004 00AF     		add	r7, sp, #0
 534              		.cfi_def_cfa_register 7
 535 0006 7860     		str	r0, [r7, #4]
 193:oled.c        ****     return oled->bmMode;
 536              		.loc 1 193 0
 537 0008 7B68     		ldr	r3, [r7, #4]
 538 000a 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 194:oled.c        **** }
 539              		.loc 1 194 0
 540 000c 1846     		mov	r0, r3
 541 000e 0C37     		adds	r7, r7, #12
 542              		.cfi_def_cfa_offset 4
 543 0010 BD46     		mov	sp, r7
 544              		.cfi_def_cfa_register 13
 545              		@ sp needed
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 14


 546 0012 80BC     		pop	{r7}
 547              		.cfi_restore 7
 548              		.cfi_def_cfa_offset 0
 549 0014 7047     		bx	lr
 550              		.cfi_endproc
 551              	.LFE72:
 552              		.size	oled_GetBmMode, .-oled_GetBmMode
 553 0016 00BF     		.section	.text.oled_SetTextMode,"ax",%progbits
 554              		.align	2
 555              		.global	oled_SetTextMode
 556              		.thumb
 557              		.thumb_func
 558              		.type	oled_SetTextMode, %function
 559              	oled_SetTextMode:
 560              	.LFB73:
 195:oled.c        **** 
 196:oled.c        **** //========================================
 197:oled.c        **** // oled_SetTextMode()
 198:oled.c        **** // this function sets the text display
 199:oled.c        **** // mode
 200:oled.c        **** //
 201:oled.c        **** // Parameters:
 202:oled.c        **** //     oled - pointer to a oled_t structure
 203:oled.c        **** //     textMode - text display mode
 204:oled.c        **** //========================================
 205:oled.c        **** void oled_SetTextMode(oled_t * oled, uint8 textMode)
 206:oled.c        **** {
 561              		.loc 1 206 0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 8
 564              		@ frame_needed = 1, uses_anonymous_args = 0
 565              		@ link register save eliminated.
 566 0000 80B4     		push	{r7}
 567              		.cfi_def_cfa_offset 4
 568              		.cfi_offset 7, -4
 569 0002 83B0     		sub	sp, sp, #12
 570              		.cfi_def_cfa_offset 16
 571 0004 00AF     		add	r7, sp, #0
 572              		.cfi_def_cfa_register 7
 573 0006 7860     		str	r0, [r7, #4]
 574 0008 0B46     		mov	r3, r1
 575 000a FB70     		strb	r3, [r7, #3]
 207:oled.c        ****     if ((textMode == OLED_TEXT_TRAN) ||
 576              		.loc 1 207 0
 577 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 578 000e 022B     		cmp	r3, #2
 579 0010 02D0     		beq	.L29
 580              		.loc 1 207 0 is_stmt 0 discriminator 1
 581 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 582 0014 022B     		cmp	r3, #2
 583 0016 02D1     		bne	.L31
 584              	.L29:
 208:oled.c        ****         (textMode == OLED_TEXT_FILL)) oled->textMode = textMode;
 585              		.loc 1 208 0 is_stmt 1
 586 0018 7B68     		ldr	r3, [r7, #4]
 587 001a FA78     		ldrb	r2, [r7, #3]
 588 001c 5A76     		strb	r2, [r3, #25]
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 15


 589              	.L31:
 209:oled.c        **** }
 590              		.loc 1 209 0
 591 001e 00BF     		nop
 592 0020 0C37     		adds	r7, r7, #12
 593              		.cfi_def_cfa_offset 4
 594 0022 BD46     		mov	sp, r7
 595              		.cfi_def_cfa_register 13
 596              		@ sp needed
 597 0024 80BC     		pop	{r7}
 598              		.cfi_restore 7
 599              		.cfi_def_cfa_offset 0
 600 0026 7047     		bx	lr
 601              		.cfi_endproc
 602              	.LFE73:
 603              		.size	oled_SetTextMode, .-oled_SetTextMode
 604              		.section	.text.oled_GetTextMode,"ax",%progbits
 605              		.align	2
 606              		.global	oled_GetTextMode
 607              		.thumb
 608              		.thumb_func
 609              		.type	oled_GetTextMode, %function
 610              	oled_GetTextMode:
 611              	.LFB74:
 210:oled.c        **** 
 211:oled.c        **** //========================================
 212:oled.c        **** // oled_GetTextMode()
 213:oled.c        **** // this function returns the text display
 214:oled.c        **** // mode
 215:oled.c        **** //
 216:oled.c        **** // Parameters:
 217:oled.c        **** //     oled - pointer to a oled_t structure
 218:oled.c        **** //========================================
 219:oled.c        **** uint8 oled_GetTextMode(oled_t * oled)
 220:oled.c        **** {
 612              		.loc 1 220 0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 8
 615              		@ frame_needed = 1, uses_anonymous_args = 0
 616              		@ link register save eliminated.
 617 0000 80B4     		push	{r7}
 618              		.cfi_def_cfa_offset 4
 619              		.cfi_offset 7, -4
 620 0002 83B0     		sub	sp, sp, #12
 621              		.cfi_def_cfa_offset 16
 622 0004 00AF     		add	r7, sp, #0
 623              		.cfi_def_cfa_register 7
 624 0006 7860     		str	r0, [r7, #4]
 221:oled.c        ****     return oled->textMode;
 625              		.loc 1 221 0
 626 0008 7B68     		ldr	r3, [r7, #4]
 627 000a 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 222:oled.c        **** }
 628              		.loc 1 222 0
 629 000c 1846     		mov	r0, r3
 630 000e 0C37     		adds	r7, r7, #12
 631              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 16


 632 0010 BD46     		mov	sp, r7
 633              		.cfi_def_cfa_register 13
 634              		@ sp needed
 635 0012 80BC     		pop	{r7}
 636              		.cfi_restore 7
 637              		.cfi_def_cfa_offset 0
 638 0014 7047     		bx	lr
 639              		.cfi_endproc
 640              	.LFE74:
 641              		.size	oled_GetTextMode, .-oled_GetTextMode
 642 0016 00BF     		.section	.text.oled_Clear,"ax",%progbits
 643              		.align	2
 644              		.global	oled_Clear
 645              		.thumb
 646              		.thumb_func
 647              		.type	oled_Clear, %function
 648              	oled_Clear:
 649              	.LFB75:
 223:oled.c        **** 
 224:oled.c        **** //========================================
 225:oled.c        **** // oled_Clear()
 226:oled.c        **** // this functions clears the screan (fills it
 227:oled.c        **** // with the background color)
 228:oled.c        **** //
 229:oled.c        **** // Parameters:
 230:oled.c        **** //     oled - pointer to a oled_t structure
 231:oled.c        **** //========================================
 232:oled.c        **** void oled_Clear(oled_t * oled)
 233:oled.c        **** {
 650              		.loc 1 233 0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 8
 653              		@ frame_needed = 1, uses_anonymous_args = 0
 654 0000 80B5     		push	{r7, lr}
 655              		.cfi_def_cfa_offset 8
 656              		.cfi_offset 7, -8
 657              		.cfi_offset 14, -4
 658 0002 84B0     		sub	sp, sp, #16
 659              		.cfi_def_cfa_offset 24
 660 0004 02AF     		add	r7, sp, #8
 661              		.cfi_def_cfa 7, 16
 662 0006 7860     		str	r0, [r7, #4]
 234:oled.c        ****     WriteGRAM(oled, 0, 0, OLED_WIDTH-1, OLED_HEIGHT-1, oled->bkColor);      // fill screen with bac
 663              		.loc 1 234 0
 664 0008 7B68     		ldr	r3, [r7, #4]
 665 000a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 666 000c 0193     		str	r3, [sp, #4]
 667 000e 3F23     		movs	r3, #63
 668 0010 0093     		str	r3, [sp]
 669 0012 7F23     		movs	r3, #127
 670 0014 0022     		movs	r2, #0
 671 0016 0021     		movs	r1, #0
 672 0018 7868     		ldr	r0, [r7, #4]
 673 001a FFF7FEFF 		bl	WriteGRAM
 235:oled.c        **** }
 674              		.loc 1 235 0
 675 001e 00BF     		nop
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 17


 676 0020 0837     		adds	r7, r7, #8
 677              		.cfi_def_cfa_offset 8
 678 0022 BD46     		mov	sp, r7
 679              		.cfi_def_cfa_register 13
 680              		@ sp needed
 681 0024 80BD     		pop	{r7, pc}
 682              		.cfi_endproc
 683              	.LFE75:
 684              		.size	oled_Clear, .-oled_Clear
 685 0026 00BF     		.section	.text.oled_ClearRect,"ax",%progbits
 686              		.align	2
 687              		.global	oled_ClearRect
 688              		.thumb
 689              		.thumb_func
 690              		.type	oled_ClearRect, %function
 691              	oled_ClearRect:
 692              	.LFB76:
 236:oled.c        **** 
 237:oled.c        **** //========================================
 238:oled.c        **** // oled_ClearRect()
 239:oled.c        **** // this functions clears a rectangle defined by
 240:oled.c        **** // its upper left corner (x0, y0) and lower right
 241:oled.c        **** // corner (x1, y1)
 242:oled.c        **** // 
 243:oled.c        **** //
 244:oled.c        **** // Parameters:
 245:oled.c        **** //     oled - pointer to a oled_t structure
 246:oled.c        **** //     x0 - upper left x-coordinate
 247:oled.c        **** //     y0 - upper left y-coordinate
 248:oled.c        **** //     x1 - lower right x-coordinate
 249:oled.c        **** //     y1 - lower right y-coordinate
 250:oled.c        **** //========================================
 251:oled.c        **** void oled_ClearRect(oled_t * oled, int x0, int y0, int x1, int y1)
 252:oled.c        **** {
 693              		.loc 1 252 0
 694              		.cfi_startproc
 695              		@ args = 4, pretend = 0, frame = 16
 696              		@ frame_needed = 1, uses_anonymous_args = 0
 697 0000 80B5     		push	{r7, lr}
 698              		.cfi_def_cfa_offset 8
 699              		.cfi_offset 7, -8
 700              		.cfi_offset 14, -4
 701 0002 86B0     		sub	sp, sp, #24
 702              		.cfi_def_cfa_offset 32
 703 0004 02AF     		add	r7, sp, #8
 704              		.cfi_def_cfa 7, 24
 705 0006 F860     		str	r0, [r7, #12]
 706 0008 B960     		str	r1, [r7, #8]
 707 000a 7A60     		str	r2, [r7, #4]
 708 000c 3B60     		str	r3, [r7]
 253:oled.c        ****     WriteGRAM(oled, x0, y0, x1, y1, oled->bkColor);     // clear rectangle   
 709              		.loc 1 253 0
 710 000e FB68     		ldr	r3, [r7, #12]
 711 0010 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 712 0012 0193     		str	r3, [sp, #4]
 713 0014 BB69     		ldr	r3, [r7, #24]
 714 0016 0093     		str	r3, [sp]
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 18


 715 0018 3B68     		ldr	r3, [r7]
 716 001a 7A68     		ldr	r2, [r7, #4]
 717 001c B968     		ldr	r1, [r7, #8]
 718 001e F868     		ldr	r0, [r7, #12]
 719 0020 FFF7FEFF 		bl	WriteGRAM
 254:oled.c        **** }
 720              		.loc 1 254 0
 721 0024 00BF     		nop
 722 0026 1037     		adds	r7, r7, #16
 723              		.cfi_def_cfa_offset 8
 724 0028 BD46     		mov	sp, r7
 725              		.cfi_def_cfa_register 13
 726              		@ sp needed
 727 002a 80BD     		pop	{r7, pc}
 728              		.cfi_endproc
 729              	.LFE76:
 730              		.size	oled_ClearRect, .-oled_ClearRect
 731              		.section	.text.oled_DrawPixel,"ax",%progbits
 732              		.align	2
 733              		.global	oled_DrawPixel
 734              		.thumb
 735              		.thumb_func
 736              		.type	oled_DrawPixel, %function
 737              	oled_DrawPixel:
 738              	.LFB77:
 255:oled.c        **** 
 256:oled.c        **** //========================================
 257:oled.c        **** // oled_DrawPixel()
 258:oled.c        **** // this function fills the pixel located at (x, y)
 259:oled.c        **** // with the forground color.
 260:oled.c        **** //
 261:oled.c        **** // Parameters:
 262:oled.c        **** //     oled - pointer to a oled_t structure
 263:oled.c        **** //     x - x-coordinate of pixel
 264:oled.c        **** //     y - y-coordinate of pixel
 265:oled.c        **** //========================================
 266:oled.c        **** void oled_DrawPixel(oled_t * oled, int x, int y)
 267:oled.c        **** {
 739              		.loc 1 267 0
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 16
 742              		@ frame_needed = 1, uses_anonymous_args = 0
 743 0000 80B5     		push	{r7, lr}
 744              		.cfi_def_cfa_offset 8
 745              		.cfi_offset 7, -8
 746              		.cfi_offset 14, -4
 747 0002 86B0     		sub	sp, sp, #24
 748              		.cfi_def_cfa_offset 32
 749 0004 02AF     		add	r7, sp, #8
 750              		.cfi_def_cfa 7, 24
 751 0006 F860     		str	r0, [r7, #12]
 752 0008 B960     		str	r1, [r7, #8]
 753 000a 7A60     		str	r2, [r7, #4]
 268:oled.c        ****     WriteGRAM(oled, x, y, x, y, oled->color);       // draw pixel
 754              		.loc 1 268 0
 755 000c FB68     		ldr	r3, [r7, #12]
 756 000e 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 19


 757 0010 0193     		str	r3, [sp, #4]
 758 0012 7B68     		ldr	r3, [r7, #4]
 759 0014 0093     		str	r3, [sp]
 760 0016 BB68     		ldr	r3, [r7, #8]
 761 0018 7A68     		ldr	r2, [r7, #4]
 762 001a B968     		ldr	r1, [r7, #8]
 763 001c F868     		ldr	r0, [r7, #12]
 764 001e FFF7FEFF 		bl	WriteGRAM
 269:oled.c        **** } 
 765              		.loc 1 269 0
 766 0022 00BF     		nop
 767 0024 1037     		adds	r7, r7, #16
 768              		.cfi_def_cfa_offset 8
 769 0026 BD46     		mov	sp, r7
 770              		.cfi_def_cfa_register 13
 771              		@ sp needed
 772 0028 80BD     		pop	{r7, pc}
 773              		.cfi_endproc
 774              	.LFE77:
 775              		.size	oled_DrawPixel, .-oled_DrawPixel
 776 002a 00BF     		.section	.text.oled_DrawLine,"ax",%progbits
 777              		.align	2
 778              		.global	oled_DrawLine
 779              		.thumb
 780              		.thumb_func
 781              		.type	oled_DrawLine, %function
 782              	oled_DrawLine:
 783              	.LFB78:
 270:oled.c        **** 
 271:oled.c        **** //========================================
 272:oled.c        **** // oled_DrawLine()
 273:oled.c        **** // this functions draws a line between the 
 274:oled.c        **** // points (x0, y0) and (x1, y1)
 275:oled.c        **** //
 276:oled.c        **** // Parameters:
 277:oled.c        **** //     oled - pointer to a oled_t structure
 278:oled.c        **** //     x0 - x-coordinate of the first point
 279:oled.c        **** //     y0 - y-coordinate of the first point
 280:oled.c        **** //     x1 - x-coordinate of the second point
 281:oled.c        **** //     y1 - y-coordinate of the second point
 282:oled.c        **** //========================================
 283:oled.c        **** void oled_DrawLine(oled_t * oled, int x0, int y0, int x1, int y1)
 284:oled.c        **** {
 784              		.loc 1 284 0
 785              		.cfi_startproc
 786              		@ args = 4, pretend = 0, frame = 24
 787              		@ frame_needed = 1, uses_anonymous_args = 0
 788 0000 90B5     		push	{r4, r7, lr}
 789              		.cfi_def_cfa_offset 12
 790              		.cfi_offset 4, -12
 791              		.cfi_offset 7, -8
 792              		.cfi_offset 14, -4
 793 0002 89B0     		sub	sp, sp, #36
 794              		.cfi_def_cfa_offset 48
 795 0004 02AF     		add	r7, sp, #8
 796              		.cfi_def_cfa 7, 40
 797 0006 F860     		str	r0, [r7, #12]
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 20


 798 0008 B960     		str	r1, [r7, #8]
 799 000a 7A60     		str	r2, [r7, #4]
 800 000c 3B60     		str	r3, [r7]
 285:oled.c        ****     if (x0 == x1){                              // check if line is vertical
 801              		.loc 1 285 0
 802 000e BA68     		ldr	r2, [r7, #8]
 803 0010 3B68     		ldr	r3, [r7]
 804 0012 9A42     		cmp	r2, r3
 805 0014 06D1     		bne	.L38
 286:oled.c        ****         DrawVLine(oled, x0, y1, y0);            // draw vertical line
 806              		.loc 1 286 0
 807 0016 B968     		ldr	r1, [r7, #8]
 808 0018 BA6A     		ldr	r2, [r7, #40]
 809 001a 7B68     		ldr	r3, [r7, #4]
 810 001c F868     		ldr	r0, [r7, #12]
 811 001e FFF7FEFF 		bl	DrawVLine
 287:oled.c        ****         return;
 812              		.loc 1 287 0
 813 0022 77E0     		b	.L37
 814              	.L38:
 288:oled.c        ****     }
 289:oled.c        ****     if (y0 == y1){                              // check if line is horizontal
 815              		.loc 1 289 0
 816 0024 7A68     		ldr	r2, [r7, #4]
 817 0026 BB6A     		ldr	r3, [r7, #40]
 818 0028 9A42     		cmp	r2, r3
 819 002a 06D1     		bne	.L40
 290:oled.c        ****         DrawHLine(oled, y0, x1, x0);            // draw horizontal line
 820              		.loc 1 290 0
 821 002c 7968     		ldr	r1, [r7, #4]
 822 002e 3A68     		ldr	r2, [r7]
 823 0030 BB68     		ldr	r3, [r7, #8]
 824 0032 F868     		ldr	r0, [r7, #12]
 825 0034 FFF7FEFF 		bl	DrawHLine
 291:oled.c        ****         return;
 826              		.loc 1 291 0
 827 0038 6CE0     		b	.L37
 828              	.L40:
 292:oled.c        ****     }
 293:oled.c        ****     if (x1 < x0){                               // check if x0 <= x1 (if not, swap coordinates)
 829              		.loc 1 293 0
 830 003a 3A68     		ldr	r2, [r7]
 831 003c BB68     		ldr	r3, [r7, #8]
 832 003e 9A42     		cmp	r2, r3
 833 0040 0CDA     		bge	.L41
 294:oled.c        ****         Swap(&x0, &x1);                         // swap x coordinates
 834              		.loc 1 294 0
 835 0042 3A46     		mov	r2, r7
 836 0044 07F10803 		add	r3, r7, #8
 837 0048 1146     		mov	r1, r2
 838 004a 1846     		mov	r0, r3
 839 004c FFF7FEFF 		bl	Swap
 295:oled.c        ****         Swap(&y0, &y1);                         // swap y coordinates
 840              		.loc 1 295 0
 841 0050 3B1D     		adds	r3, r7, #4
 842 0052 07F12801 		add	r1, r7, #40
 843 0056 1846     		mov	r0, r3
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 21


 844 0058 FFF7FEFF 		bl	Swap
 845              	.L41:
 296:oled.c        ****     }
 297:oled.c        ****                                                 // Bresenham's line algorith assumes the slope of t
 298:oled.c        ****                                                 // swap coordinates to put the line in this form. r
 299:oled.c        ****     uint8 rot = 1;                              // 0 <= slope <= 1
 846              		.loc 1 299 0
 847 005c 0123     		movs	r3, #1
 848 005e FB75     		strb	r3, [r7, #23]
 300:oled.c        ****     if (x1-x0 < y1-y0){                         // 1 < slope
 849              		.loc 1 300 0
 850 0060 3A68     		ldr	r2, [r7]
 851 0062 BB68     		ldr	r3, [r7, #8]
 852 0064 D21A     		subs	r2, r2, r3
 853 0066 B96A     		ldr	r1, [r7, #40]
 854 0068 7B68     		ldr	r3, [r7, #4]
 855 006a CB1A     		subs	r3, r1, r3
 856 006c 9A42     		cmp	r2, r3
 857 006e 0FDA     		bge	.L42
 301:oled.c        ****        rot = 0;
 858              		.loc 1 301 0
 859 0070 0023     		movs	r3, #0
 860 0072 FB75     		strb	r3, [r7, #23]
 302:oled.c        ****        Swap(&x0, &y0);
 861              		.loc 1 302 0
 862 0074 3A1D     		adds	r2, r7, #4
 863 0076 07F10803 		add	r3, r7, #8
 864 007a 1146     		mov	r1, r2
 865 007c 1846     		mov	r0, r3
 866 007e FFF7FEFF 		bl	Swap
 303:oled.c        ****        Swap(&x1, &y1);
 867              		.loc 1 303 0
 868 0082 3B46     		mov	r3, r7
 869 0084 07F12801 		add	r1, r7, #40
 870 0088 1846     		mov	r0, r3
 871 008a FFF7FEFF 		bl	Swap
 872 008e 31E0     		b	.L43
 873              	.L42:
 304:oled.c        ****     }                            
 305:oled.c        ****     else if ((x1-x0 >= y0-y1) && (y0 > y1)){    // -1 <= slope < 0
 874              		.loc 1 305 0
 875 0090 3A68     		ldr	r2, [r7]
 876 0092 BB68     		ldr	r3, [r7, #8]
 877 0094 D21A     		subs	r2, r2, r3
 878 0096 7968     		ldr	r1, [r7, #4]
 879 0098 BB6A     		ldr	r3, [r7, #40]
 880 009a CB1A     		subs	r3, r1, r3
 881 009c 9A42     		cmp	r2, r3
 882 009e 0CDB     		blt	.L44
 883              		.loc 1 305 0 is_stmt 0 discriminator 1
 884 00a0 7A68     		ldr	r2, [r7, #4]
 885 00a2 BB6A     		ldr	r3, [r7, #40]
 886 00a4 9A42     		cmp	r2, r3
 887 00a6 08DD     		ble	.L44
 306:oled.c        ****         rot = 2;  
 888              		.loc 1 306 0 is_stmt 1
 889 00a8 0223     		movs	r3, #2
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 22


 890 00aa FB75     		strb	r3, [r7, #23]
 307:oled.c        ****         y0 = -y0;                                   
 891              		.loc 1 307 0
 892 00ac 7B68     		ldr	r3, [r7, #4]
 893 00ae 5B42     		negs	r3, r3
 894 00b0 7B60     		str	r3, [r7, #4]
 308:oled.c        ****         y1 = -y1;
 895              		.loc 1 308 0
 896 00b2 BB6A     		ldr	r3, [r7, #40]
 897 00b4 5B42     		negs	r3, r3
 898 00b6 BB62     		str	r3, [r7, #40]
 899 00b8 1CE0     		b	.L43
 900              	.L44:
 309:oled.c        ****     }
 310:oled.c        ****     else if (x1-x0 < y0-y1){                    // slope < -1
 901              		.loc 1 310 0
 902 00ba 3A68     		ldr	r2, [r7]
 903 00bc BB68     		ldr	r3, [r7, #8]
 904 00be D21A     		subs	r2, r2, r3
 905 00c0 7968     		ldr	r1, [r7, #4]
 906 00c2 BB6A     		ldr	r3, [r7, #40]
 907 00c4 CB1A     		subs	r3, r1, r3
 908 00c6 9A42     		cmp	r2, r3
 909 00c8 14DA     		bge	.L43
 311:oled.c        ****         rot = 3; 
 910              		.loc 1 311 0
 911 00ca 0323     		movs	r3, #3
 912 00cc FB75     		strb	r3, [r7, #23]
 312:oled.c        ****         y0 = -y0;                                   
 913              		.loc 1 312 0
 914 00ce 7B68     		ldr	r3, [r7, #4]
 915 00d0 5B42     		negs	r3, r3
 916 00d2 7B60     		str	r3, [r7, #4]
 313:oled.c        ****         y1 = -y1;
 917              		.loc 1 313 0
 918 00d4 BB6A     		ldr	r3, [r7, #40]
 919 00d6 5B42     		negs	r3, r3
 920 00d8 BB62     		str	r3, [r7, #40]
 314:oled.c        ****         Swap(&x0, &y0);                             
 921              		.loc 1 314 0
 922 00da 3A1D     		adds	r2, r7, #4
 923 00dc 07F10803 		add	r3, r7, #8
 924 00e0 1146     		mov	r1, r2
 925 00e2 1846     		mov	r0, r3
 926 00e4 FFF7FEFF 		bl	Swap
 315:oled.c        ****         Swap(&x1, &y1);
 927              		.loc 1 315 0
 928 00e8 3B46     		mov	r3, r7
 929 00ea 07F12801 		add	r1, r7, #40
 930 00ee 1846     		mov	r0, r3
 931 00f0 FFF7FEFF 		bl	Swap
 932              	.L43:
 316:oled.c        ****     }
 317:oled.c        ****     
 318:oled.c        ****     BresenhamLineAlgorithm(oled, x0, y0, x1-x0, y1-y0, rot);        // draw line using the Bresenha
 933              		.loc 1 318 0
 934 00f4 B968     		ldr	r1, [r7, #8]
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 23


 935 00f6 7868     		ldr	r0, [r7, #4]
 936 00f8 3A68     		ldr	r2, [r7]
 937 00fa BB68     		ldr	r3, [r7, #8]
 938 00fc D41A     		subs	r4, r2, r3
 939 00fe BA6A     		ldr	r2, [r7, #40]
 940 0100 7B68     		ldr	r3, [r7, #4]
 941 0102 D31A     		subs	r3, r2, r3
 942 0104 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 943 0106 0192     		str	r2, [sp, #4]
 944 0108 0093     		str	r3, [sp]
 945 010a 2346     		mov	r3, r4
 946 010c 0246     		mov	r2, r0
 947 010e F868     		ldr	r0, [r7, #12]
 948 0110 FFF7FEFF 		bl	BresenhamLineAlgorithm
 949              	.L37:
 319:oled.c        **** }
 950              		.loc 1 319 0
 951 0114 1C37     		adds	r7, r7, #28
 952              		.cfi_def_cfa_offset 12
 953 0116 BD46     		mov	sp, r7
 954              		.cfi_def_cfa_register 13
 955              		@ sp needed
 956 0118 90BD     		pop	{r4, r7, pc}
 957              		.cfi_endproc
 958              	.LFE78:
 959              		.size	oled_DrawLine, .-oled_DrawLine
 960 011a 00BF     		.section	.text.oled_FillRect,"ax",%progbits
 961              		.align	2
 962              		.global	oled_FillRect
 963              		.thumb
 964              		.thumb_func
 965              		.type	oled_FillRect, %function
 966              	oled_FillRect:
 967              	.LFB79:
 320:oled.c        **** 
 321:oled.c        **** //========================================
 322:oled.c        **** // oled_FillRect()
 323:oled.c        **** // this functions fills a rectangle defined by
 324:oled.c        **** // its upper left corner (x0, y0) and lower right
 325:oled.c        **** // corner (x1, y1)
 326:oled.c        **** //
 327:oled.c        **** // Parameters:
 328:oled.c        **** //     oled - pointer to a oled_t structure
 329:oled.c        **** //     x0 - upper left x-coordinate
 330:oled.c        **** //     y0 - upper left y-coordinate
 331:oled.c        **** //     x1 - lower right x-coordinate
 332:oled.c        **** //     y1 - lower right y-coordinate
 333:oled.c        **** //========================================
 334:oled.c        **** void oled_FillRect(oled_t * oled, int x0, int y0, int x1, int y1)
 335:oled.c        **** {
 968              		.loc 1 335 0
 969              		.cfi_startproc
 970              		@ args = 4, pretend = 0, frame = 16
 971              		@ frame_needed = 1, uses_anonymous_args = 0
 972 0000 80B5     		push	{r7, lr}
 973              		.cfi_def_cfa_offset 8
 974              		.cfi_offset 7, -8
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 24


 975              		.cfi_offset 14, -4
 976 0002 86B0     		sub	sp, sp, #24
 977              		.cfi_def_cfa_offset 32
 978 0004 02AF     		add	r7, sp, #8
 979              		.cfi_def_cfa 7, 24
 980 0006 F860     		str	r0, [r7, #12]
 981 0008 B960     		str	r1, [r7, #8]
 982 000a 7A60     		str	r2, [r7, #4]
 983 000c 3B60     		str	r3, [r7]
 336:oled.c        ****     WriteGRAM(oled, x0, y0, x1, y1, oled->color);       // fill rectangle
 984              		.loc 1 336 0
 985 000e FB68     		ldr	r3, [r7, #12]
 986 0010 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 987 0012 0193     		str	r3, [sp, #4]
 988 0014 BB69     		ldr	r3, [r7, #24]
 989 0016 0093     		str	r3, [sp]
 990 0018 3B68     		ldr	r3, [r7]
 991 001a 7A68     		ldr	r2, [r7, #4]
 992 001c B968     		ldr	r1, [r7, #8]
 993 001e F868     		ldr	r0, [r7, #12]
 994 0020 FFF7FEFF 		bl	WriteGRAM
 337:oled.c        **** }
 995              		.loc 1 337 0
 996 0024 00BF     		nop
 997 0026 1037     		adds	r7, r7, #16
 998              		.cfi_def_cfa_offset 8
 999 0028 BD46     		mov	sp, r7
 1000              		.cfi_def_cfa_register 13
 1001              		@ sp needed
 1002 002a 80BD     		pop	{r7, pc}
 1003              		.cfi_endproc
 1004              	.LFE79:
 1005              		.size	oled_FillRect, .-oled_FillRect
 1006              		.section	.text.oled_FillRoundedRect,"ax",%progbits
 1007              		.align	2
 1008              		.global	oled_FillRoundedRect
 1009              		.thumb
 1010              		.thumb_func
 1011              		.type	oled_FillRoundedRect, %function
 1012              	oled_FillRoundedRect:
 1013              	.LFB80:
 338:oled.c        **** 
 339:oled.c        **** //========================================
 340:oled.c        **** // oled_FillRoundedRect()
 341:oled.c        **** // this functions fills a rectangle defined by
 342:oled.c        **** // its upper left corner (x0, y0) and lower right
 343:oled.c        **** // corner (x1, y1). The corners of the rectangle 
 344:oled.c        **** // are rounded with radius r
 345:oled.c        **** //
 346:oled.c        **** // Parameters:
 347:oled.c        **** //     oled - pointer to a oled_t structure
 348:oled.c        **** //     x0 - upper left x-position
 349:oled.c        **** //     y0 - upper left y-position
 350:oled.c        **** //     x1 - lower right x-position
 351:oled.c        **** //     y1 - lower right y-position
 352:oled.c        **** //     r - radius to be used for rounded corners
 353:oled.c        **** //         (must be less than or equal to 1/2 
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 25


 354:oled.c        **** //         the smallest side length)
 355:oled.c        **** //========================================
 356:oled.c        **** void oled_FillRoundedRect(oled_t * oled, int x0, int y0, int x1, int y1, int r)
 357:oled.c        **** {
 1014              		.loc 1 357 0
 1015              		.cfi_startproc
 1016              		@ args = 8, pretend = 0, frame = 16
 1017              		@ frame_needed = 1, uses_anonymous_args = 0
 1018 0000 80B5     		push	{r7, lr}
 1019              		.cfi_def_cfa_offset 8
 1020              		.cfi_offset 7, -8
 1021              		.cfi_offset 14, -4
 1022 0002 86B0     		sub	sp, sp, #24
 1023              		.cfi_def_cfa_offset 32
 1024 0004 02AF     		add	r7, sp, #8
 1025              		.cfi_def_cfa 7, 24
 1026 0006 F860     		str	r0, [r7, #12]
 1027 0008 B960     		str	r1, [r7, #8]
 1028 000a 7A60     		str	r2, [r7, #4]
 1029 000c 3B60     		str	r3, [r7]
 358:oled.c        ****     if ((x1 - x0 < 2*r) || (y1 - y0 < 2*r)) return;     // raidus must be less than or equal to 1/2
 1030              		.loc 1 358 0
 1031 000e 3A68     		ldr	r2, [r7]
 1032 0010 BB68     		ldr	r3, [r7, #8]
 1033 0012 D21A     		subs	r2, r2, r3
 1034 0014 FB69     		ldr	r3, [r7, #28]
 1035 0016 5B00     		lsls	r3, r3, #1
 1036 0018 9A42     		cmp	r2, r3
 1037 001a 6BDB     		blt	.L50
 1038              		.loc 1 358 0 is_stmt 0 discriminator 1
 1039 001c BA69     		ldr	r2, [r7, #24]
 1040 001e 7B68     		ldr	r3, [r7, #4]
 1041 0020 D21A     		subs	r2, r2, r3
 1042 0022 FB69     		ldr	r3, [r7, #28]
 1043 0024 5B00     		lsls	r3, r3, #1
 1044 0026 9A42     		cmp	r2, r3
 1045 0028 64DB     		blt	.L50
 359:oled.c        ****     oled_FillRect(oled, x0+r, y0, x1-r, y1);            // fill in rectangle
 1046              		.loc 1 359 0 is_stmt 1
 1047 002a BA68     		ldr	r2, [r7, #8]
 1048 002c FB69     		ldr	r3, [r7, #28]
 1049 002e D118     		adds	r1, r2, r3
 1050 0030 3A68     		ldr	r2, [r7]
 1051 0032 FB69     		ldr	r3, [r7, #28]
 1052 0034 D21A     		subs	r2, r2, r3
 1053 0036 BB69     		ldr	r3, [r7, #24]
 1054 0038 0093     		str	r3, [sp]
 1055 003a 1346     		mov	r3, r2
 1056 003c 7A68     		ldr	r2, [r7, #4]
 1057 003e F868     		ldr	r0, [r7, #12]
 1058 0040 FFF7FEFF 		bl	oled_FillRect
 360:oled.c        ****     oled_FillRect(oled, x0, y0+r, x0+r, y1-r);
 1059              		.loc 1 360 0
 1060 0044 7A68     		ldr	r2, [r7, #4]
 1061 0046 FB69     		ldr	r3, [r7, #28]
 1062 0048 D118     		adds	r1, r2, r3
 1063 004a BA68     		ldr	r2, [r7, #8]
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 26


 1064 004c FB69     		ldr	r3, [r7, #28]
 1065 004e D018     		adds	r0, r2, r3
 1066 0050 BA69     		ldr	r2, [r7, #24]
 1067 0052 FB69     		ldr	r3, [r7, #28]
 1068 0054 D31A     		subs	r3, r2, r3
 1069 0056 0093     		str	r3, [sp]
 1070 0058 0346     		mov	r3, r0
 1071 005a 0A46     		mov	r2, r1
 1072 005c B968     		ldr	r1, [r7, #8]
 1073 005e F868     		ldr	r0, [r7, #12]
 1074 0060 FFF7FEFF 		bl	oled_FillRect
 361:oled.c        ****     oled_FillRect(oled, x1-r, y0+r, x1, y1-r);
 1075              		.loc 1 361 0
 1076 0064 3A68     		ldr	r2, [r7]
 1077 0066 FB69     		ldr	r3, [r7, #28]
 1078 0068 D11A     		subs	r1, r2, r3
 1079 006a 7A68     		ldr	r2, [r7, #4]
 1080 006c FB69     		ldr	r3, [r7, #28]
 1081 006e D018     		adds	r0, r2, r3
 1082 0070 BA69     		ldr	r2, [r7, #24]
 1083 0072 FB69     		ldr	r3, [r7, #28]
 1084 0074 D31A     		subs	r3, r2, r3
 1085 0076 0093     		str	r3, [sp]
 1086 0078 3B68     		ldr	r3, [r7]
 1087 007a 0246     		mov	r2, r0
 1088 007c F868     		ldr	r0, [r7, #12]
 1089 007e FFF7FEFF 		bl	oled_FillRect
 362:oled.c        ****     oled_DrawPie(oled, x1-r, y0+r, r, 6, 8);            // fill in corners
 1090              		.loc 1 362 0
 1091 0082 3A68     		ldr	r2, [r7]
 1092 0084 FB69     		ldr	r3, [r7, #28]
 1093 0086 D11A     		subs	r1, r2, r3
 1094 0088 7A68     		ldr	r2, [r7, #4]
 1095 008a FB69     		ldr	r3, [r7, #28]
 1096 008c 1A44     		add	r2, r2, r3
 1097 008e 0823     		movs	r3, #8
 1098 0090 0193     		str	r3, [sp, #4]
 1099 0092 0623     		movs	r3, #6
 1100 0094 0093     		str	r3, [sp]
 1101 0096 FB69     		ldr	r3, [r7, #28]
 1102 0098 F868     		ldr	r0, [r7, #12]
 1103 009a FFF7FEFF 		bl	oled_DrawPie
 363:oled.c        ****     oled_DrawPie(oled, x0+r, y0+r, r, 4, 6);
 1104              		.loc 1 363 0
 1105 009e BA68     		ldr	r2, [r7, #8]
 1106 00a0 FB69     		ldr	r3, [r7, #28]
 1107 00a2 D118     		adds	r1, r2, r3
 1108 00a4 7A68     		ldr	r2, [r7, #4]
 1109 00a6 FB69     		ldr	r3, [r7, #28]
 1110 00a8 1A44     		add	r2, r2, r3
 1111 00aa 0623     		movs	r3, #6
 1112 00ac 0193     		str	r3, [sp, #4]
 1113 00ae 0423     		movs	r3, #4
 1114 00b0 0093     		str	r3, [sp]
 1115 00b2 FB69     		ldr	r3, [r7, #28]
 1116 00b4 F868     		ldr	r0, [r7, #12]
 1117 00b6 FFF7FEFF 		bl	oled_DrawPie
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 27


 364:oled.c        ****     oled_DrawPie(oled, x0+r, y1-r, r, 2, 4);
 1118              		.loc 1 364 0
 1119 00ba BA68     		ldr	r2, [r7, #8]
 1120 00bc FB69     		ldr	r3, [r7, #28]
 1121 00be D118     		adds	r1, r2, r3
 1122 00c0 BA69     		ldr	r2, [r7, #24]
 1123 00c2 FB69     		ldr	r3, [r7, #28]
 1124 00c4 D21A     		subs	r2, r2, r3
 1125 00c6 0423     		movs	r3, #4
 1126 00c8 0193     		str	r3, [sp, #4]
 1127 00ca 0223     		movs	r3, #2
 1128 00cc 0093     		str	r3, [sp]
 1129 00ce FB69     		ldr	r3, [r7, #28]
 1130 00d0 F868     		ldr	r0, [r7, #12]
 1131 00d2 FFF7FEFF 		bl	oled_DrawPie
 365:oled.c        ****     oled_DrawPie(oled, x1-r, y1-r, r, 0, 2);
 1132              		.loc 1 365 0
 1133 00d6 3A68     		ldr	r2, [r7]
 1134 00d8 FB69     		ldr	r3, [r7, #28]
 1135 00da D11A     		subs	r1, r2, r3
 1136 00dc BA69     		ldr	r2, [r7, #24]
 1137 00de FB69     		ldr	r3, [r7, #28]
 1138 00e0 D21A     		subs	r2, r2, r3
 1139 00e2 0223     		movs	r3, #2
 1140 00e4 0193     		str	r3, [sp, #4]
 1141 00e6 0023     		movs	r3, #0
 1142 00e8 0093     		str	r3, [sp]
 1143 00ea FB69     		ldr	r3, [r7, #28]
 1144 00ec F868     		ldr	r0, [r7, #12]
 1145 00ee FFF7FEFF 		bl	oled_DrawPie
 1146 00f2 00E0     		b	.L46
 1147              	.L50:
 358:oled.c        ****     oled_FillRect(oled, x0+r, y0, x1-r, y1);            // fill in rectangle
 1148              		.loc 1 358 0
 1149 00f4 00BF     		nop
 1150              	.L46:
 366:oled.c        **** }
 1151              		.loc 1 366 0
 1152 00f6 1037     		adds	r7, r7, #16
 1153              		.cfi_def_cfa_offset 8
 1154 00f8 BD46     		mov	sp, r7
 1155              		.cfi_def_cfa_register 13
 1156              		@ sp needed
 1157 00fa 80BD     		pop	{r7, pc}
 1158              		.cfi_endproc
 1159              	.LFE80:
 1160              		.size	oled_FillRoundedRect, .-oled_FillRoundedRect
 1161              		.section	.text.oled_DrawRect,"ax",%progbits
 1162              		.align	2
 1163              		.global	oled_DrawRect
 1164              		.thumb
 1165              		.thumb_func
 1166              		.type	oled_DrawRect, %function
 1167              	oled_DrawRect:
 1168              	.LFB81:
 367:oled.c        **** 
 368:oled.c        **** //========================================
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 28


 369:oled.c        **** // oled_DrawRect()
 370:oled.c        **** // this functions draws a rectangle defined by
 371:oled.c        **** // its upper left corner (x0, y0) and lower right
 372:oled.c        **** // corner (x1, y1)
 373:oled.c        **** // 
 374:oled.c        **** // Parameters:
 375:oled.c        **** //     oled - pointer to a oled_t structure
 376:oled.c        **** //     x0 - upper left x-position
 377:oled.c        **** //     y0 - upper left y-position
 378:oled.c        **** //     x1 - lower right x-position
 379:oled.c        **** //     y1 - lower right y-position
 380:oled.c        **** //========================================
 381:oled.c        **** void oled_DrawRect(oled_t * oled, int x0, int y0, int x1, int y1)
 382:oled.c        **** {
 1169              		.loc 1 382 0
 1170              		.cfi_startproc
 1171              		@ args = 4, pretend = 0, frame = 16
 1172              		@ frame_needed = 1, uses_anonymous_args = 0
 1173 0000 80B5     		push	{r7, lr}
 1174              		.cfi_def_cfa_offset 8
 1175              		.cfi_offset 7, -8
 1176              		.cfi_offset 14, -4
 1177 0002 84B0     		sub	sp, sp, #16
 1178              		.cfi_def_cfa_offset 24
 1179 0004 00AF     		add	r7, sp, #0
 1180              		.cfi_def_cfa_register 7
 1181 0006 F860     		str	r0, [r7, #12]
 1182 0008 B960     		str	r1, [r7, #8]
 1183 000a 7A60     		str	r2, [r7, #4]
 1184 000c 3B60     		str	r3, [r7]
 383:oled.c        ****     if ((x1 < x0) || (y1 < y0)) return;     // check for bad parameters
 1185              		.loc 1 383 0
 1186 000e 3A68     		ldr	r2, [r7]
 1187 0010 BB68     		ldr	r3, [r7, #8]
 1188 0012 9A42     		cmp	r2, r3
 1189 0014 1CDB     		blt	.L55
 1190              		.loc 1 383 0 is_stmt 0 discriminator 1
 1191 0016 BA69     		ldr	r2, [r7, #24]
 1192 0018 7B68     		ldr	r3, [r7, #4]
 1193 001a 9A42     		cmp	r2, r3
 1194 001c 18DB     		blt	.L55
 384:oled.c        ****     DrawHLine(oled, y0, x0, x1);            // draw boundries of rectange
 1195              		.loc 1 384 0 is_stmt 1
 1196 001e 3B68     		ldr	r3, [r7]
 1197 0020 BA68     		ldr	r2, [r7, #8]
 1198 0022 7968     		ldr	r1, [r7, #4]
 1199 0024 F868     		ldr	r0, [r7, #12]
 1200 0026 FFF7FEFF 		bl	DrawHLine
 385:oled.c        ****     DrawHLine(oled, y1, x0, x1);
 1201              		.loc 1 385 0
 1202 002a 3B68     		ldr	r3, [r7]
 1203 002c BA68     		ldr	r2, [r7, #8]
 1204 002e B969     		ldr	r1, [r7, #24]
 1205 0030 F868     		ldr	r0, [r7, #12]
 1206 0032 FFF7FEFF 		bl	DrawHLine
 386:oled.c        ****     DrawVLine(oled, x0, y0, y1);
 1207              		.loc 1 386 0
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 29


 1208 0036 BB69     		ldr	r3, [r7, #24]
 1209 0038 7A68     		ldr	r2, [r7, #4]
 1210 003a B968     		ldr	r1, [r7, #8]
 1211 003c F868     		ldr	r0, [r7, #12]
 1212 003e FFF7FEFF 		bl	DrawVLine
 387:oled.c        ****     DrawVLine(oled, x1, y0, y1);
 1213              		.loc 1 387 0
 1214 0042 BB69     		ldr	r3, [r7, #24]
 1215 0044 7A68     		ldr	r2, [r7, #4]
 1216 0046 3968     		ldr	r1, [r7]
 1217 0048 F868     		ldr	r0, [r7, #12]
 1218 004a FFF7FEFF 		bl	DrawVLine
 1219 004e 00E0     		b	.L51
 1220              	.L55:
 383:oled.c        ****     DrawHLine(oled, y0, x0, x1);            // draw boundries of rectange
 1221              		.loc 1 383 0
 1222 0050 00BF     		nop
 1223              	.L51:
 388:oled.c        **** }
 1224              		.loc 1 388 0
 1225 0052 1037     		adds	r7, r7, #16
 1226              		.cfi_def_cfa_offset 8
 1227 0054 BD46     		mov	sp, r7
 1228              		.cfi_def_cfa_register 13
 1229              		@ sp needed
 1230 0056 80BD     		pop	{r7, pc}
 1231              		.cfi_endproc
 1232              	.LFE81:
 1233              		.size	oled_DrawRect, .-oled_DrawRect
 1234              		.section	.text.oled_DrawRoundedRect,"ax",%progbits
 1235              		.align	2
 1236              		.global	oled_DrawRoundedRect
 1237              		.thumb
 1238              		.thumb_func
 1239              		.type	oled_DrawRoundedRect, %function
 1240              	oled_DrawRoundedRect:
 1241              	.LFB82:
 389:oled.c        **** 
 390:oled.c        **** //========================================
 391:oled.c        **** // oled_DrawRoundedRect()
 392:oled.c        **** // this functions draws a rectangle defined by
 393:oled.c        **** // its upper left corner (x0, y0) and lower right
 394:oled.c        **** // corner (x1, y1). The corners of the rectangle 
 395:oled.c        **** // are rounded with radius r
 396:oled.c        **** // 
 397:oled.c        **** // Parameters:
 398:oled.c        **** //     oled - pointer to a oled_t structure
 399:oled.c        **** //     x0 - upper left x-position
 400:oled.c        **** //     y0 - upper left y-position
 401:oled.c        **** //     x1 - lower right x-position
 402:oled.c        **** //     y1 - lower right y-position
 403:oled.c        **** //     r - radius to be used for rounded corners
 404:oled.c        **** //         (must be less than or equal to 1/2 
 405:oled.c        **** //         the smallest side length)
 406:oled.c        **** //========================================
 407:oled.c        **** void oled_DrawRoundedRect(oled_t * oled, int x0, int y0, int x1, int y1, int r)
 408:oled.c        **** {
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 30


 1242              		.loc 1 408 0
 1243              		.cfi_startproc
 1244              		@ args = 8, pretend = 0, frame = 16
 1245              		@ frame_needed = 1, uses_anonymous_args = 0
 1246 0000 80B5     		push	{r7, lr}
 1247              		.cfi_def_cfa_offset 8
 1248              		.cfi_offset 7, -8
 1249              		.cfi_offset 14, -4
 1250 0002 86B0     		sub	sp, sp, #24
 1251              		.cfi_def_cfa_offset 32
 1252 0004 02AF     		add	r7, sp, #8
 1253              		.cfi_def_cfa 7, 24
 1254 0006 F860     		str	r0, [r7, #12]
 1255 0008 B960     		str	r1, [r7, #8]
 1256 000a 7A60     		str	r2, [r7, #4]
 1257 000c 3B60     		str	r3, [r7]
 409:oled.c        ****     if ((x1 - x0 < 2*r) || (y1 - y0 < 2*r)) return;     // raidus must be less than or equal to 1/2
 1258              		.loc 1 409 0
 1259 000e 3A68     		ldr	r2, [r7]
 1260 0010 BB68     		ldr	r3, [r7, #8]
 1261 0012 D21A     		subs	r2, r2, r3
 1262 0014 FB69     		ldr	r3, [r7, #28]
 1263 0016 5B00     		lsls	r3, r3, #1
 1264 0018 9A42     		cmp	r2, r3
 1265 001a 6BDB     		blt	.L60
 1266              		.loc 1 409 0 is_stmt 0 discriminator 1
 1267 001c BA69     		ldr	r2, [r7, #24]
 1268 001e 7B68     		ldr	r3, [r7, #4]
 1269 0020 D21A     		subs	r2, r2, r3
 1270 0022 FB69     		ldr	r3, [r7, #28]
 1271 0024 5B00     		lsls	r3, r3, #1
 1272 0026 9A42     		cmp	r2, r3
 1273 0028 64DB     		blt	.L60
 410:oled.c        ****     DrawHLine(oled, y0, x0+r, x1-r);                    // draw boundries of rectange
 1274              		.loc 1 410 0 is_stmt 1
 1275 002a BA68     		ldr	r2, [r7, #8]
 1276 002c FB69     		ldr	r3, [r7, #28]
 1277 002e D118     		adds	r1, r2, r3
 1278 0030 3A68     		ldr	r2, [r7]
 1279 0032 FB69     		ldr	r3, [r7, #28]
 1280 0034 D31A     		subs	r3, r2, r3
 1281 0036 0A46     		mov	r2, r1
 1282 0038 7968     		ldr	r1, [r7, #4]
 1283 003a F868     		ldr	r0, [r7, #12]
 1284 003c FFF7FEFF 		bl	DrawHLine
 411:oled.c        ****     DrawHLine(oled, y1, x0+r, x1-r);
 1285              		.loc 1 411 0
 1286 0040 BA68     		ldr	r2, [r7, #8]
 1287 0042 FB69     		ldr	r3, [r7, #28]
 1288 0044 D118     		adds	r1, r2, r3
 1289 0046 3A68     		ldr	r2, [r7]
 1290 0048 FB69     		ldr	r3, [r7, #28]
 1291 004a D31A     		subs	r3, r2, r3
 1292 004c 0A46     		mov	r2, r1
 1293 004e B969     		ldr	r1, [r7, #24]
 1294 0050 F868     		ldr	r0, [r7, #12]
 1295 0052 FFF7FEFF 		bl	DrawHLine
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 31


 412:oled.c        ****     DrawVLine(oled, x0, y0+r, y1-r);
 1296              		.loc 1 412 0
 1297 0056 7A68     		ldr	r2, [r7, #4]
 1298 0058 FB69     		ldr	r3, [r7, #28]
 1299 005a D118     		adds	r1, r2, r3
 1300 005c BA69     		ldr	r2, [r7, #24]
 1301 005e FB69     		ldr	r3, [r7, #28]
 1302 0060 D31A     		subs	r3, r2, r3
 1303 0062 0A46     		mov	r2, r1
 1304 0064 B968     		ldr	r1, [r7, #8]
 1305 0066 F868     		ldr	r0, [r7, #12]
 1306 0068 FFF7FEFF 		bl	DrawVLine
 413:oled.c        ****     DrawVLine(oled, x1, y0+r, y1-r);
 1307              		.loc 1 413 0
 1308 006c 7A68     		ldr	r2, [r7, #4]
 1309 006e FB69     		ldr	r3, [r7, #28]
 1310 0070 D118     		adds	r1, r2, r3
 1311 0072 BA69     		ldr	r2, [r7, #24]
 1312 0074 FB69     		ldr	r3, [r7, #28]
 1313 0076 D31A     		subs	r3, r2, r3
 1314 0078 0A46     		mov	r2, r1
 1315 007a 3968     		ldr	r1, [r7]
 1316 007c F868     		ldr	r0, [r7, #12]
 1317 007e FFF7FEFF 		bl	DrawVLine
 414:oled.c        ****     oled_DrawArc(oled, x1-r, y0+r, r, 6, 8);            // draw rounded edges
 1318              		.loc 1 414 0
 1319 0082 3A68     		ldr	r2, [r7]
 1320 0084 FB69     		ldr	r3, [r7, #28]
 1321 0086 D11A     		subs	r1, r2, r3
 1322 0088 7A68     		ldr	r2, [r7, #4]
 1323 008a FB69     		ldr	r3, [r7, #28]
 1324 008c 1A44     		add	r2, r2, r3
 1325 008e 0823     		movs	r3, #8
 1326 0090 0193     		str	r3, [sp, #4]
 1327 0092 0623     		movs	r3, #6
 1328 0094 0093     		str	r3, [sp]
 1329 0096 FB69     		ldr	r3, [r7, #28]
 1330 0098 F868     		ldr	r0, [r7, #12]
 1331 009a FFF7FEFF 		bl	oled_DrawArc
 415:oled.c        ****     oled_DrawArc(oled, x0+r, y0+r, r, 4, 6);
 1332              		.loc 1 415 0
 1333 009e BA68     		ldr	r2, [r7, #8]
 1334 00a0 FB69     		ldr	r3, [r7, #28]
 1335 00a2 D118     		adds	r1, r2, r3
 1336 00a4 7A68     		ldr	r2, [r7, #4]
 1337 00a6 FB69     		ldr	r3, [r7, #28]
 1338 00a8 1A44     		add	r2, r2, r3
 1339 00aa 0623     		movs	r3, #6
 1340 00ac 0193     		str	r3, [sp, #4]
 1341 00ae 0423     		movs	r3, #4
 1342 00b0 0093     		str	r3, [sp]
 1343 00b2 FB69     		ldr	r3, [r7, #28]
 1344 00b4 F868     		ldr	r0, [r7, #12]
 1345 00b6 FFF7FEFF 		bl	oled_DrawArc
 416:oled.c        ****     oled_DrawArc(oled, x0+r, y1-r, r, 2, 4);
 1346              		.loc 1 416 0
 1347 00ba BA68     		ldr	r2, [r7, #8]
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 32


 1348 00bc FB69     		ldr	r3, [r7, #28]
 1349 00be D118     		adds	r1, r2, r3
 1350 00c0 BA69     		ldr	r2, [r7, #24]
 1351 00c2 FB69     		ldr	r3, [r7, #28]
 1352 00c4 D21A     		subs	r2, r2, r3
 1353 00c6 0423     		movs	r3, #4
 1354 00c8 0193     		str	r3, [sp, #4]
 1355 00ca 0223     		movs	r3, #2
 1356 00cc 0093     		str	r3, [sp]
 1357 00ce FB69     		ldr	r3, [r7, #28]
 1358 00d0 F868     		ldr	r0, [r7, #12]
 1359 00d2 FFF7FEFF 		bl	oled_DrawArc
 417:oled.c        ****     oled_DrawArc(oled, x1-r, y1-r, r, 0, 2);
 1360              		.loc 1 417 0
 1361 00d6 3A68     		ldr	r2, [r7]
 1362 00d8 FB69     		ldr	r3, [r7, #28]
 1363 00da D11A     		subs	r1, r2, r3
 1364 00dc BA69     		ldr	r2, [r7, #24]
 1365 00de FB69     		ldr	r3, [r7, #28]
 1366 00e0 D21A     		subs	r2, r2, r3
 1367 00e2 0223     		movs	r3, #2
 1368 00e4 0193     		str	r3, [sp, #4]
 1369 00e6 0023     		movs	r3, #0
 1370 00e8 0093     		str	r3, [sp]
 1371 00ea FB69     		ldr	r3, [r7, #28]
 1372 00ec F868     		ldr	r0, [r7, #12]
 1373 00ee FFF7FEFF 		bl	oled_DrawArc
 1374 00f2 00E0     		b	.L56
 1375              	.L60:
 409:oled.c        ****     DrawHLine(oled, y0, x0+r, x1-r);                    // draw boundries of rectange
 1376              		.loc 1 409 0
 1377 00f4 00BF     		nop
 1378              	.L56:
 418:oled.c        **** }
 1379              		.loc 1 418 0
 1380 00f6 1037     		adds	r7, r7, #16
 1381              		.cfi_def_cfa_offset 8
 1382 00f8 BD46     		mov	sp, r7
 1383              		.cfi_def_cfa_register 13
 1384              		@ sp needed
 1385 00fa 80BD     		pop	{r7, pc}
 1386              		.cfi_endproc
 1387              	.LFE82:
 1388              		.size	oled_DrawRoundedRect, .-oled_DrawRoundedRect
 1389              		.section	.text.oled_DrawCircle,"ax",%progbits
 1390              		.align	2
 1391              		.global	oled_DrawCircle
 1392              		.thumb
 1393              		.thumb_func
 1394              		.type	oled_DrawCircle, %function
 1395              	oled_DrawCircle:
 1396              	.LFB83:
 419:oled.c        **** 
 420:oled.c        **** //========================================
 421:oled.c        **** // oled_DrawCircle()
 422:oled.c        **** // this functions draws a circle or radius r
 423:oled.c        **** // centered at (xc, yc)
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 33


 424:oled.c        **** //
 425:oled.c        **** // Parameters:
 426:oled.c        **** //     oled - pointer to a oled_t structure
 427:oled.c        **** //     xc - x-coordinate of the center of the circle
 428:oled.c        **** //     yc - y-coordinate of the center of the circle
 429:oled.c        **** //     r - radius of circle
 430:oled.c        **** //========================================
 431:oled.c        **** void oled_DrawCircle(oled_t * oled, int xc, int yc, int r)
 432:oled.c        **** {
 1397              		.loc 1 432 0
 1398              		.cfi_startproc
 1399              		@ args = 0, pretend = 0, frame = 16
 1400              		@ frame_needed = 1, uses_anonymous_args = 0
 1401 0000 80B5     		push	{r7, lr}
 1402              		.cfi_def_cfa_offset 8
 1403              		.cfi_offset 7, -8
 1404              		.cfi_offset 14, -4
 1405 0002 86B0     		sub	sp, sp, #24
 1406              		.cfi_def_cfa_offset 32
 1407 0004 02AF     		add	r7, sp, #8
 1408              		.cfi_def_cfa 7, 24
 1409 0006 F860     		str	r0, [r7, #12]
 1410 0008 B960     		str	r1, [r7, #8]
 1411 000a 7A60     		str	r2, [r7, #4]
 1412 000c 3B60     		str	r3, [r7]
 433:oled.c        ****     BresenhamCircleAlgorithm(oled, xc, yc, r-oled->penSize, r+oled->penSize, 0xFF);     // draw cir
 1413              		.loc 1 433 0
 1414 000e FB68     		ldr	r3, [r7, #12]
 1415 0010 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 1416 0012 1A46     		mov	r2, r3
 1417 0014 3B68     		ldr	r3, [r7]
 1418 0016 991A     		subs	r1, r3, r2
 1419 0018 FB68     		ldr	r3, [r7, #12]
 1420 001a 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 1421 001c 1A46     		mov	r2, r3
 1422 001e 3B68     		ldr	r3, [r7]
 1423 0020 1344     		add	r3, r3, r2
 1424 0022 FF22     		movs	r2, #255
 1425 0024 0192     		str	r2, [sp, #4]
 1426 0026 0093     		str	r3, [sp]
 1427 0028 0B46     		mov	r3, r1
 1428 002a 7A68     		ldr	r2, [r7, #4]
 1429 002c B968     		ldr	r1, [r7, #8]
 1430 002e F868     		ldr	r0, [r7, #12]
 1431 0030 FFF7FEFF 		bl	BresenhamCircleAlgorithm
 434:oled.c        **** }
 1432              		.loc 1 434 0
 1433 0034 00BF     		nop
 1434 0036 1037     		adds	r7, r7, #16
 1435              		.cfi_def_cfa_offset 8
 1436 0038 BD46     		mov	sp, r7
 1437              		.cfi_def_cfa_register 13
 1438              		@ sp needed
 1439 003a 80BD     		pop	{r7, pc}
 1440              		.cfi_endproc
 1441              	.LFE83:
 1442              		.size	oled_DrawCircle, .-oled_DrawCircle
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 34


 1443              		.section	.text.oled_DrawArc,"ax",%progbits
 1444              		.align	2
 1445              		.global	oled_DrawArc
 1446              		.thumb
 1447              		.thumb_func
 1448              		.type	oled_DrawArc, %function
 1449              	oled_DrawArc:
 1450              	.LFB84:
 435:oled.c        **** 
 436:oled.c        **** //========================================
 437:oled.c        **** // oled_DrawArc()
 438:oled.c        **** // this function draws an arc of radius r
 439:oled.c        **** // centered at (xc, yc). a0 and a1 specify
 440:oled.c        **** // the start and end angles for the arc
 441:oled.c        **** // 
 442:oled.c        **** // Parameters:
 443:oled.c        **** //     oled - pointer to a oled_t structure
 444:oled.c        **** //     xc - x-coordinate of the center of the arc (center of circle)
 445:oled.c        **** //     yc - y-coordinate of the center of the arc (center of circle)
 446:oled.c        **** //     r - radius of arc
 447:oled.c        **** //     a0 - start angle (angle = a0*pi/4)
 448:oled.c        **** //     a1 - end angle (angle = a1*pi/4)
 449:oled.c        **** //========================================
 450:oled.c        **** void oled_DrawArc(oled_t * oled, int xc, int yc, int r, int a0, int a1)
 451:oled.c        **** {   
 1451              		.loc 1 451 0
 1452              		.cfi_startproc
 1453              		@ args = 8, pretend = 0, frame = 24
 1454              		@ frame_needed = 1, uses_anonymous_args = 0
 1455 0000 80B5     		push	{r7, lr}
 1456              		.cfi_def_cfa_offset 8
 1457              		.cfi_offset 7, -8
 1458              		.cfi_offset 14, -4
 1459 0002 88B0     		sub	sp, sp, #32
 1460              		.cfi_def_cfa_offset 40
 1461 0004 02AF     		add	r7, sp, #8
 1462              		.cfi_def_cfa 7, 32
 1463 0006 F860     		str	r0, [r7, #12]
 1464 0008 B960     		str	r1, [r7, #8]
 1465 000a 7A60     		str	r2, [r7, #4]
 1466 000c 3B60     		str	r3, [r7]
 452:oled.c        ****     if (a1 < a0) Swap(&a0, &a1);                        // make sure a0 is less than a1
 1467              		.loc 1 452 0
 1468 000e 7A6A     		ldr	r2, [r7, #36]
 1469 0010 3B6A     		ldr	r3, [r7, #32]
 1470 0012 9A42     		cmp	r2, r3
 1471 0014 06DA     		bge	.L63
 1472              		.loc 1 452 0 is_stmt 0 discriminator 1
 1473 0016 07F12403 		add	r3, r7, #36
 1474 001a 1946     		mov	r1, r3
 1475 001c 07F12000 		add	r0, r7, #32
 1476 0020 FFF7FEFF 		bl	Swap
 1477              	.L63:
 453:oled.c        ****     if ((a0 < 0) || (a1 > 8)) return;                   // make sure a0 and a1 are between 0 and 8 
 1478              		.loc 1 453 0 is_stmt 1
 1479 0024 3B6A     		ldr	r3, [r7, #32]
 1480 0026 002B     		cmp	r3, #0
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 35


 1481 0028 25DB     		blt	.L67
 1482              		.loc 1 453 0 is_stmt 0 discriminator 1
 1483 002a 7B6A     		ldr	r3, [r7, #36]
 1484 002c 082B     		cmp	r3, #8
 1485 002e 22DC     		bgt	.L67
 454:oled.c        **** 
 455:oled.c        ****     uint8 octants = (0xFF >> (8-a1)) & (0xFF << a0);    
 1486              		.loc 1 455 0 is_stmt 1
 1487 0030 7B6A     		ldr	r3, [r7, #36]
 1488 0032 C3F10803 		rsb	r3, r3, #8
 1489 0036 FF22     		movs	r2, #255
 1490 0038 42FA03F3 		asr	r3, r2, r3
 1491 003c 5AB2     		sxtb	r2, r3
 1492 003e 3B6A     		ldr	r3, [r7, #32]
 1493 0040 FF21     		movs	r1, #255
 1494 0042 01FA03F3 		lsl	r3, r1, r3
 1495 0046 5BB2     		sxtb	r3, r3
 1496 0048 1340     		ands	r3, r3, r2
 1497 004a 5BB2     		sxtb	r3, r3
 1498 004c FB75     		strb	r3, [r7, #23]
 456:oled.c        ****     BresenhamCircleAlgorithm(oled, xc, yc, r-oled->penSize, r+oled->penSize, octants);  // draw arc
 1499              		.loc 1 456 0
 1500 004e FB68     		ldr	r3, [r7, #12]
 1501 0050 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 1502 0052 1A46     		mov	r2, r3
 1503 0054 3B68     		ldr	r3, [r7]
 1504 0056 991A     		subs	r1, r3, r2
 1505 0058 FB68     		ldr	r3, [r7, #12]
 1506 005a 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 1507 005c 1A46     		mov	r2, r3
 1508 005e 3B68     		ldr	r3, [r7]
 1509 0060 1344     		add	r3, r3, r2
 1510 0062 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1511 0064 0192     		str	r2, [sp, #4]
 1512 0066 0093     		str	r3, [sp]
 1513 0068 0B46     		mov	r3, r1
 1514 006a 7A68     		ldr	r2, [r7, #4]
 1515 006c B968     		ldr	r1, [r7, #8]
 1516 006e F868     		ldr	r0, [r7, #12]
 1517 0070 FFF7FEFF 		bl	BresenhamCircleAlgorithm
 1518 0074 00E0     		b	.L62
 1519              	.L67:
 453:oled.c        ****     if ((a0 < 0) || (a1 > 8)) return;                   // make sure a0 and a1 are between 0 and 8 
 1520              		.loc 1 453 0
 1521 0076 00BF     		nop
 1522              	.L62:
 457:oled.c        **** }
 1523              		.loc 1 457 0
 1524 0078 1837     		adds	r7, r7, #24
 1525              		.cfi_def_cfa_offset 8
 1526 007a BD46     		mov	sp, r7
 1527              		.cfi_def_cfa_register 13
 1528              		@ sp needed
 1529 007c 80BD     		pop	{r7, pc}
 1530              		.cfi_endproc
 1531              	.LFE84:
 1532              		.size	oled_DrawArc, .-oled_DrawArc
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 36


 1533 007e 00BF     		.section	.text.oled_FillCircle,"ax",%progbits
 1534              		.align	2
 1535              		.global	oled_FillCircle
 1536              		.thumb
 1537              		.thumb_func
 1538              		.type	oled_FillCircle, %function
 1539              	oled_FillCircle:
 1540              	.LFB85:
 458:oled.c        **** 
 459:oled.c        **** //========================================
 460:oled.c        **** // oled_FillCircle()
 461:oled.c        **** // this function fills in a circle with radius r 
 462:oled.c        **** // centered at (xc, yc)
 463:oled.c        **** //
 464:oled.c        **** // Parameters:
 465:oled.c        **** //     oled - pointer to a oled_t structure
 466:oled.c        **** //     xc - x-coordinate of the center of the circle
 467:oled.c        **** //     yc - y-coordinate of the center of the circle
 468:oled.c        **** //     r - radius of circle
 469:oled.c        **** //========================================
 470:oled.c        **** void oled_FillCircle(oled_t * oled, int xc, int yc, int r)
 471:oled.c        **** {
 1541              		.loc 1 471 0
 1542              		.cfi_startproc
 1543              		@ args = 0, pretend = 0, frame = 16
 1544              		@ frame_needed = 1, uses_anonymous_args = 0
 1545 0000 80B5     		push	{r7, lr}
 1546              		.cfi_def_cfa_offset 8
 1547              		.cfi_offset 7, -8
 1548              		.cfi_offset 14, -4
 1549 0002 86B0     		sub	sp, sp, #24
 1550              		.cfi_def_cfa_offset 32
 1551 0004 02AF     		add	r7, sp, #8
 1552              		.cfi_def_cfa 7, 24
 1553 0006 F860     		str	r0, [r7, #12]
 1554 0008 B960     		str	r1, [r7, #8]
 1555 000a 7A60     		str	r2, [r7, #4]
 1556 000c 3B60     		str	r3, [r7]
 472:oled.c        ****     BresenhamCircleAlgorithm(oled, xc, yc, 0, r, 0xFF);     // fill circle using Bresenham's Circle
 1557              		.loc 1 472 0
 1558 000e FF23     		movs	r3, #255
 1559 0010 0193     		str	r3, [sp, #4]
 1560 0012 3B68     		ldr	r3, [r7]
 1561 0014 0093     		str	r3, [sp]
 1562 0016 0023     		movs	r3, #0
 1563 0018 7A68     		ldr	r2, [r7, #4]
 1564 001a B968     		ldr	r1, [r7, #8]
 1565 001c F868     		ldr	r0, [r7, #12]
 1566 001e FFF7FEFF 		bl	BresenhamCircleAlgorithm
 473:oled.c        **** }
 1567              		.loc 1 473 0
 1568 0022 00BF     		nop
 1569 0024 1037     		adds	r7, r7, #16
 1570              		.cfi_def_cfa_offset 8
 1571 0026 BD46     		mov	sp, r7
 1572              		.cfi_def_cfa_register 13
 1573              		@ sp needed
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 37


 1574 0028 80BD     		pop	{r7, pc}
 1575              		.cfi_endproc
 1576              	.LFE85:
 1577              		.size	oled_FillCircle, .-oled_FillCircle
 1578 002a 00BF     		.section	.text.oled_DrawPoint,"ax",%progbits
 1579              		.align	2
 1580              		.global	oled_DrawPoint
 1581              		.thumb
 1582              		.thumb_func
 1583              		.type	oled_DrawPoint, %function
 1584              	oled_DrawPoint:
 1585              	.LFB86:
 474:oled.c        **** 
 475:oled.c        **** //========================================
 476:oled.c        **** // oled_DrawPoint()
 477:oled.c        **** // this function fills in a circle centered 
 478:oled.c        **** // at (xc, yc).  The radius of the circle
 479:oled.c        **** // is the current pen size
 480:oled.c        **** // 
 481:oled.c        **** //
 482:oled.c        **** // Parameters:
 483:oled.c        **** //     oled - pointer to a oled_t structure
 484:oled.c        **** //     xc - x-coordinate of point
 485:oled.c        **** //     yc - y-coordinate of point
 486:oled.c        **** //========================================
 487:oled.c        **** void oled_DrawPoint(oled_t * oled, int xc, int yc)
 488:oled.c        **** {
 1586              		.loc 1 488 0
 1587              		.cfi_startproc
 1588              		@ args = 0, pretend = 0, frame = 16
 1589              		@ frame_needed = 1, uses_anonymous_args = 0
 1590 0000 80B5     		push	{r7, lr}
 1591              		.cfi_def_cfa_offset 8
 1592              		.cfi_offset 7, -8
 1593              		.cfi_offset 14, -4
 1594 0002 86B0     		sub	sp, sp, #24
 1595              		.cfi_def_cfa_offset 32
 1596 0004 02AF     		add	r7, sp, #8
 1597              		.cfi_def_cfa 7, 24
 1598 0006 F860     		str	r0, [r7, #12]
 1599 0008 B960     		str	r1, [r7, #8]
 1600 000a 7A60     		str	r2, [r7, #4]
 489:oled.c        ****     BresenhamCircleAlgorithm(oled, xc, yc, 0, oled->penSize, 0xFF);     // draw point using Bresenh
 1601              		.loc 1 489 0
 1602 000c FB68     		ldr	r3, [r7, #12]
 1603 000e 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 1604 0010 1A46     		mov	r2, r3
 1605 0012 FF23     		movs	r3, #255
 1606 0014 0193     		str	r3, [sp, #4]
 1607 0016 0092     		str	r2, [sp]
 1608 0018 0023     		movs	r3, #0
 1609 001a 7A68     		ldr	r2, [r7, #4]
 1610 001c B968     		ldr	r1, [r7, #8]
 1611 001e F868     		ldr	r0, [r7, #12]
 1612 0020 FFF7FEFF 		bl	BresenhamCircleAlgorithm
 490:oled.c        **** }
 1613              		.loc 1 490 0
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 38


 1614 0024 00BF     		nop
 1615 0026 1037     		adds	r7, r7, #16
 1616              		.cfi_def_cfa_offset 8
 1617 0028 BD46     		mov	sp, r7
 1618              		.cfi_def_cfa_register 13
 1619              		@ sp needed
 1620 002a 80BD     		pop	{r7, pc}
 1621              		.cfi_endproc
 1622              	.LFE86:
 1623              		.size	oled_DrawPoint, .-oled_DrawPoint
 1624              		.section	.text.oled_DrawPie,"ax",%progbits
 1625              		.align	2
 1626              		.global	oled_DrawPie
 1627              		.thumb
 1628              		.thumb_func
 1629              		.type	oled_DrawPie, %function
 1630              	oled_DrawPie:
 1631              	.LFB87:
 491:oled.c        **** 
 492:oled.c        **** //========================================
 493:oled.c        **** // oled_DrawPie()
 494:oled.c        **** // this function draws an circular sector 
 495:oled.c        **** // of radius r  centered at (xc, yc). a0 and a1
 496:oled.c        **** // specify the start and end angles for the sector
 497:oled.c        **** // 
 498:oled.c        **** // Parameters:
 499:oled.c        **** //     oled - pointer to a oled_t structure
 500:oled.c        **** //     xc - x-coordinate of the center of the arc (center of circle)
 501:oled.c        **** //     yc - y-coordinate of the center of the arc (center of circle)
 502:oled.c        **** //     r - radius of circular sector
 503:oled.c        **** //     a0 - start angle (angle = a0*pi/4)
 504:oled.c        **** //     a1 - end angle (angle = a1*pi/4)
 505:oled.c        **** //========================================
 506:oled.c        **** void oled_DrawPie(oled_t * oled, int xc, int yc, int r, int a0, int a1)
 507:oled.c        **** {
 1632              		.loc 1 507 0
 1633              		.cfi_startproc
 1634              		@ args = 8, pretend = 0, frame = 24
 1635              		@ frame_needed = 1, uses_anonymous_args = 0
 1636 0000 80B5     		push	{r7, lr}
 1637              		.cfi_def_cfa_offset 8
 1638              		.cfi_offset 7, -8
 1639              		.cfi_offset 14, -4
 1640 0002 88B0     		sub	sp, sp, #32
 1641              		.cfi_def_cfa_offset 40
 1642 0004 02AF     		add	r7, sp, #8
 1643              		.cfi_def_cfa 7, 32
 1644 0006 F860     		str	r0, [r7, #12]
 1645 0008 B960     		str	r1, [r7, #8]
 1646 000a 7A60     		str	r2, [r7, #4]
 1647 000c 3B60     		str	r3, [r7]
 508:oled.c        ****     if (a1 < a0) Swap(&a0, &a1);                            // make sure a0 is less than a1
 1648              		.loc 1 508 0
 1649 000e 7A6A     		ldr	r2, [r7, #36]
 1650 0010 3B6A     		ldr	r3, [r7, #32]
 1651 0012 9A42     		cmp	r2, r3
 1652 0014 06DA     		bge	.L71
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 39


 1653              		.loc 1 508 0 is_stmt 0 discriminator 1
 1654 0016 07F12403 		add	r3, r7, #36
 1655 001a 1946     		mov	r1, r3
 1656 001c 07F12000 		add	r0, r7, #32
 1657 0020 FFF7FEFF 		bl	Swap
 1658              	.L71:
 509:oled.c        ****     if ((a0 < 0) || (a1 > 8)) return;                       // make sure a0 and a1 are between 0 an
 1659              		.loc 1 509 0 is_stmt 1
 1660 0024 3B6A     		ldr	r3, [r7, #32]
 1661 0026 002B     		cmp	r3, #0
 1662 0028 1CDB     		blt	.L75
 1663              		.loc 1 509 0 is_stmt 0 discriminator 1
 1664 002a 7B6A     		ldr	r3, [r7, #36]
 1665 002c 082B     		cmp	r3, #8
 1666 002e 19DC     		bgt	.L75
 510:oled.c        **** 
 511:oled.c        ****     uint8 octants = (0xFF >> (8-a1)) & (0xFF << a0);    
 1667              		.loc 1 511 0 is_stmt 1
 1668 0030 7B6A     		ldr	r3, [r7, #36]
 1669 0032 C3F10803 		rsb	r3, r3, #8
 1670 0036 FF22     		movs	r2, #255
 1671 0038 42FA03F3 		asr	r3, r2, r3
 1672 003c 5AB2     		sxtb	r2, r3
 1673 003e 3B6A     		ldr	r3, [r7, #32]
 1674 0040 FF21     		movs	r1, #255
 1675 0042 01FA03F3 		lsl	r3, r1, r3
 1676 0046 5BB2     		sxtb	r3, r3
 1677 0048 1340     		ands	r3, r3, r2
 1678 004a 5BB2     		sxtb	r3, r3
 1679 004c FB75     		strb	r3, [r7, #23]
 512:oled.c        ****     BresenhamCircleAlgorithm(oled, xc, yc, 0, r, octants);  // draw circular sector ("pie") using B
 1680              		.loc 1 512 0
 1681 004e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1682 0050 0193     		str	r3, [sp, #4]
 1683 0052 3B68     		ldr	r3, [r7]
 1684 0054 0093     		str	r3, [sp]
 1685 0056 0023     		movs	r3, #0
 1686 0058 7A68     		ldr	r2, [r7, #4]
 1687 005a B968     		ldr	r1, [r7, #8]
 1688 005c F868     		ldr	r0, [r7, #12]
 1689 005e FFF7FEFF 		bl	BresenhamCircleAlgorithm
 1690 0062 00E0     		b	.L70
 1691              	.L75:
 509:oled.c        ****     if ((a0 < 0) || (a1 > 8)) return;                       // make sure a0 and a1 are between 0 an
 1692              		.loc 1 509 0
 1693 0064 00BF     		nop
 1694              	.L70:
 513:oled.c        **** }
 1695              		.loc 1 513 0
 1696 0066 1837     		adds	r7, r7, #24
 1697              		.cfi_def_cfa_offset 8
 1698 0068 BD46     		mov	sp, r7
 1699              		.cfi_def_cfa_register 13
 1700              		@ sp needed
 1701 006a 80BD     		pop	{r7, pc}
 1702              		.cfi_endproc
 1703              	.LFE87:
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 40


 1704              		.size	oled_DrawPie, .-oled_DrawPie
 1705              		.section	.text.oled_DispBitmap,"ax",%progbits
 1706              		.align	2
 1707              		.global	oled_DispBitmap
 1708              		.thumb
 1709              		.thumb_func
 1710              		.type	oled_DispBitmap, %function
 1711              	oled_DispBitmap:
 1712              	.LFB88:
 514:oled.c        **** 
 515:oled.c        **** //======================================
 516:oled.c        **** // oled_DispBitmap()
 517:oled.c        **** // this function displays the given bitmap
 518:oled.c        **** // with its top left corner at (x0, y0). 
 519:oled.c        **** // Option for how the bitmap is displayed 
 520:oled.c        **** // can be found in the user manual and can
 521:oled.c        **** // be set using oled_SetBmMode() 
 522:oled.c        **** //
 523:oled.c        **** // Parameters:
 524:oled.c        **** //     oled - pointer to a oled_t structure
 525:oled.c        **** //     x0 - x-coordinate for upper left corner of bitmap
 526:oled.c        **** //     y0 - y-coordinate for upper left corner of bitmap
 527:oled.c        **** //     bitmap - pointer to an array containing pixel values 
 528:oled.c        **** //              (.xbm format)
 529:oled.c        **** //     width - width of the bitmap (in pixels)
 530:oled.c        **** //     height - height of the bitmap (in pixels)
 531:oled.c        **** //======================================
 532:oled.c        **** void oled_DispBitmap(oled_t * oled, int x0, int y0, const uint8 * bitmap, uint16 width, uint16 heig
 1713              		.loc 1 532 0
 1714              		.cfi_startproc
 1715              		@ args = 8, pretend = 0, frame = 32
 1716              		@ frame_needed = 1, uses_anonymous_args = 0
 1717 0000 90B5     		push	{r4, r7, lr}
 1718              		.cfi_def_cfa_offset 12
 1719              		.cfi_offset 4, -12
 1720              		.cfi_offset 7, -8
 1721              		.cfi_offset 14, -4
 1722 0002 8BB0     		sub	sp, sp, #44
 1723              		.cfi_def_cfa_offset 56
 1724 0004 02AF     		add	r7, sp, #8
 1725              		.cfi_def_cfa 7, 48
 1726 0006 F860     		str	r0, [r7, #12]
 1727 0008 B960     		str	r1, [r7, #8]
 1728 000a 7A60     		str	r2, [r7, #4]
 1729 000c 3B60     		str	r3, [r7]
 1730              	.LBB3:
 533:oled.c        ****     uint8 color;
 534:oled.c        ****     for (int i=0; i<height; i++){
 1731              		.loc 1 534 0
 1732 000e 0023     		movs	r3, #0
 1733 0010 FB61     		str	r3, [r7, #28]
 1734 0012 07E1     		b	.L77
 1735              	.L94:
 1736              	.LBB4:
 535:oled.c        ****         for (int j=0; j<width; j++){
 1737              		.loc 1 535 0
 1738 0014 0023     		movs	r3, #0
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 41


 1739 0016 BB61     		str	r3, [r7, #24]
 1740 0018 FCE0     		b	.L78
 1741              	.L93:
 536:oled.c        ****             color = (bitmap[i*((width-1)/8 + 1) + j/8] >> (j%8)) & 0x01;                // get colo
 1742              		.loc 1 536 0
 1743 001a 3B8E     		ldrh	r3, [r7, #48]
 1744 001c 013B     		subs	r3, r3, #1
 1745 001e 002B     		cmp	r3, #0
 1746 0020 00DA     		bge	.L79
 1747 0022 0733     		adds	r3, r3, #7
 1748              	.L79:
 1749 0024 DB10     		asrs	r3, r3, #3
 1750 0026 0133     		adds	r3, r3, #1
 1751 0028 FA69     		ldr	r2, [r7, #28]
 1752 002a 02FB03F2 		mul	r2, r2, r3
 1753 002e BB69     		ldr	r3, [r7, #24]
 1754 0030 002B     		cmp	r3, #0
 1755 0032 00DA     		bge	.L80
 1756 0034 0733     		adds	r3, r3, #7
 1757              	.L80:
 1758 0036 DB10     		asrs	r3, r3, #3
 1759 0038 1344     		add	r3, r3, r2
 1760 003a 1A46     		mov	r2, r3
 1761 003c 3B68     		ldr	r3, [r7]
 1762 003e 1344     		add	r3, r3, r2
 1763 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1764 0042 1946     		mov	r1, r3
 1765 0044 BA69     		ldr	r2, [r7, #24]
 1766 0046 7C4B     		ldr	r3, .L95
 1767 0048 1340     		ands	r3, r3, r2
 1768 004a 002B     		cmp	r3, #0
 1769 004c 03DA     		bge	.L81
 1770 004e 013B     		subs	r3, r3, #1
 1771 0050 63F00703 		orn	r3, r3, #7
 1772 0054 0133     		adds	r3, r3, #1
 1773              	.L81:
 1774 0056 41FA03F3 		asr	r3, r1, r3
 1775 005a DBB2     		uxtb	r3, r3
 1776 005c 03F00103 		and	r3, r3, #1
 1777 0060 FB75     		strb	r3, [r7, #23]
 537:oled.c        ****             
 538:oled.c        ****             if (oled->bmMode == OLED_BM_NORMAL){                                        // OLED_BM_
 1778              		.loc 1 538 0
 1779 0062 FB68     		ldr	r3, [r7, #12]
 1780 0064 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 1781 0066 002B     		cmp	r3, #0
 1782 0068 14D1     		bne	.L82
 539:oled.c        ****                 WriteGRAM(oled, x0+j, y0+i, x0+j, y0+i, color);
 1783              		.loc 1 539 0
 1784 006a BA68     		ldr	r2, [r7, #8]
 1785 006c BB69     		ldr	r3, [r7, #24]
 1786 006e D118     		adds	r1, r2, r3
 1787 0070 7A68     		ldr	r2, [r7, #4]
 1788 0072 FB69     		ldr	r3, [r7, #28]
 1789 0074 D018     		adds	r0, r2, r3
 1790 0076 BA68     		ldr	r2, [r7, #8]
 1791 0078 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 42


 1792 007a D418     		adds	r4, r2, r3
 1793 007c 7A68     		ldr	r2, [r7, #4]
 1794 007e FB69     		ldr	r3, [r7, #28]
 1795 0080 1344     		add	r3, r3, r2
 1796 0082 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1797 0084 0192     		str	r2, [sp, #4]
 1798 0086 0093     		str	r3, [sp]
 1799 0088 2346     		mov	r3, r4
 1800 008a 0246     		mov	r2, r0
 1801 008c F868     		ldr	r0, [r7, #12]
 1802 008e FFF7FEFF 		bl	WriteGRAM
 1803 0092 1CE0     		b	.L83
 1804              	.L82:
 540:oled.c        ****             }
 541:oled.c        ****             else if (oled->bmMode == OLED_BM_INV){                                      // OLED_BM_
 1805              		.loc 1 541 0
 1806 0094 FB68     		ldr	r3, [r7, #12]
 1807 0096 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 1808 0098 012B     		cmp	r3, #1
 1809 009a 18D1     		bne	.L83
 542:oled.c        ****                 WriteGRAM(oled, x0+j, y0+i, x0+j, y0+i, ~(color | 0xfe));
 1810              		.loc 1 542 0
 1811 009c BA68     		ldr	r2, [r7, #8]
 1812 009e BB69     		ldr	r3, [r7, #24]
 1813 00a0 D118     		adds	r1, r2, r3
 1814 00a2 7A68     		ldr	r2, [r7, #4]
 1815 00a4 FB69     		ldr	r3, [r7, #28]
 1816 00a6 D018     		adds	r0, r2, r3
 1817 00a8 BA68     		ldr	r2, [r7, #8]
 1818 00aa BB69     		ldr	r3, [r7, #24]
 1819 00ac D418     		adds	r4, r2, r3
 1820 00ae 7A68     		ldr	r2, [r7, #4]
 1821 00b0 FB69     		ldr	r3, [r7, #28]
 1822 00b2 1344     		add	r3, r3, r2
 1823 00b4 FA7D     		ldrb	r2, [r7, #23]
 1824 00b6 62F00102 		orn	r2, r2, #1
 1825 00ba D2B2     		uxtb	r2, r2
 1826 00bc D243     		mvns	r2, r2
 1827 00be D2B2     		uxtb	r2, r2
 1828 00c0 0192     		str	r2, [sp, #4]
 1829 00c2 0093     		str	r3, [sp]
 1830 00c4 2346     		mov	r3, r4
 1831 00c6 0246     		mov	r2, r0
 1832 00c8 F868     		ldr	r0, [r7, #12]
 1833 00ca FFF7FEFF 		bl	WriteGRAM
 1834              	.L83:
 543:oled.c        ****             }
 544:oled.c        ****             if (oled->bmMode == OLED_BM_WHITE_TRAN){                                    // OLED_BM_
 1835              		.loc 1 544 0
 1836 00ce FB68     		ldr	r3, [r7, #12]
 1837 00d0 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 1838 00d2 022B     		cmp	r3, #2
 1839 00d4 19D1     		bne	.L84
 545:oled.c        ****                 if (color == 1) WriteGRAM(oled, x0+j, y0+i, x0+j, y0+i, oled->color);   
 1840              		.loc 1 545 0
 1841 00d6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1842 00d8 012B     		cmp	r3, #1
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 43


 1843 00da 40F09880 		bne	.L86
 1844              		.loc 1 545 0 is_stmt 0 discriminator 1
 1845 00de BA68     		ldr	r2, [r7, #8]
 1846 00e0 BB69     		ldr	r3, [r7, #24]
 1847 00e2 D118     		adds	r1, r2, r3
 1848 00e4 7A68     		ldr	r2, [r7, #4]
 1849 00e6 FB69     		ldr	r3, [r7, #28]
 1850 00e8 D018     		adds	r0, r2, r3
 1851 00ea BA68     		ldr	r2, [r7, #8]
 1852 00ec BB69     		ldr	r3, [r7, #24]
 1853 00ee D418     		adds	r4, r2, r3
 1854 00f0 7A68     		ldr	r2, [r7, #4]
 1855 00f2 FB69     		ldr	r3, [r7, #28]
 1856 00f4 1344     		add	r3, r3, r2
 1857 00f6 FA68     		ldr	r2, [r7, #12]
 1858 00f8 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 1859 00fa 0192     		str	r2, [sp, #4]
 1860 00fc 0093     		str	r3, [sp]
 1861 00fe 2346     		mov	r3, r4
 1862 0100 0246     		mov	r2, r0
 1863 0102 F868     		ldr	r0, [r7, #12]
 1864 0104 FFF7FEFF 		bl	WriteGRAM
 1865 0108 81E0     		b	.L86
 1866              	.L84:
 546:oled.c        ****             }
 547:oled.c        ****             else if (oled->bmMode == OLED_BM_BLACK_TRAN){                               // OLED_BM_
 1867              		.loc 1 547 0 is_stmt 1
 1868 010a FB68     		ldr	r3, [r7, #12]
 1869 010c 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 1870 010e 032B     		cmp	r3, #3
 1871 0110 18D1     		bne	.L87
 548:oled.c        ****                 if (color == 0) WriteGRAM(oled, x0+j, y0+i, x0+j, y0+i, oled->color);   
 1872              		.loc 1 548 0
 1873 0112 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1874 0114 002B     		cmp	r3, #0
 1875 0116 7AD1     		bne	.L86
 1876              		.loc 1 548 0 is_stmt 0 discriminator 1
 1877 0118 BA68     		ldr	r2, [r7, #8]
 1878 011a BB69     		ldr	r3, [r7, #24]
 1879 011c D118     		adds	r1, r2, r3
 1880 011e 7A68     		ldr	r2, [r7, #4]
 1881 0120 FB69     		ldr	r3, [r7, #28]
 1882 0122 D018     		adds	r0, r2, r3
 1883 0124 BA68     		ldr	r2, [r7, #8]
 1884 0126 BB69     		ldr	r3, [r7, #24]
 1885 0128 D418     		adds	r4, r2, r3
 1886 012a 7A68     		ldr	r2, [r7, #4]
 1887 012c FB69     		ldr	r3, [r7, #28]
 1888 012e 1344     		add	r3, r3, r2
 1889 0130 FA68     		ldr	r2, [r7, #12]
 1890 0132 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 1891 0134 0192     		str	r2, [sp, #4]
 1892 0136 0093     		str	r3, [sp]
 1893 0138 2346     		mov	r3, r4
 1894 013a 0246     		mov	r2, r0
 1895 013c F868     		ldr	r0, [r7, #12]
 1896 013e FFF7FEFF 		bl	WriteGRAM
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 44


 1897 0142 64E0     		b	.L86
 1898              	.L87:
 549:oled.c        ****             }
 550:oled.c        ****             else if (oled->bmMode == OLED_BM_WHITE_FILL){                               // OLED_BM_
 1899              		.loc 1 550 0 is_stmt 1
 1900 0144 FB68     		ldr	r3, [r7, #12]
 1901 0146 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 1902 0148 042B     		cmp	r3, #4
 1903 014a 2ED1     		bne	.L89
 551:oled.c        ****                 if (color == 1) WriteGRAM(oled, x0+j, y0+i, x0+j, y0+i, oled->color);
 1904              		.loc 1 551 0
 1905 014c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1906 014e 012B     		cmp	r3, #1
 1907 0150 15D1     		bne	.L90
 1908              		.loc 1 551 0 is_stmt 0 discriminator 1
 1909 0152 BA68     		ldr	r2, [r7, #8]
 1910 0154 BB69     		ldr	r3, [r7, #24]
 1911 0156 D118     		adds	r1, r2, r3
 1912 0158 7A68     		ldr	r2, [r7, #4]
 1913 015a FB69     		ldr	r3, [r7, #28]
 1914 015c D018     		adds	r0, r2, r3
 1915 015e BA68     		ldr	r2, [r7, #8]
 1916 0160 BB69     		ldr	r3, [r7, #24]
 1917 0162 D418     		adds	r4, r2, r3
 1918 0164 7A68     		ldr	r2, [r7, #4]
 1919 0166 FB69     		ldr	r3, [r7, #28]
 1920 0168 1344     		add	r3, r3, r2
 1921 016a FA68     		ldr	r2, [r7, #12]
 1922 016c 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 1923 016e 0192     		str	r2, [sp, #4]
 1924 0170 0093     		str	r3, [sp]
 1925 0172 2346     		mov	r3, r4
 1926 0174 0246     		mov	r2, r0
 1927 0176 F868     		ldr	r0, [r7, #12]
 1928 0178 FFF7FEFF 		bl	WriteGRAM
 1929 017c 47E0     		b	.L86
 1930              	.L90:
 552:oled.c        ****                 else WriteGRAM(oled, x0+j, y0+i, x0+j, y0+i, oled->bkColor);
 1931              		.loc 1 552 0 is_stmt 1
 1932 017e BA68     		ldr	r2, [r7, #8]
 1933 0180 BB69     		ldr	r3, [r7, #24]
 1934 0182 D118     		adds	r1, r2, r3
 1935 0184 7A68     		ldr	r2, [r7, #4]
 1936 0186 FB69     		ldr	r3, [r7, #28]
 1937 0188 D018     		adds	r0, r2, r3
 1938 018a BA68     		ldr	r2, [r7, #8]
 1939 018c BB69     		ldr	r3, [r7, #24]
 1940 018e D418     		adds	r4, r2, r3
 1941 0190 7A68     		ldr	r2, [r7, #4]
 1942 0192 FB69     		ldr	r3, [r7, #28]
 1943 0194 1344     		add	r3, r3, r2
 1944 0196 FA68     		ldr	r2, [r7, #12]
 1945 0198 127C     		ldrb	r2, [r2, #16]	@ zero_extendqisi2
 1946 019a 0192     		str	r2, [sp, #4]
 1947 019c 0093     		str	r3, [sp]
 1948 019e 2346     		mov	r3, r4
 1949 01a0 0246     		mov	r2, r0
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 45


 1950 01a2 F868     		ldr	r0, [r7, #12]
 1951 01a4 FFF7FEFF 		bl	WriteGRAM
 1952 01a8 31E0     		b	.L86
 1953              	.L89:
 553:oled.c        ****             }
 554:oled.c        ****             else if (oled->bmMode ==  OLED_BM_BLACK_FILL){                              // OLED_BM_
 1954              		.loc 1 554 0
 1955 01aa FB68     		ldr	r3, [r7, #12]
 1956 01ac 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 1957 01ae 052B     		cmp	r3, #5
 1958 01b0 2DD1     		bne	.L86
 555:oled.c        ****                 if (color == 0) WriteGRAM(oled, x0+j, y0+i, x0+j, y0+i, oled->color); 
 1959              		.loc 1 555 0
 1960 01b2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1961 01b4 002B     		cmp	r3, #0
 1962 01b6 15D1     		bne	.L92
 1963              		.loc 1 555 0 is_stmt 0 discriminator 1
 1964 01b8 BA68     		ldr	r2, [r7, #8]
 1965 01ba BB69     		ldr	r3, [r7, #24]
 1966 01bc D118     		adds	r1, r2, r3
 1967 01be 7A68     		ldr	r2, [r7, #4]
 1968 01c0 FB69     		ldr	r3, [r7, #28]
 1969 01c2 D018     		adds	r0, r2, r3
 1970 01c4 BA68     		ldr	r2, [r7, #8]
 1971 01c6 BB69     		ldr	r3, [r7, #24]
 1972 01c8 D418     		adds	r4, r2, r3
 1973 01ca 7A68     		ldr	r2, [r7, #4]
 1974 01cc FB69     		ldr	r3, [r7, #28]
 1975 01ce 1344     		add	r3, r3, r2
 1976 01d0 FA68     		ldr	r2, [r7, #12]
 1977 01d2 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 1978 01d4 0192     		str	r2, [sp, #4]
 1979 01d6 0093     		str	r3, [sp]
 1980 01d8 2346     		mov	r3, r4
 1981 01da 0246     		mov	r2, r0
 1982 01dc F868     		ldr	r0, [r7, #12]
 1983 01de FFF7FEFF 		bl	WriteGRAM
 1984 01e2 14E0     		b	.L86
 1985              	.L92:
 556:oled.c        ****                 else WriteGRAM(oled, x0+j, y0+i, x0+j, y0+i, oled->bkColor);
 1986              		.loc 1 556 0 is_stmt 1
 1987 01e4 BA68     		ldr	r2, [r7, #8]
 1988 01e6 BB69     		ldr	r3, [r7, #24]
 1989 01e8 D118     		adds	r1, r2, r3
 1990 01ea 7A68     		ldr	r2, [r7, #4]
 1991 01ec FB69     		ldr	r3, [r7, #28]
 1992 01ee D018     		adds	r0, r2, r3
 1993 01f0 BA68     		ldr	r2, [r7, #8]
 1994 01f2 BB69     		ldr	r3, [r7, #24]
 1995 01f4 D418     		adds	r4, r2, r3
 1996 01f6 7A68     		ldr	r2, [r7, #4]
 1997 01f8 FB69     		ldr	r3, [r7, #28]
 1998 01fa 1344     		add	r3, r3, r2
 1999 01fc FA68     		ldr	r2, [r7, #12]
 2000 01fe 127C     		ldrb	r2, [r2, #16]	@ zero_extendqisi2
 2001 0200 0192     		str	r2, [sp, #4]
 2002 0202 0093     		str	r3, [sp]
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 46


 2003 0204 2346     		mov	r3, r4
 2004 0206 0246     		mov	r2, r0
 2005 0208 F868     		ldr	r0, [r7, #12]
 2006 020a FFF7FEFF 		bl	WriteGRAM
 2007              	.L86:
 535:oled.c        ****             color = (bitmap[i*((width-1)/8 + 1) + j/8] >> (j%8)) & 0x01;                // get colo
 2008              		.loc 1 535 0 discriminator 2
 2009 020e BB69     		ldr	r3, [r7, #24]
 2010 0210 0133     		adds	r3, r3, #1
 2011 0212 BB61     		str	r3, [r7, #24]
 2012              	.L78:
 535:oled.c        ****             color = (bitmap[i*((width-1)/8 + 1) + j/8] >> (j%8)) & 0x01;                // get colo
 2013              		.loc 1 535 0 is_stmt 0 discriminator 1
 2014 0214 3A8E     		ldrh	r2, [r7, #48]
 2015 0216 BB69     		ldr	r3, [r7, #24]
 2016 0218 9A42     		cmp	r2, r3
 2017 021a 3FF7FEAE 		bgt	.L93
 2018              	.LBE4:
 534:oled.c        ****         for (int j=0; j<width; j++){
 2019              		.loc 1 534 0 is_stmt 1 discriminator 2
 2020 021e FB69     		ldr	r3, [r7, #28]
 2021 0220 0133     		adds	r3, r3, #1
 2022 0222 FB61     		str	r3, [r7, #28]
 2023              	.L77:
 534:oled.c        ****         for (int j=0; j<width; j++){
 2024              		.loc 1 534 0 is_stmt 0 discriminator 1
 2025 0224 BA8E     		ldrh	r2, [r7, #52]
 2026 0226 FB69     		ldr	r3, [r7, #28]
 2027 0228 9A42     		cmp	r2, r3
 2028 022a 3FF7F3AE 		bgt	.L94
 2029              	.LBE3:
 557:oled.c        ****             }
 558:oled.c        ****         }
 559:oled.c        ****     }
 560:oled.c        **** }
 2030              		.loc 1 560 0 is_stmt 1
 2031 022e 00BF     		nop
 2032 0230 2437     		adds	r7, r7, #36
 2033              		.cfi_def_cfa_offset 12
 2034 0232 BD46     		mov	sp, r7
 2035              		.cfi_def_cfa_register 13
 2036              		@ sp needed
 2037 0234 90BD     		pop	{r4, r7, pc}
 2038              	.L96:
 2039 0236 00BF     		.align	2
 2040              	.L95:
 2041 0238 07000080 		.word	-2147483641
 2042              		.cfi_endproc
 2043              	.LFE88:
 2044              		.size	oled_DispBitmap, .-oled_DispBitmap
 2045              		.section	.text.oled_DispChar,"ax",%progbits
 2046              		.align	2
 2047              		.global	oled_DispChar
 2048              		.thumb
 2049              		.thumb_func
 2050              		.type	oled_DispChar, %function
 2051              	oled_DispChar:
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 47


 2052              	.LFB89:
 561:oled.c        **** 
 562:oled.c        **** //========================================
 563:oled.c        **** // oled_DispChar()
 564:oled.c        **** // this function displays the character c
 565:oled.c        **** // with its top left corner at (x0, y0). The
 566:oled.c        **** // character is displayed in the font specified
 567:oled.c        **** // by oled.font. Option for how the character is 
 568:oled.c        **** // displayed can be found in the user manual 
 569:oled.c        **** // and can be set using oled_SetTextMode()
 570:oled.c        **** //
 571:oled.c        **** // Parameters:
 572:oled.c        **** //     oled - pointer to a oled_t structure
 573:oled.c        **** //     x0 - x-coordinate for upper left corner of 
 574:oled.c        **** //          the character
 575:oled.c        **** //     y0 - y-coordinate for upper left corner of 
 576:oled.c        **** //          the character
 577:oled.c        **** //     c - character to be displayed
 578:oled.c        **** //========================================
 579:oled.c        **** void oled_DispChar(oled_t * oled, int x0, int y0, const char c){
 2053              		.loc 1 579 0
 2054              		.cfi_startproc
 2055              		@ args = 0, pretend = 0, frame = 24
 2056              		@ frame_needed = 1, uses_anonymous_args = 0
 2057 0000 80B5     		push	{r7, lr}
 2058              		.cfi_def_cfa_offset 8
 2059              		.cfi_offset 7, -8
 2060              		.cfi_offset 14, -4
 2061 0002 88B0     		sub	sp, sp, #32
 2062              		.cfi_def_cfa_offset 40
 2063 0004 02AF     		add	r7, sp, #8
 2064              		.cfi_def_cfa 7, 32
 2065 0006 F860     		str	r0, [r7, #12]
 2066 0008 B960     		str	r1, [r7, #8]
 2067 000a 7A60     		str	r2, [r7, #4]
 2068 000c FB70     		strb	r3, [r7, #3]
 580:oled.c        ****     uint8 bmMode = oled_GetBmMode(oled);        // store current bitmap mode
 2069              		.loc 1 580 0
 2070 000e F868     		ldr	r0, [r7, #12]
 2071 0010 FFF7FEFF 		bl	oled_GetBmMode
 2072 0014 0346     		mov	r3, r0
 2073 0016 FB75     		strb	r3, [r7, #23]
 581:oled.c        ****     oled_SetBmMode(oled, oled->textMode);       // set bmMode to text mode
 2074              		.loc 1 581 0
 2075 0018 FB68     		ldr	r3, [r7, #12]
 2076 001a 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 2077 001c 1946     		mov	r1, r3
 2078 001e F868     		ldr	r0, [r7, #12]
 2079 0020 FFF7FEFF 		bl	oled_SetBmMode
 582:oled.c        ****     int i = c - 32;
 2080              		.loc 1 582 0
 2081 0024 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2082 0026 203B     		subs	r3, r3, #32
 2083 0028 3B61     		str	r3, [r7, #16]
 583:oled.c        ****     if ((i < 0) || (i > 94)) return;            // character out of range
 2084              		.loc 1 583 0
 2085 002a 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 48


 2086 002c 002B     		cmp	r3, #0
 2087 002e 1EDB     		blt	.L101
 2088              		.loc 1 583 0 is_stmt 0 discriminator 1
 2089 0030 3B69     		ldr	r3, [r7, #16]
 2090 0032 5E2B     		cmp	r3, #94
 2091 0034 1BDC     		bgt	.L101
 584:oled.c        ****     oled_DispBitmap(oled, x0, y0, oled->font->characters[i], oled->font->width, oled->font->height)
 2092              		.loc 1 584 0 is_stmt 1
 2093 0036 FB68     		ldr	r3, [r7, #12]
 2094 0038 5A69     		ldr	r2, [r3, #20]
 2095 003a 3B69     		ldr	r3, [r7, #16]
 2096 003c 5B01     		lsls	r3, r3, #5
 2097 003e 1344     		add	r3, r3, r2
 2098 0040 991C     		adds	r1, r3, #2
 2099 0042 FB68     		ldr	r3, [r7, #12]
 2100 0044 5B69     		ldr	r3, [r3, #20]
 2101 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2102 0048 9BB2     		uxth	r3, r3
 2103 004a FA68     		ldr	r2, [r7, #12]
 2104 004c 5269     		ldr	r2, [r2, #20]
 2105 004e 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 2106 0050 92B2     		uxth	r2, r2
 2107 0052 0192     		str	r2, [sp, #4]
 2108 0054 0093     		str	r3, [sp]
 2109 0056 0B46     		mov	r3, r1
 2110 0058 7A68     		ldr	r2, [r7, #4]
 2111 005a B968     		ldr	r1, [r7, #8]
 2112 005c F868     		ldr	r0, [r7, #12]
 2113 005e FFF7FEFF 		bl	oled_DispBitmap
 585:oled.c        ****     oled_SetBmMode(oled, bmMode);               // restore bitmap mode
 2114              		.loc 1 585 0
 2115 0062 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2116 0064 1946     		mov	r1, r3
 2117 0066 F868     		ldr	r0, [r7, #12]
 2118 0068 FFF7FEFF 		bl	oled_SetBmMode
 2119 006c 00E0     		b	.L97
 2120              	.L101:
 583:oled.c        ****     if ((i < 0) || (i > 94)) return;            // character out of range
 2121              		.loc 1 583 0
 2122 006e 00BF     		nop
 2123              	.L97:
 586:oled.c        **** }
 2124              		.loc 1 586 0
 2125 0070 1837     		adds	r7, r7, #24
 2126              		.cfi_def_cfa_offset 8
 2127 0072 BD46     		mov	sp, r7
 2128              		.cfi_def_cfa_register 13
 2129              		@ sp needed
 2130 0074 80BD     		pop	{r7, pc}
 2131              		.cfi_endproc
 2132              	.LFE89:
 2133              		.size	oled_DispChar, .-oled_DispChar
 2134 0076 00BF     		.section	.text.oled_DispString,"ax",%progbits
 2135              		.align	2
 2136              		.global	oled_DispString
 2137              		.thumb
 2138              		.thumb_func
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 49


 2139              		.type	oled_DispString, %function
 2140              	oled_DispString:
 2141              	.LFB90:
 587:oled.c        **** 
 588:oled.c        **** //========================================
 589:oled.c        **** // oled_DispString
 590:oled.c        **** // this function displays the string s
 591:oled.c        **** // with the top left corner of the first character
 592:oled.c        **** // at (x0, y0). The characters are displayed in the 
 593:oled.c        **** // font specified by oled.font. Option for how the 
 594:oled.c        **** // characters are displayed can be found in the user
 595:oled.c        **** // manual and can be set using oled_SetTextMode()
 596:oled.c        **** //
 597:oled.c        **** // Parameters:
 598:oled.c        **** //     oled - pointer to a oled_t structure
 599:oled.c        **** //     x0 - x-coordinate for upper left corner of 
 600:oled.c        **** //          the first character in the string
 601:oled.c        **** //     y0 - y-coordinate for upper left corner of 
 602:oled.c        **** //          the first character in the string
 603:oled.c        **** //     s - pointer to the string
 604:oled.c        **** //========================================
 605:oled.c        **** void oled_DispString(oled_t * oled, int x0, int y0, const char * s){
 2142              		.loc 1 605 0
 2143              		.cfi_startproc
 2144              		@ args = 0, pretend = 0, frame = 24
 2145              		@ frame_needed = 1, uses_anonymous_args = 0
 2146 0000 80B5     		push	{r7, lr}
 2147              		.cfi_def_cfa_offset 8
 2148              		.cfi_offset 7, -8
 2149              		.cfi_offset 14, -4
 2150 0002 86B0     		sub	sp, sp, #24
 2151              		.cfi_def_cfa_offset 32
 2152 0004 00AF     		add	r7, sp, #0
 2153              		.cfi_def_cfa_register 7
 2154 0006 F860     		str	r0, [r7, #12]
 2155 0008 B960     		str	r1, [r7, #8]
 2156 000a 7A60     		str	r2, [r7, #4]
 2157 000c 3B60     		str	r3, [r7]
 606:oled.c        ****     int i = 0, j = 0;
 2158              		.loc 1 606 0
 2159 000e 0023     		movs	r3, #0
 2160 0010 7B61     		str	r3, [r7, #20]
 2161 0012 0023     		movs	r3, #0
 2162 0014 3B61     		str	r3, [r7, #16]
 607:oled.c        ****     while(s[i] != '\0'){                                                // iterate through chars in
 2163              		.loc 1 607 0
 2164 0016 26E0     		b	.L103
 2165              	.L106:
 608:oled.c        ****         if (s[i] == '\n'){                                              // ENTER char, start new li
 2166              		.loc 1 608 0
 2167 0018 7B69     		ldr	r3, [r7, #20]
 2168 001a 3A68     		ldr	r2, [r7]
 2169 001c 1344     		add	r3, r3, r2
 2170 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2171 0020 0A2B     		cmp	r3, #10
 2172 0022 09D1     		bne	.L104
 609:oled.c        ****             y0 += oled->font->height;                                   
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 50


 2173              		.loc 1 609 0
 2174 0024 FB68     		ldr	r3, [r7, #12]
 2175 0026 5B69     		ldr	r3, [r3, #20]
 2176 0028 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2177 002a 1A46     		mov	r2, r3
 2178 002c 7B68     		ldr	r3, [r7, #4]
 2179 002e 1344     		add	r3, r3, r2
 2180 0030 7B60     		str	r3, [r7, #4]
 610:oled.c        ****             j = 0;
 2181              		.loc 1 610 0
 2182 0032 0023     		movs	r3, #0
 2183 0034 3B61     		str	r3, [r7, #16]
 2184 0036 13E0     		b	.L105
 2185              	.L104:
 611:oled.c        ****         }
 612:oled.c        ****         else {
 613:oled.c        ****             oled_DispChar(oled, x0 + j*oled->font->width, y0, s[i]);    // display char
 2186              		.loc 1 613 0
 2187 0038 FB68     		ldr	r3, [r7, #12]
 2188 003a 5B69     		ldr	r3, [r3, #20]
 2189 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2190 003e 1A46     		mov	r2, r3
 2191 0040 3B69     		ldr	r3, [r7, #16]
 2192 0042 03FB02F2 		mul	r2, r3, r2
 2193 0046 BB68     		ldr	r3, [r7, #8]
 2194 0048 D118     		adds	r1, r2, r3
 2195 004a 7B69     		ldr	r3, [r7, #20]
 2196 004c 3A68     		ldr	r2, [r7]
 2197 004e 1344     		add	r3, r3, r2
 2198 0050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2199 0052 7A68     		ldr	r2, [r7, #4]
 2200 0054 F868     		ldr	r0, [r7, #12]
 2201 0056 FFF7FEFF 		bl	oled_DispChar
 614:oled.c        ****             j++;
 2202              		.loc 1 614 0
 2203 005a 3B69     		ldr	r3, [r7, #16]
 2204 005c 0133     		adds	r3, r3, #1
 2205 005e 3B61     		str	r3, [r7, #16]
 2206              	.L105:
 615:oled.c        ****         }
 616:oled.c        ****         i++;
 2207              		.loc 1 616 0
 2208 0060 7B69     		ldr	r3, [r7, #20]
 2209 0062 0133     		adds	r3, r3, #1
 2210 0064 7B61     		str	r3, [r7, #20]
 2211              	.L103:
 607:oled.c        ****         if (s[i] == '\n'){                                              // ENTER char, start new li
 2212              		.loc 1 607 0
 2213 0066 7B69     		ldr	r3, [r7, #20]
 2214 0068 3A68     		ldr	r2, [r7]
 2215 006a 1344     		add	r3, r3, r2
 2216 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2217 006e 002B     		cmp	r3, #0
 2218 0070 D2D1     		bne	.L106
 617:oled.c        ****     }
 618:oled.c        **** }
 2219              		.loc 1 618 0
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 51


 2220 0072 00BF     		nop
 2221 0074 1837     		adds	r7, r7, #24
 2222              		.cfi_def_cfa_offset 8
 2223 0076 BD46     		mov	sp, r7
 2224              		.cfi_def_cfa_register 13
 2225              		@ sp needed
 2226 0078 80BD     		pop	{r7, pc}
 2227              		.cfi_endproc
 2228              	.LFE90:
 2229              		.size	oled_DispString, .-oled_DispString
 2230 007a 00BF     		.section	.text.SetPageAddress,"ax",%progbits
 2231              		.align	2
 2232              		.global	SetPageAddress
 2233              		.thumb
 2234              		.thumb_func
 2235              		.type	SetPageAddress, %function
 2236              	SetPageAddress:
 2237              	.LFB91:
 619:oled.c        **** 
 620:oled.c        **** //======================================
 621:oled.c        **** // SetPageAddress()
 622:oled.c        **** // this function sets the oled's page start 
 623:oled.c        **** // address and page stop address.
 624:oled.c        **** //
 625:oled.c        **** // Parameters:
 626:oled.c        **** //     oled - pointer to a oled_t structure
 627:oled.c        **** //     A - page start address (integer in range 0-7)
 628:oled.c        **** //     B - page end address (integer in range 0-7)
 629:oled.c        **** //======================================
 630:oled.c        **** void SetPageAddress(oled_t * oled, uint8 A, uint8 B)
 631:oled.c        **** {
 2238              		.loc 1 631 0
 2239              		.cfi_startproc
 2240              		@ args = 0, pretend = 0, frame = 8
 2241              		@ frame_needed = 1, uses_anonymous_args = 0
 2242 0000 80B5     		push	{r7, lr}
 2243              		.cfi_def_cfa_offset 8
 2244              		.cfi_offset 7, -8
 2245              		.cfi_offset 14, -4
 2246 0002 82B0     		sub	sp, sp, #8
 2247              		.cfi_def_cfa_offset 16
 2248 0004 00AF     		add	r7, sp, #0
 2249              		.cfi_def_cfa_register 7
 2250 0006 7860     		str	r0, [r7, #4]
 2251 0008 0B46     		mov	r3, r1
 2252 000a FB70     		strb	r3, [r7, #3]
 2253 000c 1346     		mov	r3, r2
 2254 000e BB70     		strb	r3, [r7, #2]
 632:oled.c        ****     if ((A > 7) || (B > 7)) return;                 // check for valid page addresses
 2255              		.loc 1 632 0
 2256 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2257 0012 072B     		cmp	r3, #7
 2258 0014 1FD8     		bhi	.L111
 2259              		.loc 1 632 0 is_stmt 0 discriminator 1
 2260 0016 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 2261 0018 072B     		cmp	r3, #7
 2262 001a 1CD8     		bhi	.L111
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 52


 633:oled.c        ****     oled->SendStart(oled->slaveAddr, 0x00);         // generate Start condition and send slave addr
 2263              		.loc 1 633 0 is_stmt 1
 2264 001c 7B68     		ldr	r3, [r7, #4]
 2265 001e 5B68     		ldr	r3, [r3, #4]
 2266 0020 7A68     		ldr	r2, [r7, #4]
 2267 0022 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2268 0024 0021     		movs	r1, #0
 2269 0026 1046     		mov	r0, r2
 2270 0028 9847     		blx	r3
 634:oled.c        ****     oled->WriteByte(0x00);                          // send control byte
 2271              		.loc 1 634 0
 2272 002a 7B68     		ldr	r3, [r7, #4]
 2273 002c DB68     		ldr	r3, [r3, #12]
 2274 002e 0020     		movs	r0, #0
 2275 0030 9847     		blx	r3
 635:oled.c        ****     oled->WriteByte(SSD1306_SETPAGEADDRESS);        // send Set Page Address command
 2276              		.loc 1 635 0
 2277 0032 7B68     		ldr	r3, [r7, #4]
 2278 0034 DB68     		ldr	r3, [r3, #12]
 2279 0036 2220     		movs	r0, #34
 2280 0038 9847     		blx	r3
 636:oled.c        ****     oled->WriteByte(A);                             // send page start address
 2281              		.loc 1 636 0
 2282 003a 7B68     		ldr	r3, [r7, #4]
 2283 003c DB68     		ldr	r3, [r3, #12]
 2284 003e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2285 0040 1046     		mov	r0, r2
 2286 0042 9847     		blx	r3
 637:oled.c        ****     oled->WriteByte(B);                             // send page stop address
 2287              		.loc 1 637 0
 2288 0044 7B68     		ldr	r3, [r7, #4]
 2289 0046 DB68     		ldr	r3, [r3, #12]
 2290 0048 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 2291 004a 1046     		mov	r0, r2
 2292 004c 9847     		blx	r3
 638:oled.c        ****     oled->SendStop();                               // generate Stop condition
 2293              		.loc 1 638 0
 2294 004e 7B68     		ldr	r3, [r7, #4]
 2295 0050 9B68     		ldr	r3, [r3, #8]
 2296 0052 9847     		blx	r3
 2297 0054 00E0     		b	.L107
 2298              	.L111:
 632:oled.c        ****     oled->SendStart(oled->slaveAddr, 0x00);         // generate Start condition and send slave addr
 2299              		.loc 1 632 0
 2300 0056 00BF     		nop
 2301              	.L107:
 639:oled.c        **** }
 2302              		.loc 1 639 0
 2303 0058 0837     		adds	r7, r7, #8
 2304              		.cfi_def_cfa_offset 8
 2305 005a BD46     		mov	sp, r7
 2306              		.cfi_def_cfa_register 13
 2307              		@ sp needed
 2308 005c 80BD     		pop	{r7, pc}
 2309              		.cfi_endproc
 2310              	.LFE91:
 2311              		.size	SetPageAddress, .-SetPageAddress
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 53


 2312 005e 00BF     		.section	.text.SetColumnAddress,"ax",%progbits
 2313              		.align	2
 2314              		.global	SetColumnAddress
 2315              		.thumb
 2316              		.thumb_func
 2317              		.type	SetColumnAddress, %function
 2318              	SetColumnAddress:
 2319              	.LFB92:
 640:oled.c        **** 
 641:oled.c        **** //======================================
 642:oled.c        **** // SetColumnAddress()
 643:oled.c        **** // this function sets the oled's column start 
 644:oled.c        **** // address and column stop address
 645:oled.c        **** //
 646:oled.c        **** // Parameters:
 647:oled.c        **** //     oled - pointer to a oled_t structure
 648:oled.c        **** //     A: column start address (integer in range 0-127)
 649:oled.c        **** //     B: column end address (integer in range 0-127)
 650:oled.c        **** //======================================
 651:oled.c        **** void SetColumnAddress(oled_t * oled, uint8 A, uint8 B)
 652:oled.c        **** {
 2320              		.loc 1 652 0
 2321              		.cfi_startproc
 2322              		@ args = 0, pretend = 0, frame = 8
 2323              		@ frame_needed = 1, uses_anonymous_args = 0
 2324 0000 80B5     		push	{r7, lr}
 2325              		.cfi_def_cfa_offset 8
 2326              		.cfi_offset 7, -8
 2327              		.cfi_offset 14, -4
 2328 0002 82B0     		sub	sp, sp, #8
 2329              		.cfi_def_cfa_offset 16
 2330 0004 00AF     		add	r7, sp, #0
 2331              		.cfi_def_cfa_register 7
 2332 0006 7860     		str	r0, [r7, #4]
 2333 0008 0B46     		mov	r3, r1
 2334 000a FB70     		strb	r3, [r7, #3]
 2335 000c 1346     		mov	r3, r2
 2336 000e BB70     		strb	r3, [r7, #2]
 653:oled.c        ****     if ((A > 127) || (B > 127)) return;             // check for valid column addresses
 2337              		.loc 1 653 0
 2338 0010 97F90330 		ldrsb	r3, [r7, #3]
 2339 0014 002B     		cmp	r3, #0
 2340 0016 20DB     		blt	.L116
 2341              		.loc 1 653 0 is_stmt 0 discriminator 1
 2342 0018 97F90230 		ldrsb	r3, [r7, #2]
 2343 001c 002B     		cmp	r3, #0
 2344 001e 1CDB     		blt	.L116
 654:oled.c        ****     oled->SendStart(oled->slaveAddr, 0x00);         // generate Start condition and send slave addr
 2345              		.loc 1 654 0 is_stmt 1
 2346 0020 7B68     		ldr	r3, [r7, #4]
 2347 0022 5B68     		ldr	r3, [r3, #4]
 2348 0024 7A68     		ldr	r2, [r7, #4]
 2349 0026 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2350 0028 0021     		movs	r1, #0
 2351 002a 1046     		mov	r0, r2
 2352 002c 9847     		blx	r3
 655:oled.c        ****     oled->WriteByte(0x00);                          // send control byte
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 54


 2353              		.loc 1 655 0
 2354 002e 7B68     		ldr	r3, [r7, #4]
 2355 0030 DB68     		ldr	r3, [r3, #12]
 2356 0032 0020     		movs	r0, #0
 2357 0034 9847     		blx	r3
 656:oled.c        ****     oled->WriteByte(SSD1306_SETCOLUMNADDRESS);      // send Set Column Address command
 2358              		.loc 1 656 0
 2359 0036 7B68     		ldr	r3, [r7, #4]
 2360 0038 DB68     		ldr	r3, [r3, #12]
 2361 003a 2120     		movs	r0, #33
 2362 003c 9847     		blx	r3
 657:oled.c        ****     oled->WriteByte(A);                             // send column start address
 2363              		.loc 1 657 0
 2364 003e 7B68     		ldr	r3, [r7, #4]
 2365 0040 DB68     		ldr	r3, [r3, #12]
 2366 0042 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2367 0044 1046     		mov	r0, r2
 2368 0046 9847     		blx	r3
 658:oled.c        ****     oled->WriteByte(B);                             // send column stop address
 2369              		.loc 1 658 0
 2370 0048 7B68     		ldr	r3, [r7, #4]
 2371 004a DB68     		ldr	r3, [r3, #12]
 2372 004c BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 2373 004e 1046     		mov	r0, r2
 2374 0050 9847     		blx	r3
 659:oled.c        ****     oled->SendStop();                               // generate Stop condition
 2375              		.loc 1 659 0
 2376 0052 7B68     		ldr	r3, [r7, #4]
 2377 0054 9B68     		ldr	r3, [r3, #8]
 2378 0056 9847     		blx	r3
 2379 0058 00E0     		b	.L112
 2380              	.L116:
 653:oled.c        ****     oled->SendStart(oled->slaveAddr, 0x00);         // generate Start condition and send slave addr
 2381              		.loc 1 653 0
 2382 005a 00BF     		nop
 2383              	.L112:
 660:oled.c        **** }
 2384              		.loc 1 660 0
 2385 005c 0837     		adds	r7, r7, #8
 2386              		.cfi_def_cfa_offset 8
 2387 005e BD46     		mov	sp, r7
 2388              		.cfi_def_cfa_register 13
 2389              		@ sp needed
 2390 0060 80BD     		pop	{r7, pc}
 2391              		.cfi_endproc
 2392              	.LFE92:
 2393              		.size	SetColumnAddress, .-SetColumnAddress
 2394 0062 00BF     		.section	.text.WriteGRAM,"ax",%progbits
 2395              		.align	2
 2396              		.global	WriteGRAM
 2397              		.thumb
 2398              		.thumb_func
 2399              		.type	WriteGRAM, %function
 2400              	WriteGRAM:
 2401              	.LFB93:
 661:oled.c        **** 
 662:oled.c        **** //======================================
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 55


 663:oled.c        **** // WriteGRAM()
 664:oled.c        **** // this functions writes the specified color to
 665:oled.c        **** // the rectangular block of GRAM defined by
 666:oled.c        **** // its upper left corner (x0, y0) and lower right
 667:oled.c        **** // corner (x1, y1)
 668:oled.c        **** //
 669:oled.c        **** // Parameters:
 670:oled.c        **** //     oled - pointer to a oled_t structure
 671:oled.c        **** //     x0 - upper left x-coordinate
 672:oled.c        **** //     y0 - upper left y-coordinate
 673:oled.c        **** //     x1 - lower right x-coordinate
 674:oled.c        **** //     y1 - lower right y-coordinate
 675:oled.c        **** //======================================
 676:oled.c        **** void WriteGRAM(oled_t * oled, int x0, int y0, int x1, int y1, uint8 color)
 677:oled.c        **** {
 2402              		.loc 1 677 0
 2403              		.cfi_startproc
 2404              		@ args = 8, pretend = 0, frame = 32
 2405              		@ frame_needed = 1, uses_anonymous_args = 0
 2406 0000 80B5     		push	{r7, lr}
 2407              		.cfi_def_cfa_offset 8
 2408              		.cfi_offset 7, -8
 2409              		.cfi_offset 14, -4
 2410 0002 88B0     		sub	sp, sp, #32
 2411              		.cfi_def_cfa_offset 40
 2412 0004 00AF     		add	r7, sp, #0
 2413              		.cfi_def_cfa_register 7
 2414 0006 F860     		str	r0, [r7, #12]
 2415 0008 B960     		str	r1, [r7, #8]
 2416 000a 7A60     		str	r2, [r7, #4]
 2417 000c 3B60     		str	r3, [r7]
 678:oled.c        ****     if (x0 < 0) x0 = 0;                                 // ensure x0, y0, x1, y1 are within display
 2418              		.loc 1 678 0
 2419 000e BB68     		ldr	r3, [r7, #8]
 2420 0010 002B     		cmp	r3, #0
 2421 0012 01DA     		bge	.L118
 2422              		.loc 1 678 0 is_stmt 0 discriminator 1
 2423 0014 0023     		movs	r3, #0
 2424 0016 BB60     		str	r3, [r7, #8]
 2425              	.L118:
 679:oled.c        ****     if (x1 > OLED_WIDTH - 1) x1 = OLED_WIDTH - 1;
 2426              		.loc 1 679 0 is_stmt 1
 2427 0018 3B68     		ldr	r3, [r7]
 2428 001a 7F2B     		cmp	r3, #127
 2429 001c 01DD     		ble	.L119
 2430              		.loc 1 679 0 is_stmt 0 discriminator 1
 2431 001e 7F23     		movs	r3, #127
 2432 0020 3B60     		str	r3, [r7]
 2433              	.L119:
 680:oled.c        ****     if (x1 < x0) return;                                                
 2434              		.loc 1 680 0 is_stmt 1
 2435 0022 3A68     		ldr	r2, [r7]
 2436 0024 BB68     		ldr	r3, [r7, #8]
 2437 0026 9A42     		cmp	r2, r3
 2438 0028 C0F2C680 		blt	.L141
 681:oled.c        ****     if (y0 < 0) y0 = 0;
 2439              		.loc 1 681 0
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 56


 2440 002c 7B68     		ldr	r3, [r7, #4]
 2441 002e 002B     		cmp	r3, #0
 2442 0030 01DA     		bge	.L122
 2443              		.loc 1 681 0 is_stmt 0 discriminator 1
 2444 0032 0023     		movs	r3, #0
 2445 0034 7B60     		str	r3, [r7, #4]
 2446              	.L122:
 682:oled.c        ****     if (y1 > OLED_HEIGHT - 1) y1 = OLED_HEIGHT - 1;
 2447              		.loc 1 682 0 is_stmt 1
 2448 0036 BB6A     		ldr	r3, [r7, #40]
 2449 0038 3F2B     		cmp	r3, #63
 2450 003a 01DD     		ble	.L123
 2451              		.loc 1 682 0 is_stmt 0 discriminator 1
 2452 003c 3F23     		movs	r3, #63
 2453 003e BB62     		str	r3, [r7, #40]
 2454              	.L123:
 683:oled.c        ****     if (y1 < y0) return;
 2455              		.loc 1 683 0 is_stmt 1
 2456 0040 BA6A     		ldr	r2, [r7, #40]
 2457 0042 7B68     		ldr	r3, [r7, #4]
 2458 0044 9A42     		cmp	r2, r3
 2459 0046 C0F2B980 		blt	.L142
 684:oled.c        ****     
 685:oled.c        ****     SetPageAddress(oled, y0/8, y1/8);                   // set the start page address and stop page
 2460              		.loc 1 685 0
 2461 004a 7B68     		ldr	r3, [r7, #4]
 2462 004c 002B     		cmp	r3, #0
 2463 004e 00DA     		bge	.L125
 2464 0050 0733     		adds	r3, r3, #7
 2465              	.L125:
 2466 0052 DB10     		asrs	r3, r3, #3
 2467 0054 D9B2     		uxtb	r1, r3
 2468 0056 BB6A     		ldr	r3, [r7, #40]
 2469 0058 002B     		cmp	r3, #0
 2470 005a 00DA     		bge	.L126
 2471 005c 0733     		adds	r3, r3, #7
 2472              	.L126:
 2473 005e DB10     		asrs	r3, r3, #3
 2474 0060 DBB2     		uxtb	r3, r3
 2475 0062 1A46     		mov	r2, r3
 2476 0064 F868     		ldr	r0, [r7, #12]
 2477 0066 FFF7FEFF 		bl	SetPageAddress
 686:oled.c        ****     SetColumnAddress(oled, x0, x1);                     // set the start column address and stop co
 2478              		.loc 1 686 0
 2479 006a BB68     		ldr	r3, [r7, #8]
 2480 006c DBB2     		uxtb	r3, r3
 2481 006e 3A68     		ldr	r2, [r7]
 2482 0070 D2B2     		uxtb	r2, r2
 2483 0072 1946     		mov	r1, r3
 2484 0074 F868     		ldr	r0, [r7, #12]
 2485 0076 FFF7FEFF 		bl	SetColumnAddress
 687:oled.c        ****     
 688:oled.c        ****     oled->SendStart(oled->slaveAddr, 0x00);             // generate Start condition and send slave 
 2486              		.loc 1 688 0
 2487 007a FB68     		ldr	r3, [r7, #12]
 2488 007c 5B68     		ldr	r3, [r3, #4]
 2489 007e FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 57


 2490 0080 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2491 0082 0021     		movs	r1, #0
 2492 0084 1046     		mov	r0, r2
 2493 0086 9847     		blx	r3
 689:oled.c        ****     oled->WriteByte(0x40);                              // send "GRAM write" control byte
 2494              		.loc 1 689 0
 2495 0088 FB68     		ldr	r3, [r7, #12]
 2496 008a DB68     		ldr	r3, [r3, #12]
 2497 008c 4020     		movs	r0, #64
 2498 008e 9847     		blx	r3
 2499              	.LBB5:
 690:oled.c        ****     
 691:oled.c        ****     uint8 mask;
 692:oled.c        ****     for (int i=y0/8; i<=y1/8; i++){                     // iterate over pages that will be modified
 2500              		.loc 1 692 0
 2501 0090 7B68     		ldr	r3, [r7, #4]
 2502 0092 002B     		cmp	r3, #0
 2503 0094 00DA     		bge	.L127
 2504 0096 0733     		adds	r3, r3, #7
 2505              	.L127:
 2506 0098 DB10     		asrs	r3, r3, #3
 2507 009a BB61     		str	r3, [r7, #24]
 2508 009c 7EE0     		b	.L128
 2509              	.L140:
 693:oled.c        ****         mask = 0x00;                                    // create a bit mask to preserve pixels tha
 2510              		.loc 1 693 0
 2511 009e 0023     		movs	r3, #0
 2512 00a0 FB77     		strb	r3, [r7, #31]
 694:oled.c        ****         if (i == y0/8){                                               
 2513              		.loc 1 694 0
 2514 00a2 7B68     		ldr	r3, [r7, #4]
 2515 00a4 002B     		cmp	r3, #0
 2516 00a6 00DA     		bge	.L129
 2517 00a8 0733     		adds	r3, r3, #7
 2518              	.L129:
 2519 00aa DB10     		asrs	r3, r3, #3
 2520 00ac 1A46     		mov	r2, r3
 2521 00ae BB69     		ldr	r3, [r7, #24]
 2522 00b0 9A42     		cmp	r2, r3
 2523 00b2 0ED1     		bne	.L130
 695:oled.c        ****             mask = 0xFF >> (8 - y0%8);
 2524              		.loc 1 695 0
 2525 00b4 7A68     		ldr	r2, [r7, #4]
 2526 00b6 434B     		ldr	r3, .L143
 2527 00b8 1340     		ands	r3, r3, r2
 2528 00ba 002B     		cmp	r3, #0
 2529 00bc 03DA     		bge	.L131
 2530 00be 013B     		subs	r3, r3, #1
 2531 00c0 63F00703 		orn	r3, r3, #7
 2532 00c4 0133     		adds	r3, r3, #1
 2533              	.L131:
 2534 00c6 C3F10803 		rsb	r3, r3, #8
 2535 00ca FF22     		movs	r2, #255
 2536 00cc 42FA03F3 		asr	r3, r2, r3
 2537 00d0 FB77     		strb	r3, [r7, #31]
 2538              	.L130:
 696:oled.c        ****         }
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 58


 697:oled.c        ****         if (i == y1/8){
 2539              		.loc 1 697 0
 2540 00d2 BB6A     		ldr	r3, [r7, #40]
 2541 00d4 002B     		cmp	r3, #0
 2542 00d6 00DA     		bge	.L132
 2543 00d8 0733     		adds	r3, r3, #7
 2544              	.L132:
 2545 00da DB10     		asrs	r3, r3, #3
 2546 00dc 1A46     		mov	r2, r3
 2547 00de BB69     		ldr	r3, [r7, #24]
 2548 00e0 9A42     		cmp	r2, r3
 2549 00e2 12D1     		bne	.L133
 698:oled.c        ****             mask = mask | (0xFF << (1 + y1%8));
 2550              		.loc 1 698 0
 2551 00e4 BA6A     		ldr	r2, [r7, #40]
 2552 00e6 374B     		ldr	r3, .L143
 2553 00e8 1340     		ands	r3, r3, r2
 2554 00ea 002B     		cmp	r3, #0
 2555 00ec 03DA     		bge	.L134
 2556 00ee 013B     		subs	r3, r3, #1
 2557 00f0 63F00703 		orn	r3, r3, #7
 2558 00f4 0133     		adds	r3, r3, #1
 2559              	.L134:
 2560 00f6 0133     		adds	r3, r3, #1
 2561 00f8 FF22     		movs	r2, #255
 2562 00fa 02FA03F3 		lsl	r3, r2, r3
 2563 00fe 5AB2     		sxtb	r2, r3
 2564 0100 97F91F30 		ldrsb	r3, [r7, #31]
 2565 0104 1343     		orrs	r3, r3, r2
 2566 0106 5BB2     		sxtb	r3, r3
 2567 0108 FB77     		strb	r3, [r7, #31]
 2568              	.L133:
 2569              	.LBB6:
 699:oled.c        ****         }
 700:oled.c        ****         for (int j=x0; j<=x1; j++){                                                             // 
 2570              		.loc 1 700 0
 2571 010a BB68     		ldr	r3, [r7, #8]
 2572 010c 7B61     		str	r3, [r7, #20]
 2573 010e 3EE0     		b	.L135
 2574              	.L138:
 701:oled.c        ****             if (color == 0){
 2575              		.loc 1 701 0
 2576 0110 97F82C30 		ldrb	r3, [r7, #44]	@ zero_extendqisi2
 2577 0114 002B     		cmp	r3, #0
 2578 0116 12D1     		bne	.L136
 702:oled.c        ****                 oled->GRAM[i*OLED_WIDTH + j] = oled->GRAM[i*OLED_WIDTH + j] & mask;             // 
 2579              		.loc 1 702 0
 2580 0118 BB69     		ldr	r3, [r7, #24]
 2581 011a DA01     		lsls	r2, r3, #7
 2582 011c 7B69     		ldr	r3, [r7, #20]
 2583 011e 1344     		add	r3, r3, r2
 2584 0120 BA69     		ldr	r2, [r7, #24]
 2585 0122 D101     		lsls	r1, r2, #7
 2586 0124 7A69     		ldr	r2, [r7, #20]
 2587 0126 0A44     		add	r2, r2, r1
 2588 0128 F968     		ldr	r1, [r7, #12]
 2589 012a 0A44     		add	r2, r2, r1
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 59


 2590 012c 917E     		ldrb	r1, [r2, #26]	@ zero_extendqisi2
 2591 012e FA7F     		ldrb	r2, [r7, #31]
 2592 0130 0A40     		ands	r2, r2, r1
 2593 0132 D1B2     		uxtb	r1, r2
 2594 0134 FA68     		ldr	r2, [r7, #12]
 2595 0136 1344     		add	r3, r3, r2
 2596 0138 0A46     		mov	r2, r1
 2597 013a 9A76     		strb	r2, [r3, #26]
 2598 013c 19E0     		b	.L137
 2599              	.L136:
 703:oled.c        ****             }
 704:oled.c        ****             else {
 705:oled.c        ****                 oled->GRAM[i*OLED_WIDTH + j] = ~mask | (oled->GRAM[i*OLED_WIDTH + j] & mask);   // 
 2600              		.loc 1 705 0
 2601 013e BB69     		ldr	r3, [r7, #24]
 2602 0140 DA01     		lsls	r2, r3, #7
 2603 0142 7B69     		ldr	r3, [r7, #20]
 2604 0144 1344     		add	r3, r3, r2
 2605 0146 97F91F20 		ldrsb	r2, [r7, #31]
 2606 014a D243     		mvns	r2, r2
 2607 014c 51B2     		sxtb	r1, r2
 2608 014e BA69     		ldr	r2, [r7, #24]
 2609 0150 D001     		lsls	r0, r2, #7
 2610 0152 7A69     		ldr	r2, [r7, #20]
 2611 0154 0244     		add	r2, r2, r0
 2612 0156 F868     		ldr	r0, [r7, #12]
 2613 0158 0244     		add	r2, r2, r0
 2614 015a 907E     		ldrb	r0, [r2, #26]	@ zero_extendqisi2
 2615 015c FA7F     		ldrb	r2, [r7, #31]
 2616 015e 0240     		ands	r2, r2, r0
 2617 0160 D2B2     		uxtb	r2, r2
 2618 0162 52B2     		sxtb	r2, r2
 2619 0164 0A43     		orrs	r2, r2, r1
 2620 0166 52B2     		sxtb	r2, r2
 2621 0168 D1B2     		uxtb	r1, r2
 2622 016a FA68     		ldr	r2, [r7, #12]
 2623 016c 1344     		add	r3, r3, r2
 2624 016e 0A46     		mov	r2, r1
 2625 0170 9A76     		strb	r2, [r3, #26]
 2626              	.L137:
 706:oled.c        ****             }
 707:oled.c        ****         oled->WriteByte(oled->GRAM[i*OLED_WIDTH + j]);                                          // 
 2627              		.loc 1 707 0 discriminator 2
 2628 0172 FB68     		ldr	r3, [r7, #12]
 2629 0174 DB68     		ldr	r3, [r3, #12]
 2630 0176 BA69     		ldr	r2, [r7, #24]
 2631 0178 D101     		lsls	r1, r2, #7
 2632 017a 7A69     		ldr	r2, [r7, #20]
 2633 017c 0A44     		add	r2, r2, r1
 2634 017e F968     		ldr	r1, [r7, #12]
 2635 0180 0A44     		add	r2, r2, r1
 2636 0182 927E     		ldrb	r2, [r2, #26]	@ zero_extendqisi2
 2637 0184 1046     		mov	r0, r2
 2638 0186 9847     		blx	r3
 700:oled.c        ****             if (color == 0){
 2639              		.loc 1 700 0 discriminator 2
 2640 0188 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 60


 2641 018a 0133     		adds	r3, r3, #1
 2642 018c 7B61     		str	r3, [r7, #20]
 2643              	.L135:
 700:oled.c        ****             if (color == 0){
 2644              		.loc 1 700 0 is_stmt 0 discriminator 1
 2645 018e 7A69     		ldr	r2, [r7, #20]
 2646 0190 3B68     		ldr	r3, [r7]
 2647 0192 9A42     		cmp	r2, r3
 2648 0194 BCDD     		ble	.L138
 2649              	.LBE6:
 692:oled.c        ****         mask = 0x00;                                    // create a bit mask to preserve pixels tha
 2650              		.loc 1 692 0 is_stmt 1 discriminator 2
 2651 0196 BB69     		ldr	r3, [r7, #24]
 2652 0198 0133     		adds	r3, r3, #1
 2653 019a BB61     		str	r3, [r7, #24]
 2654              	.L128:
 692:oled.c        ****         mask = 0x00;                                    // create a bit mask to preserve pixels tha
 2655              		.loc 1 692 0 is_stmt 0 discriminator 1
 2656 019c BB6A     		ldr	r3, [r7, #40]
 2657 019e 002B     		cmp	r3, #0
 2658 01a0 00DA     		bge	.L139
 2659 01a2 0733     		adds	r3, r3, #7
 2660              	.L139:
 2661 01a4 DB10     		asrs	r3, r3, #3
 2662 01a6 1A46     		mov	r2, r3
 2663 01a8 BB69     		ldr	r3, [r7, #24]
 2664 01aa 9A42     		cmp	r2, r3
 2665 01ac BFF677AF 		bge	.L140
 2666              	.LBE5:
 708:oled.c        ****         }
 709:oled.c        ****     }
 710:oled.c        ****     
 711:oled.c        ****     oled->SendStop();                                   // generate Stop condition
 2667              		.loc 1 711 0 is_stmt 1
 2668 01b0 FB68     		ldr	r3, [r7, #12]
 2669 01b2 9B68     		ldr	r3, [r3, #8]
 2670 01b4 9847     		blx	r3
 2671 01b6 02E0     		b	.L117
 2672              	.L141:
 680:oled.c        ****     if (y0 < 0) y0 = 0;
 2673              		.loc 1 680 0
 2674 01b8 00BF     		nop
 2675 01ba 00E0     		b	.L117
 2676              	.L142:
 683:oled.c        ****     
 2677              		.loc 1 683 0
 2678 01bc 00BF     		nop
 2679              	.L117:
 712:oled.c        **** }
 2680              		.loc 1 712 0
 2681 01be 2037     		adds	r7, r7, #32
 2682              		.cfi_def_cfa_offset 8
 2683 01c0 BD46     		mov	sp, r7
 2684              		.cfi_def_cfa_register 13
 2685              		@ sp needed
 2686 01c2 80BD     		pop	{r7, pc}
 2687              	.L144:
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 61


 2688              		.align	2
 2689              	.L143:
 2690 01c4 07000080 		.word	-2147483641
 2691              		.cfi_endproc
 2692              	.LFE93:
 2693              		.size	WriteGRAM, .-WriteGRAM
 2694              		.section	.text.DrawHLine,"ax",%progbits
 2695              		.align	2
 2696              		.global	DrawHLine
 2697              		.thumb
 2698              		.thumb_func
 2699              		.type	DrawHLine, %function
 2700              	DrawHLine:
 2701              	.LFB94:
 713:oled.c        **** 
 714:oled.c        **** //========================================
 715:oled.c        **** // DrawHLine()
 716:oled.c        **** // this functions draws a horizontal line
 717:oled.c        **** // between the points (x0, y) and (x1, y)
 718:oled.c        **** //
 719:oled.c        **** // Parameters:
 720:oled.c        **** //     oled - pointer to a oled_t structure
 721:oled.c        **** //     y - y-coordinate of line
 722:oled.c        **** //     x0 - x-coordinate of the first point
 723:oled.c        **** //     x1 - x-coordinate of the second point
 724:oled.c        **** //========================================
 725:oled.c        **** void DrawHLine(oled_t * oled, int y, int x0, int x1)
 726:oled.c        **** {
 2702              		.loc 1 726 0
 2703              		.cfi_startproc
 2704              		@ args = 0, pretend = 0, frame = 16
 2705              		@ frame_needed = 1, uses_anonymous_args = 0
 2706 0000 90B5     		push	{r4, r7, lr}
 2707              		.cfi_def_cfa_offset 12
 2708              		.cfi_offset 4, -12
 2709              		.cfi_offset 7, -8
 2710              		.cfi_offset 14, -4
 2711 0002 87B0     		sub	sp, sp, #28
 2712              		.cfi_def_cfa_offset 40
 2713 0004 02AF     		add	r7, sp, #8
 2714              		.cfi_def_cfa 7, 32
 2715 0006 F860     		str	r0, [r7, #12]
 2716 0008 B960     		str	r1, [r7, #8]
 2717 000a 7A60     		str	r2, [r7, #4]
 2718 000c 3B60     		str	r3, [r7]
 727:oled.c        ****     if (x0 <= x1) WriteGRAM(oled, x0-oled->penSize, y-oled->penSize, x1+oled->penSize, y+oled->penS
 2719              		.loc 1 727 0
 2720 000e 7A68     		ldr	r2, [r7, #4]
 2721 0010 3B68     		ldr	r3, [r7]
 2722 0012 9A42     		cmp	r2, r3
 2723 0014 1DDC     		bgt	.L146
 2724              		.loc 1 727 0 is_stmt 0 discriminator 1
 2725 0016 FB68     		ldr	r3, [r7, #12]
 2726 0018 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2727 001a 1A46     		mov	r2, r3
 2728 001c 7B68     		ldr	r3, [r7, #4]
 2729 001e 991A     		subs	r1, r3, r2
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 62


 2730 0020 FB68     		ldr	r3, [r7, #12]
 2731 0022 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2732 0024 1A46     		mov	r2, r3
 2733 0026 BB68     		ldr	r3, [r7, #8]
 2734 0028 981A     		subs	r0, r3, r2
 2735 002a FB68     		ldr	r3, [r7, #12]
 2736 002c 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2737 002e 1A46     		mov	r2, r3
 2738 0030 3B68     		ldr	r3, [r7]
 2739 0032 D418     		adds	r4, r2, r3
 2740 0034 FB68     		ldr	r3, [r7, #12]
 2741 0036 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2742 0038 1A46     		mov	r2, r3
 2743 003a BB68     		ldr	r3, [r7, #8]
 2744 003c 1344     		add	r3, r3, r2
 2745 003e FA68     		ldr	r2, [r7, #12]
 2746 0040 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 2747 0042 0192     		str	r2, [sp, #4]
 2748 0044 0093     		str	r3, [sp]
 2749 0046 2346     		mov	r3, r4
 2750 0048 0246     		mov	r2, r0
 2751 004a F868     		ldr	r0, [r7, #12]
 2752 004c FFF7FEFF 		bl	WriteGRAM
 728:oled.c        ****     else WriteGRAM(oled, x1-oled->penSize, y-oled->penSize, x0+oled->penSize, y+oled->penSize, oled
 729:oled.c        **** }
 2753              		.loc 1 729 0 is_stmt 1 discriminator 1
 2754 0050 1CE0     		b	.L148
 2755              	.L146:
 728:oled.c        ****     else WriteGRAM(oled, x1-oled->penSize, y-oled->penSize, x0+oled->penSize, y+oled->penSize, oled
 2756              		.loc 1 728 0
 2757 0052 FB68     		ldr	r3, [r7, #12]
 2758 0054 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2759 0056 1A46     		mov	r2, r3
 2760 0058 3B68     		ldr	r3, [r7]
 2761 005a 991A     		subs	r1, r3, r2
 2762 005c FB68     		ldr	r3, [r7, #12]
 2763 005e 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2764 0060 1A46     		mov	r2, r3
 2765 0062 BB68     		ldr	r3, [r7, #8]
 2766 0064 981A     		subs	r0, r3, r2
 2767 0066 FB68     		ldr	r3, [r7, #12]
 2768 0068 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2769 006a 1A46     		mov	r2, r3
 2770 006c 7B68     		ldr	r3, [r7, #4]
 2771 006e D418     		adds	r4, r2, r3
 2772 0070 FB68     		ldr	r3, [r7, #12]
 2773 0072 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2774 0074 1A46     		mov	r2, r3
 2775 0076 BB68     		ldr	r3, [r7, #8]
 2776 0078 1344     		add	r3, r3, r2
 2777 007a FA68     		ldr	r2, [r7, #12]
 2778 007c 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 2779 007e 0192     		str	r2, [sp, #4]
 2780 0080 0093     		str	r3, [sp]
 2781 0082 2346     		mov	r3, r4
 2782 0084 0246     		mov	r2, r0
 2783 0086 F868     		ldr	r0, [r7, #12]
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 63


 2784 0088 FFF7FEFF 		bl	WriteGRAM
 2785              	.L148:
 2786              		.loc 1 729 0
 2787 008c 00BF     		nop
 2788 008e 1437     		adds	r7, r7, #20
 2789              		.cfi_def_cfa_offset 12
 2790 0090 BD46     		mov	sp, r7
 2791              		.cfi_def_cfa_register 13
 2792              		@ sp needed
 2793 0092 90BD     		pop	{r4, r7, pc}
 2794              		.cfi_endproc
 2795              	.LFE94:
 2796              		.size	DrawHLine, .-DrawHLine
 2797              		.section	.text.DrawVLine,"ax",%progbits
 2798              		.align	2
 2799              		.global	DrawVLine
 2800              		.thumb
 2801              		.thumb_func
 2802              		.type	DrawVLine, %function
 2803              	DrawVLine:
 2804              	.LFB95:
 730:oled.c        **** 
 731:oled.c        **** //========================================
 732:oled.c        **** // DrawVLine()
 733:oled.c        **** // this functions draws a vertical line
 734:oled.c        **** // between the points (x, y0) and (x, y1)
 735:oled.c        **** //
 736:oled.c        **** // Parameters:
 737:oled.c        **** //     oled - pointer to a oled_t structure
 738:oled.c        **** //     x - x-coordinate of line
 739:oled.c        **** //     y0 - y-coordinate of the first point
 740:oled.c        **** //     y1 - y-coordinate of the second point
 741:oled.c        **** //========================================
 742:oled.c        **** void DrawVLine(oled_t * oled, int x, int y0, int y1)
 743:oled.c        **** {
 2805              		.loc 1 743 0
 2806              		.cfi_startproc
 2807              		@ args = 0, pretend = 0, frame = 16
 2808              		@ frame_needed = 1, uses_anonymous_args = 0
 2809 0000 90B5     		push	{r4, r7, lr}
 2810              		.cfi_def_cfa_offset 12
 2811              		.cfi_offset 4, -12
 2812              		.cfi_offset 7, -8
 2813              		.cfi_offset 14, -4
 2814 0002 87B0     		sub	sp, sp, #28
 2815              		.cfi_def_cfa_offset 40
 2816 0004 02AF     		add	r7, sp, #8
 2817              		.cfi_def_cfa 7, 32
 2818 0006 F860     		str	r0, [r7, #12]
 2819 0008 B960     		str	r1, [r7, #8]
 2820 000a 7A60     		str	r2, [r7, #4]
 2821 000c 3B60     		str	r3, [r7]
 744:oled.c        ****     if (y0 <= y1) WriteGRAM(oled, x-oled->penSize, y0-oled->penSize, x+oled->penSize, y1+oled->penS
 2822              		.loc 1 744 0
 2823 000e 7A68     		ldr	r2, [r7, #4]
 2824 0010 3B68     		ldr	r3, [r7]
 2825 0012 9A42     		cmp	r2, r3
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 64


 2826 0014 1DDC     		bgt	.L150
 2827              		.loc 1 744 0 is_stmt 0 discriminator 1
 2828 0016 FB68     		ldr	r3, [r7, #12]
 2829 0018 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2830 001a 1A46     		mov	r2, r3
 2831 001c BB68     		ldr	r3, [r7, #8]
 2832 001e 991A     		subs	r1, r3, r2
 2833 0020 FB68     		ldr	r3, [r7, #12]
 2834 0022 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2835 0024 1A46     		mov	r2, r3
 2836 0026 7B68     		ldr	r3, [r7, #4]
 2837 0028 981A     		subs	r0, r3, r2
 2838 002a FB68     		ldr	r3, [r7, #12]
 2839 002c 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2840 002e 1A46     		mov	r2, r3
 2841 0030 BB68     		ldr	r3, [r7, #8]
 2842 0032 D418     		adds	r4, r2, r3
 2843 0034 FB68     		ldr	r3, [r7, #12]
 2844 0036 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2845 0038 1A46     		mov	r2, r3
 2846 003a 3B68     		ldr	r3, [r7]
 2847 003c 1344     		add	r3, r3, r2
 2848 003e FA68     		ldr	r2, [r7, #12]
 2849 0040 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 2850 0042 0192     		str	r2, [sp, #4]
 2851 0044 0093     		str	r3, [sp]
 2852 0046 2346     		mov	r3, r4
 2853 0048 0246     		mov	r2, r0
 2854 004a F868     		ldr	r0, [r7, #12]
 2855 004c FFF7FEFF 		bl	WriteGRAM
 745:oled.c        ****     else WriteGRAM(oled, x-oled->penSize, y1-oled->penSize, x+oled->penSize, y0+oled->penSize, oled
 746:oled.c        **** }
 2856              		.loc 1 746 0 is_stmt 1 discriminator 1
 2857 0050 1CE0     		b	.L152
 2858              	.L150:
 745:oled.c        ****     else WriteGRAM(oled, x-oled->penSize, y1-oled->penSize, x+oled->penSize, y0+oled->penSize, oled
 2859              		.loc 1 745 0
 2860 0052 FB68     		ldr	r3, [r7, #12]
 2861 0054 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2862 0056 1A46     		mov	r2, r3
 2863 0058 BB68     		ldr	r3, [r7, #8]
 2864 005a 991A     		subs	r1, r3, r2
 2865 005c FB68     		ldr	r3, [r7, #12]
 2866 005e 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2867 0060 1A46     		mov	r2, r3
 2868 0062 3B68     		ldr	r3, [r7]
 2869 0064 981A     		subs	r0, r3, r2
 2870 0066 FB68     		ldr	r3, [r7, #12]
 2871 0068 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2872 006a 1A46     		mov	r2, r3
 2873 006c BB68     		ldr	r3, [r7, #8]
 2874 006e D418     		adds	r4, r2, r3
 2875 0070 FB68     		ldr	r3, [r7, #12]
 2876 0072 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2877 0074 1A46     		mov	r2, r3
 2878 0076 7B68     		ldr	r3, [r7, #4]
 2879 0078 1344     		add	r3, r3, r2
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 65


 2880 007a FA68     		ldr	r2, [r7, #12]
 2881 007c 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 2882 007e 0192     		str	r2, [sp, #4]
 2883 0080 0093     		str	r3, [sp]
 2884 0082 2346     		mov	r3, r4
 2885 0084 0246     		mov	r2, r0
 2886 0086 F868     		ldr	r0, [r7, #12]
 2887 0088 FFF7FEFF 		bl	WriteGRAM
 2888              	.L152:
 2889              		.loc 1 746 0
 2890 008c 00BF     		nop
 2891 008e 1437     		adds	r7, r7, #20
 2892              		.cfi_def_cfa_offset 12
 2893 0090 BD46     		mov	sp, r7
 2894              		.cfi_def_cfa_register 13
 2895              		@ sp needed
 2896 0092 90BD     		pop	{r4, r7, pc}
 2897              		.cfi_endproc
 2898              	.LFE95:
 2899              		.size	DrawVLine, .-DrawVLine
 2900              		.section	.text.BresenhamLineAlgorithm,"ax",%progbits
 2901              		.align	2
 2902              		.global	BresenhamLineAlgorithm
 2903              		.thumb
 2904              		.thumb_func
 2905              		.type	BresenhamLineAlgorithm, %function
 2906              	BresenhamLineAlgorithm:
 2907              	.LFB96:
 747:oled.c        **** 
 748:oled.c        **** //========================================
 749:oled.c        **** // BresenhamLineAlgorithm()
 750:oled.c        **** // this function uses Bresenham's line algorithm to
 751:oled.c        **** // draw a line between the points (x0, y0) and 
 752:oled.c        **** // (x0+dx, y0+dy). Bresenham's algorithm requires
 753:oled.c        **** // the slope of the line to be between 0 and 1, however
 754:oled.c        **** // the parameter rot allows the caller to specify 
 755:oled.c        **** // whether the line should be rotated when plotted 
 756:oled.c        **** // on the display
 757:oled.c        **** //
 758:oled.c        **** // Parameters:
 759:oled.c        **** //     oled - pointer to a oled_t structure
 760:oled.c        **** //     x0 - x-coordinate of the start of the line
 761:oled.c        **** //     y0 - y-coordinate of the start of the line
 762:oled.c        **** //     dx - length of the line in the x-direction
 763:oled.c        **** //     dy - length of the line in the y-direction
 764:oled.c        **** //     rot - desired rotation (integer in range 0-3)
 765:oled.c        **** //========================================
 766:oled.c        **** void BresenhamLineAlgorithm(oled_t * oled, int x0, int y0, int dx, int dy, uint8 rot)
 767:oled.c        **** {
 2908              		.loc 1 767 0
 2909              		.cfi_startproc
 2910              		@ args = 8, pretend = 0, frame = 40
 2911              		@ frame_needed = 1, uses_anonymous_args = 0
 2912 0000 80B5     		push	{r7, lr}
 2913              		.cfi_def_cfa_offset 8
 2914              		.cfi_offset 7, -8
 2915              		.cfi_offset 14, -4
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 66


 2916 0002 90B0     		sub	sp, sp, #64
 2917              		.cfi_def_cfa_offset 72
 2918 0004 06AF     		add	r7, sp, #24
 2919              		.cfi_def_cfa 7, 48
 2920 0006 F860     		str	r0, [r7, #12]
 2921 0008 B960     		str	r1, [r7, #8]
 2922 000a 7A60     		str	r2, [r7, #4]
 2923 000c 3B60     		str	r3, [r7]
 768:oled.c        ****     if ((dx < 0) || (dy < 0) || (dy > dx)) return;              // make sure the slope is between 0
 2924              		.loc 1 768 0
 2925 000e 3B68     		ldr	r3, [r7]
 2926 0010 002B     		cmp	r3, #0
 2927 0012 62DB     		blt	.L162
 2928              		.loc 1 768 0 is_stmt 0 discriminator 1
 2929 0014 3B6B     		ldr	r3, [r7, #48]
 2930 0016 002B     		cmp	r3, #0
 2931 0018 5FDB     		blt	.L162
 2932              		.loc 1 768 0 discriminator 2
 2933 001a 3A6B     		ldr	r2, [r7, #48]
 2934 001c 3B68     		ldr	r3, [r7]
 2935 001e 9A42     		cmp	r2, r3
 2936 0020 5BDC     		bgt	.L162
 769:oled.c        ****     
 770:oled.c        ****     int error = 0;                                              // initialize error to 0 
 2937              		.loc 1 770 0 is_stmt 1
 2938 0022 0023     		movs	r3, #0
 2939 0024 7B62     		str	r3, [r7, #36]
 771:oled.c        ****     int x = 0, y = 0;                                           // set x and y to 0 (start algorith
 2940              		.loc 1 771 0
 2941 0026 0023     		movs	r3, #0
 2942 0028 3B62     		str	r3, [r7, #32]
 2943 002a 0023     		movs	r3, #0
 2944 002c FB61     		str	r3, [r7, #28]
 772:oled.c        ****     int thresh = dx - 2*dy;                                     // decision threshold (increase y i
 2945              		.loc 1 772 0
 2946 002e 3B6B     		ldr	r3, [r7, #48]
 2947 0030 5B00     		lsls	r3, r3, #1
 2948 0032 3A68     		ldr	r2, [r7]
 2949 0034 D31A     		subs	r3, r2, r3
 2950 0036 7B61     		str	r3, [r7, #20]
 773:oled.c        ****     uint8 step = 0;                                             // this variable keeps track of whe
 2951              		.loc 1 773 0
 2952 0038 0023     		movs	r3, #0
 2953 003a FB76     		strb	r3, [r7, #27]
 774:oled.c        ****     
 775:oled.c        ****     for(; x<=dx; x++){                                          // iterate over  x coordinates
 2954              		.loc 1 775 0
 2955 003c 48E0     		b	.L157
 2956              	.L161:
 776:oled.c        ****         if ((x == 0) && (-2*dy + 2*dx > thresh)) step = 1;      // set step = 1 if a step would hav
 2957              		.loc 1 776 0
 2958 003e 3B6A     		ldr	r3, [r7, #32]
 2959 0040 002B     		cmp	r3, #0
 2960 0042 08D1     		bne	.L158
 2961              		.loc 1 776 0 is_stmt 0 discriminator 1
 2962 0044 3A68     		ldr	r2, [r7]
 2963 0046 3B6B     		ldr	r3, [r7, #48]
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 67


 2964 0048 D31A     		subs	r3, r2, r3
 2965 004a 5A00     		lsls	r2, r3, #1
 2966 004c 7B69     		ldr	r3, [r7, #20]
 2967 004e 9A42     		cmp	r2, r3
 2968 0050 01DD     		ble	.L158
 2969              		.loc 1 776 0 discriminator 2
 2970 0052 0123     		movs	r3, #1
 2971 0054 FB76     		strb	r3, [r7, #27]
 2972              	.L158:
 777:oled.c        ****         PlotPerpLineL(oled, x0, y0, dx, dy, x, y, step, rot);
 2973              		.loc 1 777 0 is_stmt 1
 2974 0056 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 2975 0058 97F83420 		ldrb	r2, [r7, #52]	@ zero_extendqisi2
 2976 005c 0492     		str	r2, [sp, #16]
 2977 005e 0393     		str	r3, [sp, #12]
 2978 0060 FB69     		ldr	r3, [r7, #28]
 2979 0062 0293     		str	r3, [sp, #8]
 2980 0064 3B6A     		ldr	r3, [r7, #32]
 2981 0066 0193     		str	r3, [sp, #4]
 2982 0068 3B6B     		ldr	r3, [r7, #48]
 2983 006a 0093     		str	r3, [sp]
 2984 006c 3B68     		ldr	r3, [r7]
 2985 006e 7A68     		ldr	r2, [r7, #4]
 2986 0070 B968     		ldr	r1, [r7, #8]
 2987 0072 F868     		ldr	r0, [r7, #12]
 2988 0074 FFF7FEFF 		bl	PlotPerpLineL
 778:oled.c        ****         PlotPerpLineR(oled, x0, y0, dx, dy, x, y, step, rot);
 2989              		.loc 1 778 0
 2990 0078 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 2991 007a 97F83420 		ldrb	r2, [r7, #52]	@ zero_extendqisi2
 2992 007e 0492     		str	r2, [sp, #16]
 2993 0080 0393     		str	r3, [sp, #12]
 2994 0082 FB69     		ldr	r3, [r7, #28]
 2995 0084 0293     		str	r3, [sp, #8]
 2996 0086 3B6A     		ldr	r3, [r7, #32]
 2997 0088 0193     		str	r3, [sp, #4]
 2998 008a 3B6B     		ldr	r3, [r7, #48]
 2999 008c 0093     		str	r3, [sp]
 3000 008e 3B68     		ldr	r3, [r7]
 3001 0090 7A68     		ldr	r2, [r7, #4]
 3002 0092 B968     		ldr	r1, [r7, #8]
 3003 0094 F868     		ldr	r0, [r7, #12]
 3004 0096 FFF7FEFF 		bl	PlotPerpLineR
 779:oled.c        ****         if (error > thresh){                                    // check decision threshold
 3005              		.loc 1 779 0
 3006 009a 7A6A     		ldr	r2, [r7, #36]
 3007 009c 7B69     		ldr	r3, [r7, #20]
 3008 009e 9A42     		cmp	r2, r3
 3009 00a0 0CDD     		ble	.L159
 780:oled.c        ****             y++;                                                // increment the y coordinate
 3010              		.loc 1 780 0
 3011 00a2 FB69     		ldr	r3, [r7, #28]
 3012 00a4 0133     		adds	r3, r3, #1
 3013 00a6 FB61     		str	r3, [r7, #28]
 781:oled.c        ****             error += 2*dy - 2*dx;                               // update the error
 3014              		.loc 1 781 0
 3015 00a8 3A6B     		ldr	r2, [r7, #48]
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 68


 3016 00aa 3B68     		ldr	r3, [r7]
 3017 00ac D31A     		subs	r3, r2, r3
 3018 00ae 5B00     		lsls	r3, r3, #1
 3019 00b0 7A6A     		ldr	r2, [r7, #36]
 3020 00b2 1344     		add	r3, r3, r2
 3021 00b4 7B62     		str	r3, [r7, #36]
 782:oled.c        ****             step = 1;                                           // step was made, so set step to 1
 3022              		.loc 1 782 0
 3023 00b6 0123     		movs	r3, #1
 3024 00b8 FB76     		strb	r3, [r7, #27]
 3025 00ba 06E0     		b	.L160
 3026              	.L159:
 783:oled.c        ****         }
 784:oled.c        ****         else {
 785:oled.c        ****             error += 2*dy;                                      // update the error
 3027              		.loc 1 785 0
 3028 00bc 3B6B     		ldr	r3, [r7, #48]
 3029 00be 5B00     		lsls	r3, r3, #1
 3030 00c0 7A6A     		ldr	r2, [r7, #36]
 3031 00c2 1344     		add	r3, r3, r2
 3032 00c4 7B62     		str	r3, [r7, #36]
 786:oled.c        ****             step = 0;                                           // step was not made, so set step t
 3033              		.loc 1 786 0
 3034 00c6 0023     		movs	r3, #0
 3035 00c8 FB76     		strb	r3, [r7, #27]
 3036              	.L160:
 775:oled.c        ****         if ((x == 0) && (-2*dy + 2*dx > thresh)) step = 1;      // set step = 1 if a step would hav
 3037              		.loc 1 775 0
 3038 00ca 3B6A     		ldr	r3, [r7, #32]
 3039 00cc 0133     		adds	r3, r3, #1
 3040 00ce 3B62     		str	r3, [r7, #32]
 3041              	.L157:
 775:oled.c        ****         if ((x == 0) && (-2*dy + 2*dx > thresh)) step = 1;      // set step = 1 if a step would hav
 3042              		.loc 1 775 0 is_stmt 0 discriminator 1
 3043 00d0 3A6A     		ldr	r2, [r7, #32]
 3044 00d2 3B68     		ldr	r3, [r7]
 3045 00d4 9A42     		cmp	r2, r3
 3046 00d6 B2DD     		ble	.L161
 3047 00d8 00E0     		b	.L153
 3048              	.L162:
 768:oled.c        ****     
 3049              		.loc 1 768 0 is_stmt 1
 3050 00da 00BF     		nop
 3051              	.L153:
 787:oled.c        ****         }
 788:oled.c        ****     }
 789:oled.c        **** }
 3052              		.loc 1 789 0
 3053 00dc 2837     		adds	r7, r7, #40
 3054              		.cfi_def_cfa_offset 8
 3055 00de BD46     		mov	sp, r7
 3056              		.cfi_def_cfa_register 13
 3057              		@ sp needed
 3058 00e0 80BD     		pop	{r7, pc}
 3059              		.cfi_endproc
 3060              	.LFE96:
 3061              		.size	BresenhamLineAlgorithm, .-BresenhamLineAlgorithm
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 69


 3062 00e2 00BF     		.section	.text.PlotPerpLineL,"ax",%progbits
 3063              		.align	2
 3064              		.global	PlotPerpLineL
 3065              		.thumb
 3066              		.thumb_func
 3067              		.type	PlotPerpLineL, %function
 3068              	PlotPerpLineL:
 3069              	.LFB97:
 790:oled.c        **** 
 791:oled.c        **** //========================================
 792:oled.c        **** // PlotPerpLineL()
 793:oled.c        **** // this function is a helper function for 
 794:oled.c        **** // BresenhamLineAlgorithm(). It uses a modified 
 795:oled.c        **** // version of Bresenham's line algorithm to add
 796:oled.c        **** // thickness to the line being drawn in BresenhamLineAlgorithm().
 797:oled.c        **** // It does this by plotting a perpendicular line
 798:oled.c        **** // to the left side of the line being drawn. The 
 799:oled.c        **** // starting point for this perpendicular line is
 800:oled.c        **** // the point (x0+x, y0+y)
 801:oled.c        **** //
 802:oled.c        **** // Parameters:
 803:oled.c        **** //     oled - pointer to a oled_t structure
 804:oled.c        **** //     x0 - x-coordinate of the start of the line
 805:oled.c        **** //     y0 - y-coordinate of the start of the line
 806:oled.c        **** //     dx - length of the line in the x-direction
 807:oled.c        **** //     dy - length of the line in the y-direction
 808:oled.c        **** //     x - x-coordinate offset for the starting point
 809:oled.c        **** //         of the perpendicular line
 810:oled.c        **** //     y - y-coordinate offset for the starting point
 811:oled.c        **** //         of the perpendicular line
 812:oled.c        **** //     step - binary value which indicates if the y 
 813:oled.c        **** //            offset was increment in the previous
 814:oled.c        **** //            iteration of Bresenham's algorithm     
 815:oled.c        **** //     rot - desired rotation (integer in range 0-3)
 816:oled.c        **** //
 817:oled.c        **** // Note: the "line" refered to in the parameter descriptions
 818:oled.c        **** // is used in reference to the line being drawn in
 819:oled.c        **** // BresenhamLineAlgorithm() unless stated otherwise
 820:oled.c        **** //========================================
 821:oled.c        **** void PlotPerpLineL(oled_t * oled, int x0, int y0, int dx, int dy, int x, int y, int step, uint8 rot
 822:oled.c        **** {
 3070              		.loc 1 822 0
 3071              		.cfi_startproc
 3072              		@ args = 20, pretend = 0, frame = 32
 3073              		@ frame_needed = 1, uses_anonymous_args = 0
 3074 0000 80B5     		push	{r7, lr}
 3075              		.cfi_def_cfa_offset 8
 3076              		.cfi_offset 7, -8
 3077              		.cfi_offset 14, -4
 3078 0002 8AB0     		sub	sp, sp, #40
 3079              		.cfi_def_cfa_offset 48
 3080 0004 02AF     		add	r7, sp, #8
 3081              		.cfi_def_cfa 7, 40
 3082 0006 F860     		str	r0, [r7, #12]
 3083 0008 B960     		str	r1, [r7, #8]
 3084 000a 7A60     		str	r2, [r7, #4]
 3085 000c 3B60     		str	r3, [r7]
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 70


 823:oled.c        ****     int error = 0;
 3086              		.loc 1 823 0
 3087 000e 0023     		movs	r3, #0
 3088 0010 FB61     		str	r3, [r7, #28]
 824:oled.c        ****     int thresh = dx - 2*dy;             // decision threshold (decrease x if error becomes greater 
 3089              		.loc 1 824 0
 3090 0012 BB6A     		ldr	r3, [r7, #40]
 3091 0014 5B00     		lsls	r3, r3, #1
 3092 0016 3A68     		ldr	r2, [r7]
 3093 0018 D31A     		subs	r3, r2, r3
 3094 001a 7B61     		str	r3, [r7, #20]
 3095              	.LBB7:
 825:oled.c        ****     
 826:oled.c        ****     for (int i=0; i<oled->penSize+1; i++){
 3096              		.loc 1 826 0
 3097 001c 0023     		movs	r3, #0
 3098 001e BB61     		str	r3, [r7, #24]
 3099 0020 38E0     		b	.L164
 3100              	.L168:
 827:oled.c        ****         PlotPoint(oled, x0, y0, x, y, rot); // plot pixel
 3101              		.loc 1 827 0
 3102 0022 97F83830 		ldrb	r3, [r7, #56]	@ zero_extendqisi2
 3103 0026 0193     		str	r3, [sp, #4]
 3104 0028 3B6B     		ldr	r3, [r7, #48]
 3105 002a 0093     		str	r3, [sp]
 3106 002c FB6A     		ldr	r3, [r7, #44]
 3107 002e 7A68     		ldr	r2, [r7, #4]
 3108 0030 B968     		ldr	r1, [r7, #8]
 3109 0032 F868     		ldr	r0, [r7, #12]
 3110 0034 FFF7FEFF 		bl	PlotPoint
 828:oled.c        ****         if (error > thresh){            // check decision threshold
 3111              		.loc 1 828 0
 3112 0038 FA69     		ldr	r2, [r7, #28]
 3113 003a 7B69     		ldr	r3, [r7, #20]
 3114 003c 9A42     		cmp	r2, r3
 3115 003e 1EDD     		ble	.L165
 829:oled.c        ****             x--;                        // decrement the x coordinate
 3116              		.loc 1 829 0
 3117 0040 FB6A     		ldr	r3, [r7, #44]
 3118 0042 013B     		subs	r3, r3, #1
 3119 0044 FB62     		str	r3, [r7, #44]
 830:oled.c        ****             error += 2*dy - 2*dx;       // update the error
 3120              		.loc 1 830 0
 3121 0046 BA6A     		ldr	r2, [r7, #40]
 3122 0048 3B68     		ldr	r3, [r7]
 3123 004a D31A     		subs	r3, r2, r3
 3124 004c 5B00     		lsls	r3, r3, #1
 3125 004e FA69     		ldr	r2, [r7, #28]
 3126 0050 1344     		add	r3, r3, r2
 3127 0052 FB61     		str	r3, [r7, #28]
 831:oled.c        ****             if ((step == 1) && (i != oled->penSize)){
 3128              		.loc 1 831 0
 3129 0054 7B6B     		ldr	r3, [r7, #52]
 3130 0056 012B     		cmp	r3, #1
 3131 0058 16D1     		bne	.L167
 3132              		.loc 1 831 0 is_stmt 0 discriminator 1
 3133 005a FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 71


 3134 005c 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 3135 005e 1A46     		mov	r2, r3
 3136 0060 BB69     		ldr	r3, [r7, #24]
 3137 0062 9A42     		cmp	r2, r3
 3138 0064 10D0     		beq	.L167
 832:oled.c        ****                 PlotPoint(oled, x0, y0, x, y, rot);      // fill in "gap" pixel      
 3139              		.loc 1 832 0 is_stmt 1
 3140 0066 97F83830 		ldrb	r3, [r7, #56]	@ zero_extendqisi2
 3141 006a 0193     		str	r3, [sp, #4]
 3142 006c 3B6B     		ldr	r3, [r7, #48]
 3143 006e 0093     		str	r3, [sp]
 3144 0070 FB6A     		ldr	r3, [r7, #44]
 3145 0072 7A68     		ldr	r2, [r7, #4]
 3146 0074 B968     		ldr	r1, [r7, #8]
 3147 0076 F868     		ldr	r0, [r7, #12]
 3148 0078 FFF7FEFF 		bl	PlotPoint
 3149 007c 04E0     		b	.L167
 3150              	.L165:
 833:oled.c        ****             }
 834:oled.c        ****         }
 835:oled.c        ****         else {
 836:oled.c        ****             error += 2*dy;              // update the error   
 3151              		.loc 1 836 0
 3152 007e BB6A     		ldr	r3, [r7, #40]
 3153 0080 5B00     		lsls	r3, r3, #1
 3154 0082 FA69     		ldr	r2, [r7, #28]
 3155 0084 1344     		add	r3, r3, r2
 3156 0086 FB61     		str	r3, [r7, #28]
 3157              	.L167:
 837:oled.c        ****         }
 838:oled.c        ****         y++;                            // increment y on every itteratioon
 3158              		.loc 1 838 0 discriminator 2
 3159 0088 3B6B     		ldr	r3, [r7, #48]
 3160 008a 0133     		adds	r3, r3, #1
 3161 008c 3B63     		str	r3, [r7, #48]
 826:oled.c        ****         PlotPoint(oled, x0, y0, x, y, rot); // plot pixel
 3162              		.loc 1 826 0 discriminator 2
 3163 008e BB69     		ldr	r3, [r7, #24]
 3164 0090 0133     		adds	r3, r3, #1
 3165 0092 BB61     		str	r3, [r7, #24]
 3166              	.L164:
 826:oled.c        ****         PlotPoint(oled, x0, y0, x, y, rot); // plot pixel
 3167              		.loc 1 826 0 is_stmt 0 discriminator 1
 3168 0094 FB68     		ldr	r3, [r7, #12]
 3169 0096 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 3170 0098 5A1C     		adds	r2, r3, #1
 3171 009a BB69     		ldr	r3, [r7, #24]
 3172 009c 9A42     		cmp	r2, r3
 3173 009e C0DC     		bgt	.L168
 3174              	.LBE7:
 839:oled.c        ****     }
 840:oled.c        **** }
 3175              		.loc 1 840 0 is_stmt 1
 3176 00a0 00BF     		nop
 3177 00a2 2037     		adds	r7, r7, #32
 3178              		.cfi_def_cfa_offset 8
 3179 00a4 BD46     		mov	sp, r7
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 72


 3180              		.cfi_def_cfa_register 13
 3181              		@ sp needed
 3182 00a6 80BD     		pop	{r7, pc}
 3183              		.cfi_endproc
 3184              	.LFE97:
 3185              		.size	PlotPerpLineL, .-PlotPerpLineL
 3186              		.section	.text.PlotPerpLineR,"ax",%progbits
 3187              		.align	2
 3188              		.global	PlotPerpLineR
 3189              		.thumb
 3190              		.thumb_func
 3191              		.type	PlotPerpLineR, %function
 3192              	PlotPerpLineR:
 3193              	.LFB98:
 841:oled.c        **** 
 842:oled.c        **** //========================================
 843:oled.c        **** // PlotPerpLineR()
 844:oled.c        **** // this function is a helper function for 
 845:oled.c        **** // BresenhamLineAlgorithm(). It uses a modified 
 846:oled.c        **** // version of Bresenham's line algorithm to add
 847:oled.c        **** // thickness to the line being drawn in BresenhamLineAlgorithm().
 848:oled.c        **** // It does this by plotting a perpendicular line
 849:oled.c        **** // to the right side of the line being drawn. The 
 850:oled.c        **** // starting point for this perpendicular line is
 851:oled.c        **** // the point (x0+x, y0+y)
 852:oled.c        **** //
 853:oled.c        **** // Parameters:
 854:oled.c        **** //     oled - pointer to a oled_t structure
 855:oled.c        **** //     x0 - x-coordinate of the start of the line
 856:oled.c        **** //     y0 - y-coordinate of the start of the line
 857:oled.c        **** //     dx - length of the line in the x-direction
 858:oled.c        **** //     dy - length of the line in the y-direction
 859:oled.c        **** //     x - x-coordinate offset for the starting point
 860:oled.c        **** //         of the perpendicular line
 861:oled.c        **** //     y - y-coordinate offset for the starting point
 862:oled.c        **** //         of the perpendicular line
 863:oled.c        **** //     step - binary value which indicates if the y 
 864:oled.c        **** //            offset was increment in the previous
 865:oled.c        **** //            iteration of Bresenham's algorithm     
 866:oled.c        **** //     rot - desired rotation (integer in range 0-3)
 867:oled.c        **** //
 868:oled.c        **** // Note: the "line" refered to in the parameter descriptions
 869:oled.c        **** // is used in reference to the line being drawn in
 870:oled.c        **** // BresenhamLineAlgorithm() unless stated otherwise
 871:oled.c        **** //========================================
 872:oled.c        **** void PlotPerpLineR(oled_t * oled, int x0, int y0, int dx, int dy, int x, int y, int step, uint8 rot
 873:oled.c        **** {
 3194              		.loc 1 873 0
 3195              		.cfi_startproc
 3196              		@ args = 20, pretend = 0, frame = 32
 3197              		@ frame_needed = 1, uses_anonymous_args = 0
 3198 0000 80B5     		push	{r7, lr}
 3199              		.cfi_def_cfa_offset 8
 3200              		.cfi_offset 7, -8
 3201              		.cfi_offset 14, -4
 3202 0002 8AB0     		sub	sp, sp, #40
 3203              		.cfi_def_cfa_offset 48
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 73


 3204 0004 02AF     		add	r7, sp, #8
 3205              		.cfi_def_cfa 7, 40
 3206 0006 F860     		str	r0, [r7, #12]
 3207 0008 B960     		str	r1, [r7, #8]
 3208 000a 7A60     		str	r2, [r7, #4]
 3209 000c 3B60     		str	r3, [r7]
 874:oled.c        ****     int error = 0;
 3210              		.loc 1 874 0
 3211 000e 0023     		movs	r3, #0
 3212 0010 FB61     		str	r3, [r7, #28]
 875:oled.c        ****     int thresh = dx - 2*dy;             // decision threshold (increase x if error becomes greater 
 3213              		.loc 1 875 0
 3214 0012 BB6A     		ldr	r3, [r7, #40]
 3215 0014 5B00     		lsls	r3, r3, #1
 3216 0016 3A68     		ldr	r2, [r7]
 3217 0018 D31A     		subs	r3, r2, r3
 3218 001a 7B61     		str	r3, [r7, #20]
 3219              	.LBB8:
 876:oled.c        ****     
 877:oled.c        ****     for (int i=0; i<oled->penSize+1; i++){
 3220              		.loc 1 877 0
 3221 001c 0023     		movs	r3, #0
 3222 001e BB61     		str	r3, [r7, #24]
 3223 0020 3EE0     		b	.L170
 3224              	.L175:
 878:oled.c        ****         if (i != 0) PlotPoint(oled, x0, y0, x, y, rot);     // plot pixel (don't plot the first pix
 3225              		.loc 1 878 0
 3226 0022 BB69     		ldr	r3, [r7, #24]
 3227 0024 002B     		cmp	r3, #0
 3228 0026 0AD0     		beq	.L171
 3229              		.loc 1 878 0 is_stmt 0 discriminator 1
 3230 0028 97F83830 		ldrb	r3, [r7, #56]	@ zero_extendqisi2
 3231 002c 0193     		str	r3, [sp, #4]
 3232 002e 3B6B     		ldr	r3, [r7, #48]
 3233 0030 0093     		str	r3, [sp]
 3234 0032 FB6A     		ldr	r3, [r7, #44]
 3235 0034 7A68     		ldr	r2, [r7, #4]
 3236 0036 B968     		ldr	r1, [r7, #8]
 3237 0038 F868     		ldr	r0, [r7, #12]
 3238 003a FFF7FEFF 		bl	PlotPoint
 3239              	.L171:
 879:oled.c        ****         if (error > thresh){            // check decision threshold
 3240              		.loc 1 879 0 is_stmt 1
 3241 003e FA69     		ldr	r2, [r7, #28]
 3242 0040 7B69     		ldr	r3, [r7, #20]
 3243 0042 9A42     		cmp	r2, r3
 3244 0044 21DD     		ble	.L172
 880:oled.c        ****             x++;                        // increment the x coordinate
 3245              		.loc 1 880 0
 3246 0046 FB6A     		ldr	r3, [r7, #44]
 3247 0048 0133     		adds	r3, r3, #1
 3248 004a FB62     		str	r3, [r7, #44]
 881:oled.c        ****             error += 2*dy - 2*dx;       // update the error
 3249              		.loc 1 881 0
 3250 004c BA6A     		ldr	r2, [r7, #40]
 3251 004e 3B68     		ldr	r3, [r7]
 3252 0050 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 74


 3253 0052 5B00     		lsls	r3, r3, #1
 3254 0054 FA69     		ldr	r2, [r7, #28]
 3255 0056 1344     		add	r3, r3, r2
 3256 0058 FB61     		str	r3, [r7, #28]
 882:oled.c        ****             if ((step == 1) && (i != oled->penSize)){
 3257              		.loc 1 882 0
 3258 005a 7B6B     		ldr	r3, [r7, #52]
 3259 005c 012B     		cmp	r3, #1
 3260 005e 19D1     		bne	.L174
 3261              		.loc 1 882 0 is_stmt 0 discriminator 1
 3262 0060 FB68     		ldr	r3, [r7, #12]
 3263 0062 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 3264 0064 1A46     		mov	r2, r3
 3265 0066 BB69     		ldr	r3, [r7, #24]
 3266 0068 9A42     		cmp	r2, r3
 3267 006a 13D0     		beq	.L174
 883:oled.c        ****                 PlotPoint(oled, x0, y0, x-1, y-1, rot);             // fill in "gap" pixel    
 3268              		.loc 1 883 0 is_stmt 1
 3269 006c FB6A     		ldr	r3, [r7, #44]
 3270 006e 591E     		subs	r1, r3, #1
 3271 0070 3B6B     		ldr	r3, [r7, #48]
 3272 0072 013B     		subs	r3, r3, #1
 3273 0074 97F83820 		ldrb	r2, [r7, #56]	@ zero_extendqisi2
 3274 0078 0192     		str	r2, [sp, #4]
 3275 007a 0093     		str	r3, [sp]
 3276 007c 0B46     		mov	r3, r1
 3277 007e 7A68     		ldr	r2, [r7, #4]
 3278 0080 B968     		ldr	r1, [r7, #8]
 3279 0082 F868     		ldr	r0, [r7, #12]
 3280 0084 FFF7FEFF 		bl	PlotPoint
 3281 0088 04E0     		b	.L174
 3282              	.L172:
 884:oled.c        ****             }
 885:oled.c        ****         }
 886:oled.c        ****         else {
 887:oled.c        ****             error += 2*dy;              // update the error   
 3283              		.loc 1 887 0
 3284 008a BB6A     		ldr	r3, [r7, #40]
 3285 008c 5B00     		lsls	r3, r3, #1
 3286 008e FA69     		ldr	r2, [r7, #28]
 3287 0090 1344     		add	r3, r3, r2
 3288 0092 FB61     		str	r3, [r7, #28]
 3289              	.L174:
 888:oled.c        ****         }
 889:oled.c        ****         y--;                            // decrement y on every itteratioon
 3290              		.loc 1 889 0 discriminator 2
 3291 0094 3B6B     		ldr	r3, [r7, #48]
 3292 0096 013B     		subs	r3, r3, #1
 3293 0098 3B63     		str	r3, [r7, #48]
 877:oled.c        ****         if (i != 0) PlotPoint(oled, x0, y0, x, y, rot);     // plot pixel (don't plot the first pix
 3294              		.loc 1 877 0 discriminator 2
 3295 009a BB69     		ldr	r3, [r7, #24]
 3296 009c 0133     		adds	r3, r3, #1
 3297 009e BB61     		str	r3, [r7, #24]
 3298              	.L170:
 877:oled.c        ****         if (i != 0) PlotPoint(oled, x0, y0, x, y, rot);     // plot pixel (don't plot the first pix
 3299              		.loc 1 877 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 75


 3300 00a0 FB68     		ldr	r3, [r7, #12]
 3301 00a2 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 3302 00a4 5A1C     		adds	r2, r3, #1
 3303 00a6 BB69     		ldr	r3, [r7, #24]
 3304 00a8 9A42     		cmp	r2, r3
 3305 00aa BADC     		bgt	.L175
 3306              	.LBE8:
 890:oled.c        ****     }
 891:oled.c        **** }
 3307              		.loc 1 891 0 is_stmt 1
 3308 00ac 00BF     		nop
 3309 00ae 2037     		adds	r7, r7, #32
 3310              		.cfi_def_cfa_offset 8
 3311 00b0 BD46     		mov	sp, r7
 3312              		.cfi_def_cfa_register 13
 3313              		@ sp needed
 3314 00b2 80BD     		pop	{r7, pc}
 3315              		.cfi_endproc
 3316              	.LFE98:
 3317              		.size	PlotPerpLineR, .-PlotPerpLineR
 3318              		.section	.text.PlotPoint,"ax",%progbits
 3319              		.align	2
 3320              		.global	PlotPoint
 3321              		.thumb
 3322              		.thumb_func
 3323              		.type	PlotPoint, %function
 3324              	PlotPoint:
 3325              	.LFB99:
 892:oled.c        **** 
 893:oled.c        **** //========================================
 894:oled.c        **** // PlotPoint()
 895:oled.c        **** // this function is a helper function for 
 896:oled.c        **** // PlotPerpLineL()/PlotPerpLineR(). It plots
 897:oled.c        **** // the points calculated by the line algorithms
 898:oled.c        **** // with the specified rotation (i.e the 
 899:oled.c        **** // transformation necesssary to draw lines
 900:oled.c        **** // with slopes less than 0 or greater than 1)
 901:oled.c        **** //
 902:oled.c        **** // Parameters:
 903:oled.c        **** //     oled - pointer to a oled_t structure
 904:oled.c        **** //     x0 - x-coordinate of the start of the line
 905:oled.c        **** //     y0 - y-coordinate of the start of the line
 906:oled.c        **** //     x - x-coordinate offset for the starting point
 907:oled.c        **** //         of the perpendicular line
 908:oled.c        **** //     y - y-coordinate offset for the starting point
 909:oled.c        **** //         of the perpendicular line    
 910:oled.c        **** //     rot - desired rotation (integer in range 0-3)
 911:oled.c        **** //
 912:oled.c        **** // Note: the "line" refered to in the parameter descriptions
 913:oled.c        **** // is used in reference to the line being drawn in
 914:oled.c        **** // BresenhamLineAlgorithm() unless stated otherwise
 915:oled.c        **** //========================================
 916:oled.c        **** void PlotPoint(oled_t * oled, int x0, int y0, int x, int y, uint8 rot)
 917:oled.c        **** {
 3326              		.loc 1 917 0
 3327              		.cfi_startproc
 3328              		@ args = 8, pretend = 0, frame = 16
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 76


 3329              		@ frame_needed = 1, uses_anonymous_args = 0
 3330 0000 80B5     		push	{r7, lr}
 3331              		.cfi_def_cfa_offset 8
 3332              		.cfi_offset 7, -8
 3333              		.cfi_offset 14, -4
 3334 0002 84B0     		sub	sp, sp, #16
 3335              		.cfi_def_cfa_offset 24
 3336 0004 00AF     		add	r7, sp, #0
 3337              		.cfi_def_cfa_register 7
 3338 0006 F860     		str	r0, [r7, #12]
 3339 0008 B960     		str	r1, [r7, #8]
 3340 000a 7A60     		str	r2, [r7, #4]
 3341 000c 3B60     		str	r3, [r7]
 918:oled.c        ****     if (rot == 0) oled_DrawPixel(oled, y0+y, x0+x);            // slope > 1
 3342              		.loc 1 918 0
 3343 000e 3B7F     		ldrb	r3, [r7, #28]	@ zero_extendqisi2
 3344 0010 002B     		cmp	r3, #0
 3345 0012 0AD1     		bne	.L177
 3346              		.loc 1 918 0 is_stmt 0 discriminator 1
 3347 0014 7A68     		ldr	r2, [r7, #4]
 3348 0016 BB69     		ldr	r3, [r7, #24]
 3349 0018 D118     		adds	r1, r2, r3
 3350 001a BA68     		ldr	r2, [r7, #8]
 3351 001c 3B68     		ldr	r3, [r7]
 3352 001e 1344     		add	r3, r3, r2
 3353 0020 1A46     		mov	r2, r3
 3354 0022 F868     		ldr	r0, [r7, #12]
 3355 0024 FFF7FEFF 		bl	oled_DrawPixel
 919:oled.c        ****     else if (rot == 1) oled_DrawPixel(oled, x0+x, y0+y);       // 0 <= slope <= 1
 920:oled.c        ****     else if (rot == 2) oled_DrawPixel(oled, x0+x, -y0-y);      // -1 <= slope < 0
 921:oled.c        ****     else if (rot == 3) oled_DrawPixel(oled, y0+y, -x0-x);      // slope < -1
 922:oled.c        **** }
 3356              		.loc 1 922 0 is_stmt 1 discriminator 1
 3357 0028 2AE0     		b	.L181
 3358              	.L177:
 919:oled.c        ****     else if (rot == 1) oled_DrawPixel(oled, x0+x, y0+y);       // 0 <= slope <= 1
 3359              		.loc 1 919 0
 3360 002a 3B7F     		ldrb	r3, [r7, #28]	@ zero_extendqisi2
 3361 002c 012B     		cmp	r3, #1
 3362 002e 0AD1     		bne	.L179
 919:oled.c        ****     else if (rot == 1) oled_DrawPixel(oled, x0+x, y0+y);       // 0 <= slope <= 1
 3363              		.loc 1 919 0 is_stmt 0 discriminator 1
 3364 0030 BA68     		ldr	r2, [r7, #8]
 3365 0032 3B68     		ldr	r3, [r7]
 3366 0034 D118     		adds	r1, r2, r3
 3367 0036 7A68     		ldr	r2, [r7, #4]
 3368 0038 BB69     		ldr	r3, [r7, #24]
 3369 003a 1344     		add	r3, r3, r2
 3370 003c 1A46     		mov	r2, r3
 3371 003e F868     		ldr	r0, [r7, #12]
 3372 0040 FFF7FEFF 		bl	oled_DrawPixel
 3373              		.loc 1 922 0 is_stmt 1 discriminator 1
 3374 0044 1CE0     		b	.L181
 3375              	.L179:
 920:oled.c        ****     else if (rot == 3) oled_DrawPixel(oled, y0+y, -x0-x);      // slope < -1
 3376              		.loc 1 920 0
 3377 0046 3B7F     		ldrb	r3, [r7, #28]	@ zero_extendqisi2
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 77


 3378 0048 022B     		cmp	r3, #2
 3379 004a 0BD1     		bne	.L180
 920:oled.c        ****     else if (rot == 3) oled_DrawPixel(oled, y0+y, -x0-x);      // slope < -1
 3380              		.loc 1 920 0 is_stmt 0 discriminator 1
 3381 004c BA68     		ldr	r2, [r7, #8]
 3382 004e 3B68     		ldr	r3, [r7]
 3383 0050 D118     		adds	r1, r2, r3
 3384 0052 7B68     		ldr	r3, [r7, #4]
 3385 0054 5A42     		negs	r2, r3
 3386 0056 BB69     		ldr	r3, [r7, #24]
 3387 0058 D31A     		subs	r3, r2, r3
 3388 005a 1A46     		mov	r2, r3
 3389 005c F868     		ldr	r0, [r7, #12]
 3390 005e FFF7FEFF 		bl	oled_DrawPixel
 3391              		.loc 1 922 0 is_stmt 1 discriminator 1
 3392 0062 0DE0     		b	.L181
 3393              	.L180:
 921:oled.c        **** }
 3394              		.loc 1 921 0
 3395 0064 3B7F     		ldrb	r3, [r7, #28]	@ zero_extendqisi2
 3396 0066 032B     		cmp	r3, #3
 3397 0068 0AD1     		bne	.L181
 921:oled.c        **** }
 3398              		.loc 1 921 0 is_stmt 0 discriminator 1
 3399 006a 7A68     		ldr	r2, [r7, #4]
 3400 006c BB69     		ldr	r3, [r7, #24]
 3401 006e D118     		adds	r1, r2, r3
 3402 0070 BB68     		ldr	r3, [r7, #8]
 3403 0072 5A42     		negs	r2, r3
 3404 0074 3B68     		ldr	r3, [r7]
 3405 0076 D31A     		subs	r3, r2, r3
 3406 0078 1A46     		mov	r2, r3
 3407 007a F868     		ldr	r0, [r7, #12]
 3408 007c FFF7FEFF 		bl	oled_DrawPixel
 3409              	.L181:
 3410              		.loc 1 922 0 is_stmt 1
 3411 0080 00BF     		nop
 3412 0082 1037     		adds	r7, r7, #16
 3413              		.cfi_def_cfa_offset 8
 3414 0084 BD46     		mov	sp, r7
 3415              		.cfi_def_cfa_register 13
 3416              		@ sp needed
 3417 0086 80BD     		pop	{r7, pc}
 3418              		.cfi_endproc
 3419              	.LFE99:
 3420              		.size	PlotPoint, .-PlotPoint
 3421              		.section	.text.BresenhamCircleAlgorithm,"ax",%progbits
 3422              		.align	2
 3423              		.global	BresenhamCircleAlgorithm
 3424              		.thumb
 3425              		.thumb_func
 3426              		.type	BresenhamCircleAlgorithm, %function
 3427              	BresenhamCircleAlgorithm:
 3428              	.LFB100:
 923:oled.c        **** 
 924:oled.c        **** //========================================
 925:oled.c        **** // BresenhamCircleAlgorithm()
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 78


 926:oled.c        **** // this function uses Bresenham's circle algorithm to
 927:oled.c        **** // draw a circle of radius r centered at (xc, yc). 
 928:oled.c        **** //
 929:oled.c        **** // Parameters:
 930:oled.c        **** //     oled - pointer to a oled_t structure
 931:oled.c        **** //     xc - x-coordinate of the center of the circle
 932:oled.c        **** //     yc - y-coordinate of the center of the circle
 933:oled.c        **** //     rIn - radius of circle
 934:oled.c        **** //     rOut - outer radius of circle
 935:oled.c        **** //     octants - 8-bit number: xxxx xxxx. Each bit
 936:oled.c        **** //               corresponds to an octant of the circle
 937:oled.c        **** //               and should be set to 1 if that octant
 938:oled.c        **** //               should be plotted (the LSB corresponds
 939:oled.c        **** //               to the octant 0)
 940:oled.c        **** //========================================
 941:oled.c        **** void BresenhamCircleAlgorithm(oled_t *oled, int xc, int yc, int rIn, int rOut, uint8 octants)
 942:oled.c        **** {
 3429              		.loc 1 942 0
 3430              		.cfi_startproc
 3431              		@ args = 8, pretend = 0, frame = 40
 3432              		@ frame_needed = 1, uses_anonymous_args = 0
 3433 0000 80B5     		push	{r7, lr}
 3434              		.cfi_def_cfa_offset 8
 3435              		.cfi_offset 7, -8
 3436              		.cfi_offset 14, -4
 3437 0002 8EB0     		sub	sp, sp, #56
 3438              		.cfi_def_cfa_offset 64
 3439 0004 04AF     		add	r7, sp, #16
 3440              		.cfi_def_cfa 7, 48
 3441 0006 F860     		str	r0, [r7, #12]
 3442 0008 B960     		str	r1, [r7, #8]
 3443 000a 7A60     		str	r2, [r7, #4]
 3444 000c 3B60     		str	r3, [r7]
 943:oled.c        ****     if ((rIn > rOut) || (rOut == 0)) return;    // inner radius must be less than or equal to the o
 3445              		.loc 1 943 0
 3446 000e 3A68     		ldr	r2, [r7]
 3447 0010 3B6B     		ldr	r3, [r7, #48]
 3448 0012 9A42     		cmp	r2, r3
 3449 0014 5ADC     		bgt	.L194
 3450              		.loc 1 943 0 is_stmt 0 discriminator 1
 3451 0016 3B6B     		ldr	r3, [r7, #48]
 3452 0018 002B     		cmp	r3, #0
 3453 001a 57D0     		beq	.L194
 944:oled.c        ****     int dIn = 3 - 2*rIn;                        // initialize decision parameter for inner circle
 3454              		.loc 1 944 0 is_stmt 1
 3455 001c 3B68     		ldr	r3, [r7]
 3456 001e 5B00     		lsls	r3, r3, #1
 3457 0020 C3F10303 		rsb	r3, r3, #3
 3458 0024 7B62     		str	r3, [r7, #36]
 945:oled.c        ****     int dOut = 3 - 2*rOut;                      // initialize decision parameter for inner circle
 3459              		.loc 1 945 0
 3460 0026 3B6B     		ldr	r3, [r7, #48]
 3461 0028 5B00     		lsls	r3, r3, #1
 3462 002a C3F10303 		rsb	r3, r3, #3
 3463 002e 3B62     		str	r3, [r7, #32]
 946:oled.c        ****     int x = 0, yIn = rIn, yOut = rOut;          // initialize first point on the inner cicle to (0,
 3464              		.loc 1 946 0
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 79


 3465 0030 0023     		movs	r3, #0
 3466 0032 FB61     		str	r3, [r7, #28]
 3467 0034 3B68     		ldr	r3, [r7]
 3468 0036 BB61     		str	r3, [r7, #24]
 3469 0038 3B6B     		ldr	r3, [r7, #48]
 3470 003a 7B61     		str	r3, [r7, #20]
 947:oled.c        **** 
 948:oled.c        ****     while (yIn <= yOut){                        // itterate over x until x becomes larger than yIn
 3471              		.loc 1 948 0
 3472 003c 41E0     		b	.L186
 3473              	.L193:
 949:oled.c        ****         PlotCircle(oled, xc, yc, x, yIn, yOut, octants);
 3474              		.loc 1 949 0
 3475 003e 97F83430 		ldrb	r3, [r7, #52]	@ zero_extendqisi2
 3476 0042 0293     		str	r3, [sp, #8]
 3477 0044 7B69     		ldr	r3, [r7, #20]
 3478 0046 0193     		str	r3, [sp, #4]
 3479 0048 BB69     		ldr	r3, [r7, #24]
 3480 004a 0093     		str	r3, [sp]
 3481 004c FB69     		ldr	r3, [r7, #28]
 3482 004e 7A68     		ldr	r2, [r7, #4]
 3483 0050 B968     		ldr	r1, [r7, #8]
 3484 0052 F868     		ldr	r0, [r7, #12]
 3485 0054 FFF7FEFF 		bl	PlotCircle
 950:oled.c        ****         if (dOut < 0){                          // check outer circle desision parameter
 3486              		.loc 1 950 0
 3487 0058 3B6A     		ldr	r3, [r7, #32]
 3488 005a 002B     		cmp	r3, #0
 3489 005c 06DA     		bge	.L187
 951:oled.c        ****             dOut += 4*x + 6;                    // update outer circle desision parameter
 3490              		.loc 1 951 0
 3491 005e FB69     		ldr	r3, [r7, #28]
 3492 0060 9B00     		lsls	r3, r3, #2
 3493 0062 0633     		adds	r3, r3, #6
 3494 0064 3A6A     		ldr	r2, [r7, #32]
 3495 0066 1344     		add	r3, r3, r2
 3496 0068 3B62     		str	r3, [r7, #32]
 3497 006a 0AE0     		b	.L188
 3498              	.L187:
 952:oled.c        ****         }
 953:oled.c        ****         else {
 954:oled.c        ****             dOut += 4*(x - yOut) + 10;          // update outer circle desision parameter
 3499              		.loc 1 954 0
 3500 006c FA69     		ldr	r2, [r7, #28]
 3501 006e 7B69     		ldr	r3, [r7, #20]
 3502 0070 D31A     		subs	r3, r2, r3
 3503 0072 9B00     		lsls	r3, r3, #2
 3504 0074 0A33     		adds	r3, r3, #10
 3505 0076 3A6A     		ldr	r2, [r7, #32]
 3506 0078 1344     		add	r3, r3, r2
 3507 007a 3B62     		str	r3, [r7, #32]
 955:oled.c        ****             yOut--;                             // decrement yOut coordinate 
 3508              		.loc 1 955 0
 3509 007c 7B69     		ldr	r3, [r7, #20]
 3510 007e 013B     		subs	r3, r3, #1
 3511 0080 7B61     		str	r3, [r7, #20]
 3512              	.L188:
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 80


 956:oled.c        ****         }
 957:oled.c        ****         if (x < yIn){                          
 3513              		.loc 1 957 0
 3514 0082 FA69     		ldr	r2, [r7, #28]
 3515 0084 BB69     		ldr	r3, [r7, #24]
 3516 0086 9A42     		cmp	r2, r3
 3517 0088 15DA     		bge	.L189
 958:oled.c        ****             if (dIn < 0){                       // check inner circle desision parameter
 3518              		.loc 1 958 0
 3519 008a 7B6A     		ldr	r3, [r7, #36]
 3520 008c 002B     		cmp	r3, #0
 3521 008e 06DA     		bge	.L190
 959:oled.c        ****                 dIn += 4*x + 6;                 // update desision parameter
 3522              		.loc 1 959 0
 3523 0090 FB69     		ldr	r3, [r7, #28]
 3524 0092 9B00     		lsls	r3, r3, #2
 3525 0094 0633     		adds	r3, r3, #6
 3526 0096 7A6A     		ldr	r2, [r7, #36]
 3527 0098 1344     		add	r3, r3, r2
 3528 009a 7B62     		str	r3, [r7, #36]
 3529 009c 0EE0     		b	.L192
 3530              	.L190:
 960:oled.c        ****             }
 961:oled.c        ****             else {
 962:oled.c        ****                 dIn += 4*(x - yIn) + 10;        // update inner circle desision parameter
 3531              		.loc 1 962 0
 3532 009e FA69     		ldr	r2, [r7, #28]
 3533 00a0 BB69     		ldr	r3, [r7, #24]
 3534 00a2 D31A     		subs	r3, r2, r3
 3535 00a4 9B00     		lsls	r3, r3, #2
 3536 00a6 0A33     		adds	r3, r3, #10
 3537 00a8 7A6A     		ldr	r2, [r7, #36]
 3538 00aa 1344     		add	r3, r3, r2
 3539 00ac 7B62     		str	r3, [r7, #36]
 963:oled.c        ****                 yIn--;                          // decrement yIn coordinate
 3540              		.loc 1 963 0
 3541 00ae BB69     		ldr	r3, [r7, #24]
 3542 00b0 013B     		subs	r3, r3, #1
 3543 00b2 BB61     		str	r3, [r7, #24]
 3544 00b4 02E0     		b	.L192
 3545              	.L189:
 964:oled.c        ****             }
 965:oled.c        ****         }
 966:oled.c        ****         else yIn++;                             // once yIn = x, keep incrementing yIn so that yIn 
 3546              		.loc 1 966 0
 3547 00b6 BB69     		ldr	r3, [r7, #24]
 3548 00b8 0133     		adds	r3, r3, #1
 3549 00ba BB61     		str	r3, [r7, #24]
 3550              	.L192:
 967:oled.c        ****         x++;                                    // increment x on each iteration
 3551              		.loc 1 967 0
 3552 00bc FB69     		ldr	r3, [r7, #28]
 3553 00be 0133     		adds	r3, r3, #1
 3554 00c0 FB61     		str	r3, [r7, #28]
 3555              	.L186:
 948:oled.c        ****         PlotCircle(oled, xc, yc, x, yIn, yOut, octants);
 3556              		.loc 1 948 0
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 81


 3557 00c2 BA69     		ldr	r2, [r7, #24]
 3558 00c4 7B69     		ldr	r3, [r7, #20]
 3559 00c6 9A42     		cmp	r2, r3
 3560 00c8 B9DD     		ble	.L193
 3561 00ca 00E0     		b	.L182
 3562              	.L194:
 943:oled.c        ****     int dIn = 3 - 2*rIn;                        // initialize decision parameter for inner circle
 3563              		.loc 1 943 0
 3564 00cc 00BF     		nop
 3565              	.L182:
 968:oled.c        ****     }
 969:oled.c        **** }
 3566              		.loc 1 969 0
 3567 00ce 2837     		adds	r7, r7, #40
 3568              		.cfi_def_cfa_offset 8
 3569 00d0 BD46     		mov	sp, r7
 3570              		.cfi_def_cfa_register 13
 3571              		@ sp needed
 3572 00d2 80BD     		pop	{r7, pc}
 3573              		.cfi_endproc
 3574              	.LFE100:
 3575              		.size	BresenhamCircleAlgorithm, .-BresenhamCircleAlgorithm
 3576              		.section	.text.PlotCircle,"ax",%progbits
 3577              		.align	2
 3578              		.global	PlotCircle
 3579              		.thumb
 3580              		.thumb_func
 3581              		.type	PlotCircle, %function
 3582              	PlotCircle:
 3583              	.LFB101:
 970:oled.c        **** 
 971:oled.c        **** //========================================
 972:oled.c        **** // PlotCircle()
 973:oled.c        **** // this function is a helper function for
 974:oled.c        **** // BresenhamCircleAlgorithm(). It plots
 975:oled.c        **** // the points calculated by the circle algorithms
 976:oled.c        **** //
 977:oled.c        **** // Parameters:
 978:oled.c        **** //     oled - pointer to a oled_t structure
 979:oled.c        **** //     xc - x-coordinate of the center of the circle
 980:oled.c        **** //     yc - y-coordinate of the center of the circle
 981:oled.c        **** //     x - x-offset for the point (octant 1)
 982:oled.c        **** //     yIn - y-offset for the inner point (octant 1)
 983:oled.c        **** //     yOut - y-offset for the outer point (octant 1)
 984:oled.c        **** //     octants - 8-bit number: xxxx xxxx. Each bit
 985:oled.c        **** //               corresponds to an octant of the circle
 986:oled.c        **** //               and should be set to 1 if that octant
 987:oled.c        **** //               should be plotted (the LSB corresponds
 988:oled.c        **** //               to the fist octant)
 989:oled.c        **** //========================================
 990:oled.c        **** void PlotCircle(oled_t * oled, int xc, int yc, int x, int yIn, int yOut, uint8 octants){
 3584              		.loc 1 990 0
 3585              		.cfi_startproc
 3586              		@ args = 12, pretend = 0, frame = 16
 3587              		@ frame_needed = 1, uses_anonymous_args = 0
 3588 0000 90B5     		push	{r4, r7, lr}
 3589              		.cfi_def_cfa_offset 12
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 82


 3590              		.cfi_offset 4, -12
 3591              		.cfi_offset 7, -8
 3592              		.cfi_offset 14, -4
 3593 0002 87B0     		sub	sp, sp, #28
 3594              		.cfi_def_cfa_offset 40
 3595 0004 02AF     		add	r7, sp, #8
 3596              		.cfi_def_cfa 7, 32
 3597 0006 F860     		str	r0, [r7, #12]
 3598 0008 B960     		str	r1, [r7, #8]
 3599 000a 7A60     		str	r2, [r7, #4]
 3600 000c 3B60     		str	r3, [r7]
 991:oled.c        ****     if (octants & 0x01) WriteGRAM(oled, xc+yIn, yc+x, xc+yOut, yc+x, oled->color);    // plot octan
 3601              		.loc 1 991 0
 3602 000e 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 3603 0012 03F00103 		and	r3, r3, #1
 3604 0016 002B     		cmp	r3, #0
 3605 0018 14D0     		beq	.L196
 3606              		.loc 1 991 0 is_stmt 0 discriminator 1
 3607 001a BA68     		ldr	r2, [r7, #8]
 3608 001c 3B6A     		ldr	r3, [r7, #32]
 3609 001e D118     		adds	r1, r2, r3
 3610 0020 7A68     		ldr	r2, [r7, #4]
 3611 0022 3B68     		ldr	r3, [r7]
 3612 0024 D018     		adds	r0, r2, r3
 3613 0026 BA68     		ldr	r2, [r7, #8]
 3614 0028 7B6A     		ldr	r3, [r7, #36]
 3615 002a D418     		adds	r4, r2, r3
 3616 002c 7A68     		ldr	r2, [r7, #4]
 3617 002e 3B68     		ldr	r3, [r7]
 3618 0030 1344     		add	r3, r3, r2
 3619 0032 FA68     		ldr	r2, [r7, #12]
 3620 0034 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 3621 0036 0192     		str	r2, [sp, #4]
 3622 0038 0093     		str	r3, [sp]
 3623 003a 2346     		mov	r3, r4
 3624 003c 0246     		mov	r2, r0
 3625 003e F868     		ldr	r0, [r7, #12]
 3626 0040 FFF7FEFF 		bl	WriteGRAM
 3627              	.L196:
 992:oled.c        ****     if (octants & 0x02) WriteGRAM(oled, xc+x, yc+yIn, xc+x, yc+yOut, oled->color);    // plot octan
 3628              		.loc 1 992 0 is_stmt 1
 3629 0044 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 3630 0048 03F00203 		and	r3, r3, #2
 3631 004c 002B     		cmp	r3, #0
 3632 004e 14D0     		beq	.L197
 3633              		.loc 1 992 0 is_stmt 0 discriminator 1
 3634 0050 BA68     		ldr	r2, [r7, #8]
 3635 0052 3B68     		ldr	r3, [r7]
 3636 0054 D118     		adds	r1, r2, r3
 3637 0056 7A68     		ldr	r2, [r7, #4]
 3638 0058 3B6A     		ldr	r3, [r7, #32]
 3639 005a D018     		adds	r0, r2, r3
 3640 005c BA68     		ldr	r2, [r7, #8]
 3641 005e 3B68     		ldr	r3, [r7]
 3642 0060 D418     		adds	r4, r2, r3
 3643 0062 7A68     		ldr	r2, [r7, #4]
 3644 0064 7B6A     		ldr	r3, [r7, #36]
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 83


 3645 0066 1344     		add	r3, r3, r2
 3646 0068 FA68     		ldr	r2, [r7, #12]
 3647 006a 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 3648 006c 0192     		str	r2, [sp, #4]
 3649 006e 0093     		str	r3, [sp]
 3650 0070 2346     		mov	r3, r4
 3651 0072 0246     		mov	r2, r0
 3652 0074 F868     		ldr	r0, [r7, #12]
 3653 0076 FFF7FEFF 		bl	WriteGRAM
 3654              	.L197:
 993:oled.c        ****     if (octants & 0x04) WriteGRAM(oled, xc-x, yc+yIn, xc-x, yc+yOut, oled->color);    // plot octan
 3655              		.loc 1 993 0 is_stmt 1
 3656 007a 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 3657 007e 03F00403 		and	r3, r3, #4
 3658 0082 002B     		cmp	r3, #0
 3659 0084 14D0     		beq	.L198
 3660              		.loc 1 993 0 is_stmt 0 discriminator 1
 3661 0086 BA68     		ldr	r2, [r7, #8]
 3662 0088 3B68     		ldr	r3, [r7]
 3663 008a D11A     		subs	r1, r2, r3
 3664 008c 7A68     		ldr	r2, [r7, #4]
 3665 008e 3B6A     		ldr	r3, [r7, #32]
 3666 0090 D018     		adds	r0, r2, r3
 3667 0092 BA68     		ldr	r2, [r7, #8]
 3668 0094 3B68     		ldr	r3, [r7]
 3669 0096 D41A     		subs	r4, r2, r3
 3670 0098 7A68     		ldr	r2, [r7, #4]
 3671 009a 7B6A     		ldr	r3, [r7, #36]
 3672 009c 1344     		add	r3, r3, r2
 3673 009e FA68     		ldr	r2, [r7, #12]
 3674 00a0 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 3675 00a2 0192     		str	r2, [sp, #4]
 3676 00a4 0093     		str	r3, [sp]
 3677 00a6 2346     		mov	r3, r4
 3678 00a8 0246     		mov	r2, r0
 3679 00aa F868     		ldr	r0, [r7, #12]
 3680 00ac FFF7FEFF 		bl	WriteGRAM
 3681              	.L198:
 994:oled.c        ****     if (octants & 0x08) WriteGRAM(oled, xc-yOut, yc+x, xc-yIn, yc+x, oled->color);    // plot octan
 3682              		.loc 1 994 0 is_stmt 1
 3683 00b0 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 3684 00b4 03F00803 		and	r3, r3, #8
 3685 00b8 002B     		cmp	r3, #0
 3686 00ba 14D0     		beq	.L199
 3687              		.loc 1 994 0 is_stmt 0 discriminator 1
 3688 00bc BA68     		ldr	r2, [r7, #8]
 3689 00be 7B6A     		ldr	r3, [r7, #36]
 3690 00c0 D11A     		subs	r1, r2, r3
 3691 00c2 7A68     		ldr	r2, [r7, #4]
 3692 00c4 3B68     		ldr	r3, [r7]
 3693 00c6 D018     		adds	r0, r2, r3
 3694 00c8 BA68     		ldr	r2, [r7, #8]
 3695 00ca 3B6A     		ldr	r3, [r7, #32]
 3696 00cc D41A     		subs	r4, r2, r3
 3697 00ce 7A68     		ldr	r2, [r7, #4]
 3698 00d0 3B68     		ldr	r3, [r7]
 3699 00d2 1344     		add	r3, r3, r2
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 84


 3700 00d4 FA68     		ldr	r2, [r7, #12]
 3701 00d6 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 3702 00d8 0192     		str	r2, [sp, #4]
 3703 00da 0093     		str	r3, [sp]
 3704 00dc 2346     		mov	r3, r4
 3705 00de 0246     		mov	r2, r0
 3706 00e0 F868     		ldr	r0, [r7, #12]
 3707 00e2 FFF7FEFF 		bl	WriteGRAM
 3708              	.L199:
 995:oled.c        ****     if (octants & 0x10) WriteGRAM(oled, xc-yOut, yc-x, xc-yIn, yc-x, oled->color);    // plot octan
 3709              		.loc 1 995 0 is_stmt 1
 3710 00e6 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 3711 00ea 03F01003 		and	r3, r3, #16
 3712 00ee 002B     		cmp	r3, #0
 3713 00f0 14D0     		beq	.L200
 3714              		.loc 1 995 0 is_stmt 0 discriminator 1
 3715 00f2 BA68     		ldr	r2, [r7, #8]
 3716 00f4 7B6A     		ldr	r3, [r7, #36]
 3717 00f6 D11A     		subs	r1, r2, r3
 3718 00f8 7A68     		ldr	r2, [r7, #4]
 3719 00fa 3B68     		ldr	r3, [r7]
 3720 00fc D01A     		subs	r0, r2, r3
 3721 00fe BA68     		ldr	r2, [r7, #8]
 3722 0100 3B6A     		ldr	r3, [r7, #32]
 3723 0102 D41A     		subs	r4, r2, r3
 3724 0104 7A68     		ldr	r2, [r7, #4]
 3725 0106 3B68     		ldr	r3, [r7]
 3726 0108 D31A     		subs	r3, r2, r3
 3727 010a FA68     		ldr	r2, [r7, #12]
 3728 010c 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 3729 010e 0192     		str	r2, [sp, #4]
 3730 0110 0093     		str	r3, [sp]
 3731 0112 2346     		mov	r3, r4
 3732 0114 0246     		mov	r2, r0
 3733 0116 F868     		ldr	r0, [r7, #12]
 3734 0118 FFF7FEFF 		bl	WriteGRAM
 3735              	.L200:
 996:oled.c        ****     if (octants & 0x20) WriteGRAM(oled, xc-x, yc-yOut, xc-x, yc-yIn, oled->color);    // plot octan
 3736              		.loc 1 996 0 is_stmt 1
 3737 011c 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 3738 0120 03F02003 		and	r3, r3, #32
 3739 0124 002B     		cmp	r3, #0
 3740 0126 14D0     		beq	.L201
 3741              		.loc 1 996 0 is_stmt 0 discriminator 1
 3742 0128 BA68     		ldr	r2, [r7, #8]
 3743 012a 3B68     		ldr	r3, [r7]
 3744 012c D11A     		subs	r1, r2, r3
 3745 012e 7A68     		ldr	r2, [r7, #4]
 3746 0130 7B6A     		ldr	r3, [r7, #36]
 3747 0132 D01A     		subs	r0, r2, r3
 3748 0134 BA68     		ldr	r2, [r7, #8]
 3749 0136 3B68     		ldr	r3, [r7]
 3750 0138 D41A     		subs	r4, r2, r3
 3751 013a 7A68     		ldr	r2, [r7, #4]
 3752 013c 3B6A     		ldr	r3, [r7, #32]
 3753 013e D31A     		subs	r3, r2, r3
 3754 0140 FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 85


 3755 0142 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 3756 0144 0192     		str	r2, [sp, #4]
 3757 0146 0093     		str	r3, [sp]
 3758 0148 2346     		mov	r3, r4
 3759 014a 0246     		mov	r2, r0
 3760 014c F868     		ldr	r0, [r7, #12]
 3761 014e FFF7FEFF 		bl	WriteGRAM
 3762              	.L201:
 997:oled.c        ****     if (octants & 0x40) WriteGRAM(oled, xc+x, yc-yOut, xc+x, yc-yIn, oled->color);    // plot octan
 3763              		.loc 1 997 0 is_stmt 1
 3764 0152 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 3765 0156 03F04003 		and	r3, r3, #64
 3766 015a 002B     		cmp	r3, #0
 3767 015c 14D0     		beq	.L202
 3768              		.loc 1 997 0 is_stmt 0 discriminator 1
 3769 015e BA68     		ldr	r2, [r7, #8]
 3770 0160 3B68     		ldr	r3, [r7]
 3771 0162 D118     		adds	r1, r2, r3
 3772 0164 7A68     		ldr	r2, [r7, #4]
 3773 0166 7B6A     		ldr	r3, [r7, #36]
 3774 0168 D01A     		subs	r0, r2, r3
 3775 016a BA68     		ldr	r2, [r7, #8]
 3776 016c 3B68     		ldr	r3, [r7]
 3777 016e D418     		adds	r4, r2, r3
 3778 0170 7A68     		ldr	r2, [r7, #4]
 3779 0172 3B6A     		ldr	r3, [r7, #32]
 3780 0174 D31A     		subs	r3, r2, r3
 3781 0176 FA68     		ldr	r2, [r7, #12]
 3782 0178 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 3783 017a 0192     		str	r2, [sp, #4]
 3784 017c 0093     		str	r3, [sp]
 3785 017e 2346     		mov	r3, r4
 3786 0180 0246     		mov	r2, r0
 3787 0182 F868     		ldr	r0, [r7, #12]
 3788 0184 FFF7FEFF 		bl	WriteGRAM
 3789              	.L202:
 998:oled.c        ****     if (octants & 0x80) WriteGRAM(oled, xc+yIn, yc-x, xc+yOut, yc-x, oled->color);    // plot octan
 3790              		.loc 1 998 0 is_stmt 1
 3791 0188 97F92830 		ldrsb	r3, [r7, #40]
 3792 018c 002B     		cmp	r3, #0
 3793 018e 14DA     		bge	.L204
 3794              		.loc 1 998 0 is_stmt 0 discriminator 1
 3795 0190 BA68     		ldr	r2, [r7, #8]
 3796 0192 3B6A     		ldr	r3, [r7, #32]
 3797 0194 D118     		adds	r1, r2, r3
 3798 0196 7A68     		ldr	r2, [r7, #4]
 3799 0198 3B68     		ldr	r3, [r7]
 3800 019a D01A     		subs	r0, r2, r3
 3801 019c BA68     		ldr	r2, [r7, #8]
 3802 019e 7B6A     		ldr	r3, [r7, #36]
 3803 01a0 D418     		adds	r4, r2, r3
 3804 01a2 7A68     		ldr	r2, [r7, #4]
 3805 01a4 3B68     		ldr	r3, [r7]
 3806 01a6 D31A     		subs	r3, r2, r3
 3807 01a8 FA68     		ldr	r2, [r7, #12]
 3808 01aa 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 3809 01ac 0192     		str	r2, [sp, #4]
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 86


 3810 01ae 0093     		str	r3, [sp]
 3811 01b0 2346     		mov	r3, r4
 3812 01b2 0246     		mov	r2, r0
 3813 01b4 F868     		ldr	r0, [r7, #12]
 3814 01b6 FFF7FEFF 		bl	WriteGRAM
 3815              	.L204:
 999:oled.c        **** }
 3816              		.loc 1 999 0 is_stmt 1
 3817 01ba 00BF     		nop
 3818 01bc 1437     		adds	r7, r7, #20
 3819              		.cfi_def_cfa_offset 12
 3820 01be BD46     		mov	sp, r7
 3821              		.cfi_def_cfa_register 13
 3822              		@ sp needed
 3823 01c0 90BD     		pop	{r4, r7, pc}
 3824              		.cfi_endproc
 3825              	.LFE101:
 3826              		.size	PlotCircle, .-PlotCircle
 3827 01c2 00BF     		.section	.text.Swap,"ax",%progbits
 3828              		.align	2
 3829              		.global	Swap
 3830              		.thumb
 3831              		.thumb_func
 3832              		.type	Swap, %function
 3833              	Swap:
 3834              	.LFB102:
1000:oled.c        **** 
1001:oled.c        **** //========================================
1002:oled.c        **** // Swap()
1003:oled.c        **** // this function swaps the values of var0
1004:oled.c        **** // and var1
1005:oled.c        **** //
1006:oled.c        **** // Parameters:
1007:oled.c        **** //     var0 - pointer to var0
1008:oled.c        **** //     var1 - pointer to var1
1009:oled.c        **** //========================================
1010:oled.c        **** void Swap(int* var0, int* var1)
1011:oled.c        **** {
 3835              		.loc 1 1011 0
 3836              		.cfi_startproc
 3837              		@ args = 0, pretend = 0, frame = 16
 3838              		@ frame_needed = 1, uses_anonymous_args = 0
 3839              		@ link register save eliminated.
 3840 0000 80B4     		push	{r7}
 3841              		.cfi_def_cfa_offset 4
 3842              		.cfi_offset 7, -4
 3843 0002 85B0     		sub	sp, sp, #20
 3844              		.cfi_def_cfa_offset 24
 3845 0004 00AF     		add	r7, sp, #0
 3846              		.cfi_def_cfa_register 7
 3847 0006 7860     		str	r0, [r7, #4]
 3848 0008 3960     		str	r1, [r7]
1012:oled.c        ****     int temp = *var0;
 3849              		.loc 1 1012 0
 3850 000a 7B68     		ldr	r3, [r7, #4]
 3851 000c 1B68     		ldr	r3, [r3]
 3852 000e FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 87


1013:oled.c        ****     *var0 = *var1;
 3853              		.loc 1 1013 0
 3854 0010 3B68     		ldr	r3, [r7]
 3855 0012 1A68     		ldr	r2, [r3]
 3856 0014 7B68     		ldr	r3, [r7, #4]
 3857 0016 1A60     		str	r2, [r3]
1014:oled.c        ****     *var1 = temp;
 3858              		.loc 1 1014 0
 3859 0018 3B68     		ldr	r3, [r7]
 3860 001a FA68     		ldr	r2, [r7, #12]
 3861 001c 1A60     		str	r2, [r3]
1015:oled.c        **** }
 3862              		.loc 1 1015 0
 3863 001e 00BF     		nop
 3864 0020 1437     		adds	r7, r7, #20
 3865              		.cfi_def_cfa_offset 4
 3866 0022 BD46     		mov	sp, r7
 3867              		.cfi_def_cfa_register 13
 3868              		@ sp needed
 3869 0024 80BC     		pop	{r7}
 3870              		.cfi_restore 7
 3871              		.cfi_def_cfa_offset 0
 3872 0026 7047     		bx	lr
 3873              		.cfi_endproc
 3874              	.LFE102:
 3875              		.size	Swap, .-Swap
 3876              		.text
 3877              	.Letext0:
 3878              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3879              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3880              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 3881              		.file 5 "font.h"
 3882              		.file 6 "oled.h"
 3883              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 3884              		.section	.debug_info,"",%progbits
 3885              	.Ldebug_info0:
 3886 0000 D0100000 		.4byte	0x10d0
 3887 0004 0400     		.2byte	0x4
 3888 0006 00000000 		.4byte	.Ldebug_abbrev0
 3889 000a 04       		.byte	0x4
 3890 000b 01       		.uleb128 0x1
 3891 000c 71000000 		.4byte	.LASF89
 3892 0010 0C       		.byte	0xc
 3893 0011 52010000 		.4byte	.LASF90
 3894 0015 26040000 		.4byte	.LASF91
 3895 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3896 001d 00000000 		.4byte	0
 3897 0021 00000000 		.4byte	.Ldebug_line0
 3898 0025 02       		.uleb128 0x2
 3899 0026 01       		.byte	0x1
 3900 0027 06       		.byte	0x6
 3901 0028 9E020000 		.4byte	.LASF0
 3902 002c 02       		.uleb128 0x2
 3903 002d 01       		.byte	0x1
 3904 002e 08       		.byte	0x8
 3905 002f 41020000 		.4byte	.LASF1
 3906 0033 02       		.uleb128 0x2
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 88


 3907 0034 02       		.byte	0x2
 3908 0035 05       		.byte	0x5
 3909 0036 26010000 		.4byte	.LASF2
 3910 003a 02       		.uleb128 0x2
 3911 003b 02       		.byte	0x2
 3912 003c 07       		.byte	0x7
 3913 003d 25030000 		.4byte	.LASF3
 3914 0041 03       		.uleb128 0x3
 3915 0042 9F030000 		.4byte	.LASF9
 3916 0046 02       		.byte	0x2
 3917 0047 3F       		.byte	0x3f
 3918 0048 4C000000 		.4byte	0x4c
 3919 004c 02       		.uleb128 0x2
 3920 004d 04       		.byte	0x4
 3921 004e 05       		.byte	0x5
 3922 004f 6C040000 		.4byte	.LASF4
 3923 0053 02       		.uleb128 0x2
 3924 0054 04       		.byte	0x4
 3925 0055 07       		.byte	0x7
 3926 0056 40010000 		.4byte	.LASF5
 3927 005a 02       		.uleb128 0x2
 3928 005b 08       		.byte	0x8
 3929 005c 05       		.byte	0x5
 3930 005d DC010000 		.4byte	.LASF6
 3931 0061 02       		.uleb128 0x2
 3932 0062 08       		.byte	0x8
 3933 0063 07       		.byte	0x7
 3934 0064 AA020000 		.4byte	.LASF7
 3935 0068 04       		.uleb128 0x4
 3936 0069 04       		.byte	0x4
 3937 006a 05       		.byte	0x5
 3938 006b 696E7400 		.ascii	"int\000"
 3939 006f 02       		.uleb128 0x2
 3940 0070 04       		.byte	0x4
 3941 0071 07       		.byte	0x7
 3942 0072 D2020000 		.4byte	.LASF8
 3943 0076 03       		.uleb128 0x3
 3944 0077 1D030000 		.4byte	.LASF10
 3945 007b 03       		.byte	0x3
 3946 007c 2C       		.byte	0x2c
 3947 007d 41000000 		.4byte	0x41
 3948 0081 05       		.uleb128 0x5
 3949 0082 7F010000 		.4byte	.LASF11
 3950 0086 04       		.byte	0x4
 3951 0087 E401     		.2byte	0x1e4
 3952 0089 2C000000 		.4byte	0x2c
 3953 008d 05       		.uleb128 0x5
 3954 008e 68010000 		.4byte	.LASF12
 3955 0092 04       		.byte	0x4
 3956 0093 E501     		.2byte	0x1e5
 3957 0095 3A000000 		.4byte	0x3a
 3958 0099 02       		.uleb128 0x2
 3959 009a 04       		.byte	0x4
 3960 009b 04       		.byte	0x4
 3961 009c C5010000 		.4byte	.LASF13
 3962 00a0 02       		.uleb128 0x2
 3963 00a1 08       		.byte	0x8
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 89


 3964 00a2 04       		.byte	0x4
 3965 00a3 16040000 		.4byte	.LASF14
 3966 00a7 02       		.uleb128 0x2
 3967 00a8 01       		.byte	0x1
 3968 00a9 08       		.byte	0x8
 3969 00aa 0A030000 		.4byte	.LASF15
 3970 00ae 02       		.uleb128 0x2
 3971 00af 08       		.byte	0x8
 3972 00b0 04       		.byte	0x4
 3973 00b1 56020000 		.4byte	.LASF16
 3974 00b5 02       		.uleb128 0x2
 3975 00b6 04       		.byte	0x4
 3976 00b7 07       		.byte	0x7
 3977 00b8 E0030000 		.4byte	.LASF17
 3978 00bc 06       		.uleb128 0x6
 3979 00bd 04       		.byte	0x4
 3980 00be C2000000 		.4byte	0xc2
 3981 00c2 07       		.uleb128 0x7
 3982 00c3 A7000000 		.4byte	0xa7
 3983 00c7 08       		.uleb128 0x8
 3984 00c8 E20B     		.2byte	0xbe2
 3985 00ca 05       		.byte	0x5
 3986 00cb 0C       		.byte	0xc
 3987 00cc F5000000 		.4byte	0xf5
 3988 00d0 09       		.uleb128 0x9
 3989 00d1 99030000 		.4byte	.LASF18
 3990 00d5 05       		.byte	0x5
 3991 00d6 0D       		.byte	0xd
 3992 00d7 F5000000 		.4byte	0xf5
 3993 00db 00       		.byte	0
 3994 00dc 09       		.uleb128 0x9
 3995 00dd CB020000 		.4byte	.LASF19
 3996 00e1 05       		.byte	0x5
 3997 00e2 0E       		.byte	0xe
 3998 00e3 F5000000 		.4byte	0xf5
 3999 00e7 01       		.byte	0x1
 4000 00e8 09       		.uleb128 0x9
 4001 00e9 4D030000 		.4byte	.LASF20
 4002 00ed 05       		.byte	0x5
 4003 00ee 0F       		.byte	0xf
 4004 00ef 10010000 		.4byte	0x110
 4005 00f3 02       		.byte	0x2
 4006 00f4 00       		.byte	0
 4007 00f5 07       		.uleb128 0x7
 4008 00f6 81000000 		.4byte	0x81
 4009 00fa 0A       		.uleb128 0xa
 4010 00fb F5000000 		.4byte	0xf5
 4011 00ff 10010000 		.4byte	0x110
 4012 0103 0B       		.uleb128 0xb
 4013 0104 B5000000 		.4byte	0xb5
 4014 0108 5E       		.byte	0x5e
 4015 0109 0B       		.uleb128 0xb
 4016 010a B5000000 		.4byte	0xb5
 4017 010e 1F       		.byte	0x1f
 4018 010f 00       		.byte	0
 4019 0110 07       		.uleb128 0x7
 4020 0111 FA000000 		.4byte	0xfa
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 90


 4021 0115 03       		.uleb128 0x3
 4022 0116 9C040000 		.4byte	.LASF21
 4023 011a 05       		.byte	0x5
 4024 011b 10       		.byte	0x10
 4025 011c C7000000 		.4byte	0xc7
 4026 0120 08       		.uleb128 0x8
 4027 0121 1C04     		.2byte	0x41c
 4028 0123 06       		.byte	0x6
 4029 0124 2E       		.byte	0x2e
 4030 0125 AE010000 		.4byte	0x1ae
 4031 0129 09       		.uleb128 0x9
 4032 012a F8010000 		.4byte	.LASF22
 4033 012e 06       		.byte	0x6
 4034 012f 2F       		.byte	0x2f
 4035 0130 81000000 		.4byte	0x81
 4036 0134 00       		.byte	0
 4037 0135 09       		.uleb128 0x9
 4038 0136 82040000 		.4byte	.LASF23
 4039 013a 06       		.byte	0x6
 4040 013b 30       		.byte	0x30
 4041 013c C2010000 		.4byte	0x1c2
 4042 0140 04       		.byte	0x4
 4043 0141 09       		.uleb128 0x9
 4044 0142 62020000 		.4byte	.LASF24
 4045 0146 06       		.byte	0x6
 4046 0147 31       		.byte	0x31
 4047 0148 CD010000 		.4byte	0x1cd
 4048 014c 08       		.byte	0x8
 4049 014d 09       		.uleb128 0x9
 4050 014e 6B020000 		.4byte	.LASF25
 4051 0152 06       		.byte	0x6
 4052 0153 32       		.byte	0x32
 4053 0154 E2010000 		.4byte	0x1e2
 4054 0158 0C       		.byte	0xc
 4055 0159 09       		.uleb128 0x9
 4056 015a FF000000 		.4byte	.LASF26
 4057 015e 06       		.byte	0x6
 4058 015f 33       		.byte	0x33
 4059 0160 81000000 		.4byte	0x81
 4060 0164 10       		.byte	0x10
 4061 0165 09       		.uleb128 0x9
 4062 0166 4F000000 		.4byte	.LASF27
 4063 016a 06       		.byte	0x6
 4064 016b 34       		.byte	0x34
 4065 016c 81000000 		.4byte	0x81
 4066 0170 11       		.byte	0x11
 4067 0171 09       		.uleb128 0x9
 4068 0172 B4040000 		.4byte	.LASF28
 4069 0176 06       		.byte	0x6
 4070 0177 35       		.byte	0x35
 4071 0178 81000000 		.4byte	0x81
 4072 017c 12       		.byte	0x12
 4073 017d 09       		.uleb128 0x9
 4074 017e 11010000 		.4byte	.LASF29
 4075 0182 06       		.byte	0x6
 4076 0183 36       		.byte	0x36
 4077 0184 E8010000 		.4byte	0x1e8
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 91


 4078 0188 14       		.byte	0x14
 4079 0189 09       		.uleb128 0x9
 4080 018a EA010000 		.4byte	.LASF30
 4081 018e 06       		.byte	0x6
 4082 018f 37       		.byte	0x37
 4083 0190 81000000 		.4byte	0x81
 4084 0194 18       		.byte	0x18
 4085 0195 09       		.uleb128 0x9
 4086 0196 1D040000 		.4byte	.LASF31
 4087 019a 06       		.byte	0x6
 4088 019b 38       		.byte	0x38
 4089 019c 81000000 		.4byte	0x81
 4090 01a0 19       		.byte	0x19
 4091 01a1 09       		.uleb128 0x9
 4092 01a2 6F010000 		.4byte	.LASF32
 4093 01a6 06       		.byte	0x6
 4094 01a7 39       		.byte	0x39
 4095 01a8 F3010000 		.4byte	0x1f3
 4096 01ac 1A       		.byte	0x1a
 4097 01ad 00       		.byte	0
 4098 01ae 0C       		.uleb128 0xc
 4099 01af 81000000 		.4byte	0x81
 4100 01b3 C2010000 		.4byte	0x1c2
 4101 01b7 0D       		.uleb128 0xd
 4102 01b8 81000000 		.4byte	0x81
 4103 01bc 0D       		.uleb128 0xd
 4104 01bd 81000000 		.4byte	0x81
 4105 01c1 00       		.byte	0
 4106 01c2 06       		.uleb128 0x6
 4107 01c3 04       		.byte	0x4
 4108 01c4 AE010000 		.4byte	0x1ae
 4109 01c8 0E       		.uleb128 0xe
 4110 01c9 81000000 		.4byte	0x81
 4111 01cd 06       		.uleb128 0x6
 4112 01ce 04       		.byte	0x4
 4113 01cf C8010000 		.4byte	0x1c8
 4114 01d3 0C       		.uleb128 0xc
 4115 01d4 81000000 		.4byte	0x81
 4116 01d8 E2010000 		.4byte	0x1e2
 4117 01dc 0D       		.uleb128 0xd
 4118 01dd 81000000 		.4byte	0x81
 4119 01e1 00       		.byte	0
 4120 01e2 06       		.uleb128 0x6
 4121 01e3 04       		.byte	0x4
 4122 01e4 D3010000 		.4byte	0x1d3
 4123 01e8 06       		.uleb128 0x6
 4124 01e9 04       		.byte	0x4
 4125 01ea EE010000 		.4byte	0x1ee
 4126 01ee 07       		.uleb128 0x7
 4127 01ef 15010000 		.4byte	0x115
 4128 01f3 0A       		.uleb128 0xa
 4129 01f4 81000000 		.4byte	0x81
 4130 01f8 04020000 		.4byte	0x204
 4131 01fc 0F       		.uleb128 0xf
 4132 01fd B5000000 		.4byte	0xb5
 4133 0201 FF03     		.2byte	0x3ff
 4134 0203 00       		.byte	0
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 92


 4135 0204 03       		.uleb128 0x3
 4136 0205 F1010000 		.4byte	.LASF33
 4137 0209 06       		.byte	0x6
 4138 020a 3A       		.byte	0x3a
 4139 020b 20010000 		.4byte	0x120
 4140 020f 10       		.uleb128 0x10
 4141 0210 B9030000 		.4byte	.LASF35
 4142 0214 01       		.byte	0x1
 4143 0215 31       		.byte	0x31
 4144 0216 00000000 		.4byte	.LFB63
 4145 021a 90000000 		.4byte	.LFE63-.LFB63
 4146 021e 01       		.uleb128 0x1
 4147 021f 9C       		.byte	0x9c
 4148 0220 81020000 		.4byte	0x281
 4149 0224 11       		.uleb128 0x11
 4150 0225 C0010000 		.4byte	.LASF34
 4151 0229 01       		.byte	0x1
 4152 022a 31       		.byte	0x31
 4153 022b 81020000 		.4byte	0x281
 4154 022f 02       		.uleb128 0x2
 4155 0230 91       		.byte	0x91
 4156 0231 6C       		.sleb128 -20
 4157 0232 11       		.uleb128 0x11
 4158 0233 F8010000 		.4byte	.LASF22
 4159 0237 01       		.byte	0x1
 4160 0238 31       		.byte	0x31
 4161 0239 81000000 		.4byte	0x81
 4162 023d 02       		.uleb128 0x2
 4163 023e 91       		.byte	0x91
 4164 023f 6B       		.sleb128 -21
 4165 0240 11       		.uleb128 0x11
 4166 0241 82040000 		.4byte	.LASF23
 4167 0245 01       		.byte	0x1
 4168 0246 31       		.byte	0x31
 4169 0247 C2010000 		.4byte	0x1c2
 4170 024b 02       		.uleb128 0x2
 4171 024c 91       		.byte	0x91
 4172 024d 64       		.sleb128 -28
 4173 024e 11       		.uleb128 0x11
 4174 024f 62020000 		.4byte	.LASF24
 4175 0253 01       		.byte	0x1
 4176 0254 31       		.byte	0x31
 4177 0255 CD010000 		.4byte	0x1cd
 4178 0259 02       		.uleb128 0x2
 4179 025a 91       		.byte	0x91
 4180 025b 60       		.sleb128 -32
 4181 025c 11       		.uleb128 0x11
 4182 025d 6B020000 		.4byte	.LASF25
 4183 0261 01       		.byte	0x1
 4184 0262 31       		.byte	0x31
 4185 0263 E2010000 		.4byte	0x1e2
 4186 0267 02       		.uleb128 0x2
 4187 0268 91       		.byte	0x91
 4188 0269 00       		.sleb128 0
 4189 026a 12       		.uleb128 0x12
 4190 026b 58000000 		.4byte	.LBB2
 4191 026f 22000000 		.4byte	.LBE2-.LBB2
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 93


 4192 0273 13       		.uleb128 0x13
 4193 0274 6900     		.ascii	"i\000"
 4194 0276 01       		.byte	0x1
 4195 0277 3F       		.byte	0x3f
 4196 0278 68000000 		.4byte	0x68
 4197 027c 02       		.uleb128 0x2
 4198 027d 91       		.byte	0x91
 4199 027e 74       		.sleb128 -12
 4200 027f 00       		.byte	0
 4201 0280 00       		.byte	0
 4202 0281 06       		.uleb128 0x6
 4203 0282 04       		.byte	0x4
 4204 0283 04020000 		.4byte	0x204
 4205 0287 14       		.uleb128 0x14
 4206 0288 0F030000 		.4byte	.LASF36
 4207 028c 01       		.byte	0x1
 4208 028d 4D       		.byte	0x4d
 4209 028e 00000000 		.4byte	.LFB64
 4210 0292 28000000 		.4byte	.LFE64-.LFB64
 4211 0296 01       		.uleb128 0x1
 4212 0297 9C       		.byte	0x9c
 4213 0298 B9020000 		.4byte	0x2b9
 4214 029c 11       		.uleb128 0x11
 4215 029d C0010000 		.4byte	.LASF34
 4216 02a1 01       		.byte	0x1
 4217 02a2 4D       		.byte	0x4d
 4218 02a3 81020000 		.4byte	0x281
 4219 02a7 02       		.uleb128 0x2
 4220 02a8 91       		.byte	0x91
 4221 02a9 74       		.sleb128 -12
 4222 02aa 11       		.uleb128 0x11
 4223 02ab 4F000000 		.4byte	.LASF27
 4224 02af 01       		.byte	0x1
 4225 02b0 4D       		.byte	0x4d
 4226 02b1 81000000 		.4byte	0x81
 4227 02b5 02       		.uleb128 0x2
 4228 02b6 91       		.byte	0x91
 4229 02b7 73       		.sleb128 -13
 4230 02b8 00       		.byte	0
 4231 02b9 15       		.uleb128 0x15
 4232 02ba 90020000 		.4byte	.LASF38
 4233 02be 01       		.byte	0x1
 4234 02bf 5A       		.byte	0x5a
 4235 02c0 81000000 		.4byte	0x81
 4236 02c4 00000000 		.4byte	.LFB65
 4237 02c8 16000000 		.4byte	.LFE65-.LFB65
 4238 02cc 01       		.uleb128 0x1
 4239 02cd 9C       		.byte	0x9c
 4240 02ce E1020000 		.4byte	0x2e1
 4241 02d2 11       		.uleb128 0x11
 4242 02d3 C0010000 		.4byte	.LASF34
 4243 02d7 01       		.byte	0x1
 4244 02d8 5A       		.byte	0x5a
 4245 02d9 81020000 		.4byte	0x281
 4246 02dd 02       		.uleb128 0x2
 4247 02de 91       		.byte	0x91
 4248 02df 74       		.sleb128 -12
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 94


 4249 02e0 00       		.byte	0
 4250 02e1 14       		.uleb128 0x14
 4251 02e2 84030000 		.4byte	.LASF37
 4252 02e6 01       		.byte	0x1
 4253 02e7 67       		.byte	0x67
 4254 02e8 00000000 		.4byte	.LFB66
 4255 02ec 28000000 		.4byte	.LFE66-.LFB66
 4256 02f0 01       		.uleb128 0x1
 4257 02f1 9C       		.byte	0x9c
 4258 02f2 13030000 		.4byte	0x313
 4259 02f6 11       		.uleb128 0x11
 4260 02f7 C0010000 		.4byte	.LASF34
 4261 02fb 01       		.byte	0x1
 4262 02fc 67       		.byte	0x67
 4263 02fd 81020000 		.4byte	0x281
 4264 0301 02       		.uleb128 0x2
 4265 0302 91       		.byte	0x91
 4266 0303 74       		.sleb128 -12
 4267 0304 11       		.uleb128 0x11
 4268 0305 FF000000 		.4byte	.LASF26
 4269 0309 01       		.byte	0x1
 4270 030a 67       		.byte	0x67
 4271 030b 81000000 		.4byte	0x81
 4272 030f 02       		.uleb128 0x2
 4273 0310 91       		.byte	0x91
 4274 0311 73       		.sleb128 -13
 4275 0312 00       		.byte	0
 4276 0313 15       		.uleb128 0x15
 4277 0314 75020000 		.4byte	.LASF39
 4278 0318 01       		.byte	0x1
 4279 0319 74       		.byte	0x74
 4280 031a 81000000 		.4byte	0x81
 4281 031e 00000000 		.4byte	.LFB67
 4282 0322 16000000 		.4byte	.LFE67-.LFB67
 4283 0326 01       		.uleb128 0x1
 4284 0327 9C       		.byte	0x9c
 4285 0328 3B030000 		.4byte	0x33b
 4286 032c 11       		.uleb128 0x11
 4287 032d C0010000 		.4byte	.LASF34
 4288 0331 01       		.byte	0x1
 4289 0332 74       		.byte	0x74
 4290 0333 81020000 		.4byte	0x281
 4291 0337 02       		.uleb128 0x2
 4292 0338 91       		.byte	0x91
 4293 0339 74       		.sleb128 -12
 4294 033a 00       		.byte	0
 4295 033b 14       		.uleb128 0x14
 4296 033c 5C040000 		.4byte	.LASF40
 4297 0340 01       		.byte	0x1
 4298 0341 84       		.byte	0x84
 4299 0342 00000000 		.4byte	.LFB68
 4300 0346 1C000000 		.4byte	.LFE68-.LFB68
 4301 034a 01       		.uleb128 0x1
 4302 034b 9C       		.byte	0x9c
 4303 034c 6D030000 		.4byte	0x36d
 4304 0350 11       		.uleb128 0x11
 4305 0351 C0010000 		.4byte	.LASF34
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 95


 4306 0355 01       		.byte	0x1
 4307 0356 84       		.byte	0x84
 4308 0357 81020000 		.4byte	0x281
 4309 035b 02       		.uleb128 0x2
 4310 035c 91       		.byte	0x91
 4311 035d 74       		.sleb128 -12
 4312 035e 11       		.uleb128 0x11
 4313 035f B4040000 		.4byte	.LASF28
 4314 0363 01       		.byte	0x1
 4315 0364 84       		.byte	0x84
 4316 0365 81000000 		.4byte	0x81
 4317 0369 02       		.uleb128 0x2
 4318 036a 91       		.byte	0x91
 4319 036b 73       		.sleb128 -13
 4320 036c 00       		.byte	0
 4321 036d 15       		.uleb128 0x15
 4322 036e 16010000 		.4byte	.LASF41
 4323 0372 01       		.byte	0x1
 4324 0373 90       		.byte	0x90
 4325 0374 81000000 		.4byte	0x81
 4326 0378 00000000 		.4byte	.LFB69
 4327 037c 16000000 		.4byte	.LFE69-.LFB69
 4328 0380 01       		.uleb128 0x1
 4329 0381 9C       		.byte	0x9c
 4330 0382 95030000 		.4byte	0x395
 4331 0386 11       		.uleb128 0x11
 4332 0387 C0010000 		.4byte	.LASF34
 4333 038b 01       		.byte	0x1
 4334 038c 90       		.byte	0x90
 4335 038d 81020000 		.4byte	0x281
 4336 0391 02       		.uleb128 0x2
 4337 0392 91       		.byte	0x91
 4338 0393 74       		.sleb128 -12
 4339 0394 00       		.byte	0
 4340 0395 14       		.uleb128 0x14
 4341 0396 42000000 		.4byte	.LASF42
 4342 039a 01       		.byte	0x1
 4343 039b 9F       		.byte	0x9f
 4344 039c 00000000 		.4byte	.LFB70
 4345 03a0 1A000000 		.4byte	.LFE70-.LFB70
 4346 03a4 01       		.uleb128 0x1
 4347 03a5 9C       		.byte	0x9c
 4348 03a6 C7030000 		.4byte	0x3c7
 4349 03aa 11       		.uleb128 0x11
 4350 03ab C0010000 		.4byte	.LASF34
 4351 03af 01       		.byte	0x1
 4352 03b0 9F       		.byte	0x9f
 4353 03b1 81020000 		.4byte	0x281
 4354 03b5 02       		.uleb128 0x2
 4355 03b6 91       		.byte	0x91
 4356 03b7 74       		.sleb128 -12
 4357 03b8 11       		.uleb128 0x11
 4358 03b9 11010000 		.4byte	.LASF29
 4359 03bd 01       		.byte	0x1
 4360 03be 9F       		.byte	0x9f
 4361 03bf C7030000 		.4byte	0x3c7
 4362 03c3 02       		.uleb128 0x2
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 96


 4363 03c4 91       		.byte	0x91
 4364 03c5 70       		.sleb128 -16
 4365 03c6 00       		.byte	0
 4366 03c7 06       		.uleb128 0x6
 4367 03c8 04       		.byte	0x4
 4368 03c9 15010000 		.4byte	0x115
 4369 03cd 14       		.uleb128 0x14
 4370 03ce C3030000 		.4byte	.LASF43
 4371 03d2 01       		.byte	0x1
 4372 03d3 AD       		.byte	0xad
 4373 03d4 00000000 		.4byte	.LFB71
 4374 03d8 40000000 		.4byte	.LFE71-.LFB71
 4375 03dc 01       		.uleb128 0x1
 4376 03dd 9C       		.byte	0x9c
 4377 03de FF030000 		.4byte	0x3ff
 4378 03e2 11       		.uleb128 0x11
 4379 03e3 C0010000 		.4byte	.LASF34
 4380 03e7 01       		.byte	0x1
 4381 03e8 AD       		.byte	0xad
 4382 03e9 81020000 		.4byte	0x281
 4383 03ed 02       		.uleb128 0x2
 4384 03ee 91       		.byte	0x91
 4385 03ef 74       		.sleb128 -12
 4386 03f0 11       		.uleb128 0x11
 4387 03f1 EA010000 		.4byte	.LASF30
 4388 03f5 01       		.byte	0x1
 4389 03f6 AD       		.byte	0xad
 4390 03f7 81000000 		.4byte	0x81
 4391 03fb 02       		.uleb128 0x2
 4392 03fc 91       		.byte	0x91
 4393 03fd 73       		.sleb128 -13
 4394 03fe 00       		.byte	0
 4395 03ff 15       		.uleb128 0x15
 4396 0400 02020000 		.4byte	.LASF44
 4397 0404 01       		.byte	0x1
 4398 0405 BF       		.byte	0xbf
 4399 0406 81000000 		.4byte	0x81
 4400 040a 00000000 		.4byte	.LFB72
 4401 040e 16000000 		.4byte	.LFE72-.LFB72
 4402 0412 01       		.uleb128 0x1
 4403 0413 9C       		.byte	0x9c
 4404 0414 27040000 		.4byte	0x427
 4405 0418 11       		.uleb128 0x11
 4406 0419 C0010000 		.4byte	.LASF34
 4407 041d 01       		.byte	0x1
 4408 041e BF       		.byte	0xbf
 4409 041f 81020000 		.4byte	0x281
 4410 0423 02       		.uleb128 0x2
 4411 0424 91       		.byte	0x91
 4412 0425 74       		.sleb128 -12
 4413 0426 00       		.byte	0
 4414 0427 14       		.uleb128 0x14
 4415 0428 CB010000 		.4byte	.LASF45
 4416 042c 01       		.byte	0x1
 4417 042d CD       		.byte	0xcd
 4418 042e 00000000 		.4byte	.LFB73
 4419 0432 28000000 		.4byte	.LFE73-.LFB73
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 97


 4420 0436 01       		.uleb128 0x1
 4421 0437 9C       		.byte	0x9c
 4422 0438 59040000 		.4byte	0x459
 4423 043c 11       		.uleb128 0x11
 4424 043d C0010000 		.4byte	.LASF34
 4425 0441 01       		.byte	0x1
 4426 0442 CD       		.byte	0xcd
 4427 0443 81020000 		.4byte	0x281
 4428 0447 02       		.uleb128 0x2
 4429 0448 91       		.byte	0x91
 4430 0449 74       		.sleb128 -12
 4431 044a 11       		.uleb128 0x11
 4432 044b 1D040000 		.4byte	.LASF31
 4433 044f 01       		.byte	0x1
 4434 0450 CD       		.byte	0xcd
 4435 0451 81000000 		.4byte	0x81
 4436 0455 02       		.uleb128 0x2
 4437 0456 91       		.byte	0x91
 4438 0457 73       		.sleb128 -13
 4439 0458 00       		.byte	0
 4440 0459 15       		.uleb128 0x15
 4441 045a A3040000 		.4byte	.LASF46
 4442 045e 01       		.byte	0x1
 4443 045f DB       		.byte	0xdb
 4444 0460 81000000 		.4byte	0x81
 4445 0464 00000000 		.4byte	.LFB74
 4446 0468 16000000 		.4byte	.LFE74-.LFB74
 4447 046c 01       		.uleb128 0x1
 4448 046d 9C       		.byte	0x9c
 4449 046e 81040000 		.4byte	0x481
 4450 0472 11       		.uleb128 0x11
 4451 0473 C0010000 		.4byte	.LASF34
 4452 0477 01       		.byte	0x1
 4453 0478 DB       		.byte	0xdb
 4454 0479 81020000 		.4byte	0x281
 4455 047d 02       		.uleb128 0x2
 4456 047e 91       		.byte	0x91
 4457 047f 74       		.sleb128 -12
 4458 0480 00       		.byte	0
 4459 0481 10       		.uleb128 0x10
 4460 0482 74010000 		.4byte	.LASF47
 4461 0486 01       		.byte	0x1
 4462 0487 E8       		.byte	0xe8
 4463 0488 00000000 		.4byte	.LFB75
 4464 048c 26000000 		.4byte	.LFE75-.LFB75
 4465 0490 01       		.uleb128 0x1
 4466 0491 9C       		.byte	0x9c
 4467 0492 A5040000 		.4byte	0x4a5
 4468 0496 11       		.uleb128 0x11
 4469 0497 C0010000 		.4byte	.LASF34
 4470 049b 01       		.byte	0x1
 4471 049c E8       		.byte	0xe8
 4472 049d 81020000 		.4byte	0x281
 4473 04a1 02       		.uleb128 0x2
 4474 04a2 91       		.byte	0x91
 4475 04a3 74       		.sleb128 -12
 4476 04a4 00       		.byte	0
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 98


 4477 04a5 10       		.uleb128 0x10
 4478 04a6 75030000 		.4byte	.LASF48
 4479 04aa 01       		.byte	0x1
 4480 04ab FB       		.byte	0xfb
 4481 04ac 00000000 		.4byte	.LFB76
 4482 04b0 2C000000 		.4byte	.LFE76-.LFB76
 4483 04b4 01       		.uleb128 0x1
 4484 04b5 9C       		.byte	0x9c
 4485 04b6 FD040000 		.4byte	0x4fd
 4486 04ba 11       		.uleb128 0x11
 4487 04bb C0010000 		.4byte	.LASF34
 4488 04bf 01       		.byte	0x1
 4489 04c0 FB       		.byte	0xfb
 4490 04c1 81020000 		.4byte	0x281
 4491 04c5 02       		.uleb128 0x2
 4492 04c6 91       		.byte	0x91
 4493 04c7 74       		.sleb128 -12
 4494 04c8 16       		.uleb128 0x16
 4495 04c9 783000   		.ascii	"x0\000"
 4496 04cc 01       		.byte	0x1
 4497 04cd FB       		.byte	0xfb
 4498 04ce 68000000 		.4byte	0x68
 4499 04d2 02       		.uleb128 0x2
 4500 04d3 91       		.byte	0x91
 4501 04d4 70       		.sleb128 -16
 4502 04d5 16       		.uleb128 0x16
 4503 04d6 793000   		.ascii	"y0\000"
 4504 04d9 01       		.byte	0x1
 4505 04da FB       		.byte	0xfb
 4506 04db 68000000 		.4byte	0x68
 4507 04df 02       		.uleb128 0x2
 4508 04e0 91       		.byte	0x91
 4509 04e1 6C       		.sleb128 -20
 4510 04e2 16       		.uleb128 0x16
 4511 04e3 783100   		.ascii	"x1\000"
 4512 04e6 01       		.byte	0x1
 4513 04e7 FB       		.byte	0xfb
 4514 04e8 68000000 		.4byte	0x68
 4515 04ec 02       		.uleb128 0x2
 4516 04ed 91       		.byte	0x91
 4517 04ee 68       		.sleb128 -24
 4518 04ef 16       		.uleb128 0x16
 4519 04f0 793100   		.ascii	"y1\000"
 4520 04f3 01       		.byte	0x1
 4521 04f4 FB       		.byte	0xfb
 4522 04f5 68000000 		.4byte	0x68
 4523 04f9 02       		.uleb128 0x2
 4524 04fa 91       		.byte	0x91
 4525 04fb 00       		.sleb128 0
 4526 04fc 00       		.byte	0
 4527 04fd 17       		.uleb128 0x17
 4528 04fe 11020000 		.4byte	.LASF49
 4529 0502 01       		.byte	0x1
 4530 0503 0A01     		.2byte	0x10a
 4531 0505 00000000 		.4byte	.LFB77
 4532 0509 2A000000 		.4byte	.LFE77-.LFB77
 4533 050d 01       		.uleb128 0x1
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 99


 4534 050e 9C       		.byte	0x9c
 4535 050f 3D050000 		.4byte	0x53d
 4536 0513 18       		.uleb128 0x18
 4537 0514 C0010000 		.4byte	.LASF34
 4538 0518 01       		.byte	0x1
 4539 0519 0A01     		.2byte	0x10a
 4540 051b 81020000 		.4byte	0x281
 4541 051f 02       		.uleb128 0x2
 4542 0520 91       		.byte	0x91
 4543 0521 74       		.sleb128 -12
 4544 0522 19       		.uleb128 0x19
 4545 0523 7800     		.ascii	"x\000"
 4546 0525 01       		.byte	0x1
 4547 0526 0A01     		.2byte	0x10a
 4548 0528 68000000 		.4byte	0x68
 4549 052c 02       		.uleb128 0x2
 4550 052d 91       		.byte	0x91
 4551 052e 70       		.sleb128 -16
 4552 052f 19       		.uleb128 0x19
 4553 0530 7900     		.ascii	"y\000"
 4554 0532 01       		.byte	0x1
 4555 0533 0A01     		.2byte	0x10a
 4556 0535 68000000 		.4byte	0x68
 4557 0539 02       		.uleb128 0x2
 4558 053a 91       		.byte	0x91
 4559 053b 6C       		.sleb128 -20
 4560 053c 00       		.byte	0
 4561 053d 17       		.uleb128 0x17
 4562 053e D2030000 		.4byte	.LASF50
 4563 0542 01       		.byte	0x1
 4564 0543 1B01     		.2byte	0x11b
 4565 0545 00000000 		.4byte	.LFB78
 4566 0549 1A010000 		.4byte	.LFE78-.LFB78
 4567 054d 01       		.uleb128 0x1
 4568 054e 9C       		.byte	0x9c
 4569 054f AA050000 		.4byte	0x5aa
 4570 0553 18       		.uleb128 0x18
 4571 0554 C0010000 		.4byte	.LASF34
 4572 0558 01       		.byte	0x1
 4573 0559 1B01     		.2byte	0x11b
 4574 055b 81020000 		.4byte	0x281
 4575 055f 02       		.uleb128 0x2
 4576 0560 91       		.byte	0x91
 4577 0561 64       		.sleb128 -28
 4578 0562 19       		.uleb128 0x19
 4579 0563 783000   		.ascii	"x0\000"
 4580 0566 01       		.byte	0x1
 4581 0567 1B01     		.2byte	0x11b
 4582 0569 68000000 		.4byte	0x68
 4583 056d 02       		.uleb128 0x2
 4584 056e 91       		.byte	0x91
 4585 056f 60       		.sleb128 -32
 4586 0570 19       		.uleb128 0x19
 4587 0571 793000   		.ascii	"y0\000"
 4588 0574 01       		.byte	0x1
 4589 0575 1B01     		.2byte	0x11b
 4590 0577 68000000 		.4byte	0x68
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 100


 4591 057b 02       		.uleb128 0x2
 4592 057c 91       		.byte	0x91
 4593 057d 5C       		.sleb128 -36
 4594 057e 19       		.uleb128 0x19
 4595 057f 783100   		.ascii	"x1\000"
 4596 0582 01       		.byte	0x1
 4597 0583 1B01     		.2byte	0x11b
 4598 0585 68000000 		.4byte	0x68
 4599 0589 02       		.uleb128 0x2
 4600 058a 91       		.byte	0x91
 4601 058b 58       		.sleb128 -40
 4602 058c 19       		.uleb128 0x19
 4603 058d 793100   		.ascii	"y1\000"
 4604 0590 01       		.byte	0x1
 4605 0591 1B01     		.2byte	0x11b
 4606 0593 68000000 		.4byte	0x68
 4607 0597 02       		.uleb128 0x2
 4608 0598 91       		.byte	0x91
 4609 0599 00       		.sleb128 0
 4610 059a 1A       		.uleb128 0x1a
 4611 059b 726F7400 		.ascii	"rot\000"
 4612 059f 01       		.byte	0x1
 4613 05a0 2B01     		.2byte	0x12b
 4614 05a2 81000000 		.4byte	0x81
 4615 05a6 02       		.uleb128 0x2
 4616 05a7 91       		.byte	0x91
 4617 05a8 6F       		.sleb128 -17
 4618 05a9 00       		.byte	0
 4619 05aa 17       		.uleb128 0x17
 4620 05ab E9030000 		.4byte	.LASF51
 4621 05af 01       		.byte	0x1
 4622 05b0 4E01     		.2byte	0x14e
 4623 05b2 00000000 		.4byte	.LFB79
 4624 05b6 2C000000 		.4byte	.LFE79-.LFB79
 4625 05ba 01       		.uleb128 0x1
 4626 05bb 9C       		.byte	0x9c
 4627 05bc 08060000 		.4byte	0x608
 4628 05c0 18       		.uleb128 0x18
 4629 05c1 C0010000 		.4byte	.LASF34
 4630 05c5 01       		.byte	0x1
 4631 05c6 4E01     		.2byte	0x14e
 4632 05c8 81020000 		.4byte	0x281
 4633 05cc 02       		.uleb128 0x2
 4634 05cd 91       		.byte	0x91
 4635 05ce 74       		.sleb128 -12
 4636 05cf 19       		.uleb128 0x19
 4637 05d0 783000   		.ascii	"x0\000"
 4638 05d3 01       		.byte	0x1
 4639 05d4 4E01     		.2byte	0x14e
 4640 05d6 68000000 		.4byte	0x68
 4641 05da 02       		.uleb128 0x2
 4642 05db 91       		.byte	0x91
 4643 05dc 70       		.sleb128 -16
 4644 05dd 19       		.uleb128 0x19
 4645 05de 793000   		.ascii	"y0\000"
 4646 05e1 01       		.byte	0x1
 4647 05e2 4E01     		.2byte	0x14e
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 101


 4648 05e4 68000000 		.4byte	0x68
 4649 05e8 02       		.uleb128 0x2
 4650 05e9 91       		.byte	0x91
 4651 05ea 6C       		.sleb128 -20
 4652 05eb 19       		.uleb128 0x19
 4653 05ec 783100   		.ascii	"x1\000"
 4654 05ef 01       		.byte	0x1
 4655 05f0 4E01     		.2byte	0x14e
 4656 05f2 68000000 		.4byte	0x68
 4657 05f6 02       		.uleb128 0x2
 4658 05f7 91       		.byte	0x91
 4659 05f8 68       		.sleb128 -24
 4660 05f9 19       		.uleb128 0x19
 4661 05fa 793100   		.ascii	"y1\000"
 4662 05fd 01       		.byte	0x1
 4663 05fe 4E01     		.2byte	0x14e
 4664 0600 68000000 		.4byte	0x68
 4665 0604 02       		.uleb128 0x2
 4666 0605 91       		.byte	0x91
 4667 0606 00       		.sleb128 0
 4668 0607 00       		.byte	0
 4669 0608 17       		.uleb128 0x17
 4670 0609 F5020000 		.4byte	.LASF52
 4671 060d 01       		.byte	0x1
 4672 060e 6401     		.2byte	0x164
 4673 0610 00000000 		.4byte	.LFB80
 4674 0614 FC000000 		.4byte	.LFE80-.LFB80
 4675 0618 01       		.uleb128 0x1
 4676 0619 9C       		.byte	0x9c
 4677 061a 73060000 		.4byte	0x673
 4678 061e 18       		.uleb128 0x18
 4679 061f C0010000 		.4byte	.LASF34
 4680 0623 01       		.byte	0x1
 4681 0624 6401     		.2byte	0x164
 4682 0626 81020000 		.4byte	0x281
 4683 062a 02       		.uleb128 0x2
 4684 062b 91       		.byte	0x91
 4685 062c 74       		.sleb128 -12
 4686 062d 19       		.uleb128 0x19
 4687 062e 783000   		.ascii	"x0\000"
 4688 0631 01       		.byte	0x1
 4689 0632 6401     		.2byte	0x164
 4690 0634 68000000 		.4byte	0x68
 4691 0638 02       		.uleb128 0x2
 4692 0639 91       		.byte	0x91
 4693 063a 70       		.sleb128 -16
 4694 063b 19       		.uleb128 0x19
 4695 063c 793000   		.ascii	"y0\000"
 4696 063f 01       		.byte	0x1
 4697 0640 6401     		.2byte	0x164
 4698 0642 68000000 		.4byte	0x68
 4699 0646 02       		.uleb128 0x2
 4700 0647 91       		.byte	0x91
 4701 0648 6C       		.sleb128 -20
 4702 0649 19       		.uleb128 0x19
 4703 064a 783100   		.ascii	"x1\000"
 4704 064d 01       		.byte	0x1
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 102


 4705 064e 6401     		.2byte	0x164
 4706 0650 68000000 		.4byte	0x68
 4707 0654 02       		.uleb128 0x2
 4708 0655 91       		.byte	0x91
 4709 0656 68       		.sleb128 -24
 4710 0657 19       		.uleb128 0x19
 4711 0658 793100   		.ascii	"y1\000"
 4712 065b 01       		.byte	0x1
 4713 065c 6401     		.2byte	0x164
 4714 065e 68000000 		.4byte	0x68
 4715 0662 02       		.uleb128 0x2
 4716 0663 91       		.byte	0x91
 4717 0664 00       		.sleb128 0
 4718 0665 19       		.uleb128 0x19
 4719 0666 7200     		.ascii	"r\000"
 4720 0668 01       		.byte	0x1
 4721 0669 6401     		.2byte	0x164
 4722 066b 68000000 		.4byte	0x68
 4723 066f 02       		.uleb128 0x2
 4724 0670 91       		.byte	0x91
 4725 0671 04       		.sleb128 4
 4726 0672 00       		.byte	0
 4727 0673 17       		.uleb128 0x17
 4728 0674 63000000 		.4byte	.LASF53
 4729 0678 01       		.byte	0x1
 4730 0679 7D01     		.2byte	0x17d
 4731 067b 00000000 		.4byte	.LFB81
 4732 067f 58000000 		.4byte	.LFE81-.LFB81
 4733 0683 01       		.uleb128 0x1
 4734 0684 9C       		.byte	0x9c
 4735 0685 D1060000 		.4byte	0x6d1
 4736 0689 18       		.uleb128 0x18
 4737 068a C0010000 		.4byte	.LASF34
 4738 068e 01       		.byte	0x1
 4739 068f 7D01     		.2byte	0x17d
 4740 0691 81020000 		.4byte	0x281
 4741 0695 02       		.uleb128 0x2
 4742 0696 91       		.byte	0x91
 4743 0697 74       		.sleb128 -12
 4744 0698 19       		.uleb128 0x19
 4745 0699 783000   		.ascii	"x0\000"
 4746 069c 01       		.byte	0x1
 4747 069d 7D01     		.2byte	0x17d
 4748 069f 68000000 		.4byte	0x68
 4749 06a3 02       		.uleb128 0x2
 4750 06a4 91       		.byte	0x91
 4751 06a5 70       		.sleb128 -16
 4752 06a6 19       		.uleb128 0x19
 4753 06a7 793000   		.ascii	"y0\000"
 4754 06aa 01       		.byte	0x1
 4755 06ab 7D01     		.2byte	0x17d
 4756 06ad 68000000 		.4byte	0x68
 4757 06b1 02       		.uleb128 0x2
 4758 06b2 91       		.byte	0x91
 4759 06b3 6C       		.sleb128 -20
 4760 06b4 19       		.uleb128 0x19
 4761 06b5 783100   		.ascii	"x1\000"
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 103


 4762 06b8 01       		.byte	0x1
 4763 06b9 7D01     		.2byte	0x17d
 4764 06bb 68000000 		.4byte	0x68
 4765 06bf 02       		.uleb128 0x2
 4766 06c0 91       		.byte	0x91
 4767 06c1 68       		.sleb128 -24
 4768 06c2 19       		.uleb128 0x19
 4769 06c3 793100   		.ascii	"y1\000"
 4770 06c6 01       		.byte	0x1
 4771 06c7 7D01     		.2byte	0x17d
 4772 06c9 68000000 		.4byte	0x68
 4773 06cd 02       		.uleb128 0x2
 4774 06ce 91       		.byte	0x91
 4775 06cf 00       		.sleb128 0
 4776 06d0 00       		.byte	0
 4777 06d1 17       		.uleb128 0x17
 4778 06d2 38030000 		.4byte	.LASF54
 4779 06d6 01       		.byte	0x1
 4780 06d7 9701     		.2byte	0x197
 4781 06d9 00000000 		.4byte	.LFB82
 4782 06dd FC000000 		.4byte	.LFE82-.LFB82
 4783 06e1 01       		.uleb128 0x1
 4784 06e2 9C       		.byte	0x9c
 4785 06e3 3C070000 		.4byte	0x73c
 4786 06e7 18       		.uleb128 0x18
 4787 06e8 C0010000 		.4byte	.LASF34
 4788 06ec 01       		.byte	0x1
 4789 06ed 9701     		.2byte	0x197
 4790 06ef 81020000 		.4byte	0x281
 4791 06f3 02       		.uleb128 0x2
 4792 06f4 91       		.byte	0x91
 4793 06f5 74       		.sleb128 -12
 4794 06f6 19       		.uleb128 0x19
 4795 06f7 783000   		.ascii	"x0\000"
 4796 06fa 01       		.byte	0x1
 4797 06fb 9701     		.2byte	0x197
 4798 06fd 68000000 		.4byte	0x68
 4799 0701 02       		.uleb128 0x2
 4800 0702 91       		.byte	0x91
 4801 0703 70       		.sleb128 -16
 4802 0704 19       		.uleb128 0x19
 4803 0705 793000   		.ascii	"y0\000"
 4804 0708 01       		.byte	0x1
 4805 0709 9701     		.2byte	0x197
 4806 070b 68000000 		.4byte	0x68
 4807 070f 02       		.uleb128 0x2
 4808 0710 91       		.byte	0x91
 4809 0711 6C       		.sleb128 -20
 4810 0712 19       		.uleb128 0x19
 4811 0713 783100   		.ascii	"x1\000"
 4812 0716 01       		.byte	0x1
 4813 0717 9701     		.2byte	0x197
 4814 0719 68000000 		.4byte	0x68
 4815 071d 02       		.uleb128 0x2
 4816 071e 91       		.byte	0x91
 4817 071f 68       		.sleb128 -24
 4818 0720 19       		.uleb128 0x19
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 104


 4819 0721 793100   		.ascii	"y1\000"
 4820 0724 01       		.byte	0x1
 4821 0725 9701     		.2byte	0x197
 4822 0727 68000000 		.4byte	0x68
 4823 072b 02       		.uleb128 0x2
 4824 072c 91       		.byte	0x91
 4825 072d 00       		.sleb128 0
 4826 072e 19       		.uleb128 0x19
 4827 072f 7200     		.ascii	"r\000"
 4828 0731 01       		.byte	0x1
 4829 0732 9701     		.2byte	0x197
 4830 0734 68000000 		.4byte	0x68
 4831 0738 02       		.uleb128 0x2
 4832 0739 91       		.byte	0x91
 4833 073a 04       		.sleb128 4
 4834 073b 00       		.byte	0
 4835 073c 17       		.uleb128 0x17
 4836 073d 8C040000 		.4byte	.LASF55
 4837 0741 01       		.byte	0x1
 4838 0742 AF01     		.2byte	0x1af
 4839 0744 00000000 		.4byte	.LFB83
 4840 0748 3C000000 		.4byte	.LFE83-.LFB83
 4841 074c 01       		.uleb128 0x1
 4842 074d 9C       		.byte	0x9c
 4843 074e 8B070000 		.4byte	0x78b
 4844 0752 18       		.uleb128 0x18
 4845 0753 C0010000 		.4byte	.LASF34
 4846 0757 01       		.byte	0x1
 4847 0758 AF01     		.2byte	0x1af
 4848 075a 81020000 		.4byte	0x281
 4849 075e 02       		.uleb128 0x2
 4850 075f 91       		.byte	0x91
 4851 0760 74       		.sleb128 -12
 4852 0761 19       		.uleb128 0x19
 4853 0762 786300   		.ascii	"xc\000"
 4854 0765 01       		.byte	0x1
 4855 0766 AF01     		.2byte	0x1af
 4856 0768 68000000 		.4byte	0x68
 4857 076c 02       		.uleb128 0x2
 4858 076d 91       		.byte	0x91
 4859 076e 70       		.sleb128 -16
 4860 076f 19       		.uleb128 0x19
 4861 0770 796300   		.ascii	"yc\000"
 4862 0773 01       		.byte	0x1
 4863 0774 AF01     		.2byte	0x1af
 4864 0776 68000000 		.4byte	0x68
 4865 077a 02       		.uleb128 0x2
 4866 077b 91       		.byte	0x91
 4867 077c 6C       		.sleb128 -20
 4868 077d 19       		.uleb128 0x19
 4869 077e 7200     		.ascii	"r\000"
 4870 0780 01       		.byte	0x1
 4871 0781 AF01     		.2byte	0x1af
 4872 0783 68000000 		.4byte	0x68
 4873 0787 02       		.uleb128 0x2
 4874 0788 91       		.byte	0x91
 4875 0789 68       		.sleb128 -24
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 105


 4876 078a 00       		.byte	0
 4877 078b 17       		.uleb128 0x17
 4878 078c 34020000 		.4byte	.LASF56
 4879 0790 01       		.byte	0x1
 4880 0791 C201     		.2byte	0x1c2
 4881 0793 00000000 		.4byte	.LFB84
 4882 0797 7E000000 		.4byte	.LFE84-.LFB84
 4883 079b 01       		.uleb128 0x1
 4884 079c 9C       		.byte	0x9c
 4885 079d 05080000 		.4byte	0x805
 4886 07a1 18       		.uleb128 0x18
 4887 07a2 C0010000 		.4byte	.LASF34
 4888 07a6 01       		.byte	0x1
 4889 07a7 C201     		.2byte	0x1c2
 4890 07a9 81020000 		.4byte	0x281
 4891 07ad 02       		.uleb128 0x2
 4892 07ae 91       		.byte	0x91
 4893 07af 6C       		.sleb128 -20
 4894 07b0 19       		.uleb128 0x19
 4895 07b1 786300   		.ascii	"xc\000"
 4896 07b4 01       		.byte	0x1
 4897 07b5 C201     		.2byte	0x1c2
 4898 07b7 68000000 		.4byte	0x68
 4899 07bb 02       		.uleb128 0x2
 4900 07bc 91       		.byte	0x91
 4901 07bd 68       		.sleb128 -24
 4902 07be 19       		.uleb128 0x19
 4903 07bf 796300   		.ascii	"yc\000"
 4904 07c2 01       		.byte	0x1
 4905 07c3 C201     		.2byte	0x1c2
 4906 07c5 68000000 		.4byte	0x68
 4907 07c9 02       		.uleb128 0x2
 4908 07ca 91       		.byte	0x91
 4909 07cb 64       		.sleb128 -28
 4910 07cc 19       		.uleb128 0x19
 4911 07cd 7200     		.ascii	"r\000"
 4912 07cf 01       		.byte	0x1
 4913 07d0 C201     		.2byte	0x1c2
 4914 07d2 68000000 		.4byte	0x68
 4915 07d6 02       		.uleb128 0x2
 4916 07d7 91       		.byte	0x91
 4917 07d8 60       		.sleb128 -32
 4918 07d9 19       		.uleb128 0x19
 4919 07da 613000   		.ascii	"a0\000"
 4920 07dd 01       		.byte	0x1
 4921 07de C201     		.2byte	0x1c2
 4922 07e0 68000000 		.4byte	0x68
 4923 07e4 02       		.uleb128 0x2
 4924 07e5 91       		.byte	0x91
 4925 07e6 00       		.sleb128 0
 4926 07e7 19       		.uleb128 0x19
 4927 07e8 613100   		.ascii	"a1\000"
 4928 07eb 01       		.byte	0x1
 4929 07ec C201     		.2byte	0x1c2
 4930 07ee 68000000 		.4byte	0x68
 4931 07f2 02       		.uleb128 0x2
 4932 07f3 91       		.byte	0x91
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 106


 4933 07f4 04       		.sleb128 4
 4934 07f5 1B       		.uleb128 0x1b
 4935 07f6 DF020000 		.4byte	.LASF57
 4936 07fa 01       		.byte	0x1
 4937 07fb C701     		.2byte	0x1c7
 4938 07fd 81000000 		.4byte	0x81
 4939 0801 02       		.uleb128 0x2
 4940 0802 91       		.byte	0x91
 4941 0803 77       		.sleb128 -9
 4942 0804 00       		.byte	0
 4943 0805 17       		.uleb128 0x17
 4944 0806 A9030000 		.4byte	.LASF58
 4945 080a 01       		.byte	0x1
 4946 080b D601     		.2byte	0x1d6
 4947 080d 00000000 		.4byte	.LFB85
 4948 0811 2A000000 		.4byte	.LFE85-.LFB85
 4949 0815 01       		.uleb128 0x1
 4950 0816 9C       		.byte	0x9c
 4951 0817 54080000 		.4byte	0x854
 4952 081b 18       		.uleb128 0x18
 4953 081c C0010000 		.4byte	.LASF34
 4954 0820 01       		.byte	0x1
 4955 0821 D601     		.2byte	0x1d6
 4956 0823 81020000 		.4byte	0x281
 4957 0827 02       		.uleb128 0x2
 4958 0828 91       		.byte	0x91
 4959 0829 74       		.sleb128 -12
 4960 082a 19       		.uleb128 0x19
 4961 082b 786300   		.ascii	"xc\000"
 4962 082e 01       		.byte	0x1
 4963 082f D601     		.2byte	0x1d6
 4964 0831 68000000 		.4byte	0x68
 4965 0835 02       		.uleb128 0x2
 4966 0836 91       		.byte	0x91
 4967 0837 70       		.sleb128 -16
 4968 0838 19       		.uleb128 0x19
 4969 0839 796300   		.ascii	"yc\000"
 4970 083c 01       		.byte	0x1
 4971 083d D601     		.2byte	0x1d6
 4972 083f 68000000 		.4byte	0x68
 4973 0843 02       		.uleb128 0x2
 4974 0844 91       		.byte	0x91
 4975 0845 6C       		.sleb128 -20
 4976 0846 19       		.uleb128 0x19
 4977 0847 7200     		.ascii	"r\000"
 4978 0849 01       		.byte	0x1
 4979 084a D601     		.2byte	0x1d6
 4980 084c 68000000 		.4byte	0x68
 4981 0850 02       		.uleb128 0x2
 4982 0851 91       		.byte	0x91
 4983 0852 68       		.sleb128 -24
 4984 0853 00       		.byte	0
 4985 0854 17       		.uleb128 0x17
 4986 0855 20020000 		.4byte	.LASF59
 4987 0859 01       		.byte	0x1
 4988 085a E701     		.2byte	0x1e7
 4989 085c 00000000 		.4byte	.LFB86
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 107


 4990 0860 2C000000 		.4byte	.LFE86-.LFB86
 4991 0864 01       		.uleb128 0x1
 4992 0865 9C       		.byte	0x9c
 4993 0866 96080000 		.4byte	0x896
 4994 086a 18       		.uleb128 0x18
 4995 086b C0010000 		.4byte	.LASF34
 4996 086f 01       		.byte	0x1
 4997 0870 E701     		.2byte	0x1e7
 4998 0872 81020000 		.4byte	0x281
 4999 0876 02       		.uleb128 0x2
 5000 0877 91       		.byte	0x91
 5001 0878 74       		.sleb128 -12
 5002 0879 19       		.uleb128 0x19
 5003 087a 786300   		.ascii	"xc\000"
 5004 087d 01       		.byte	0x1
 5005 087e E701     		.2byte	0x1e7
 5006 0880 68000000 		.4byte	0x68
 5007 0884 02       		.uleb128 0x2
 5008 0885 91       		.byte	0x91
 5009 0886 70       		.sleb128 -16
 5010 0887 19       		.uleb128 0x19
 5011 0888 796300   		.ascii	"yc\000"
 5012 088b 01       		.byte	0x1
 5013 088c E701     		.2byte	0x1e7
 5014 088e 68000000 		.4byte	0x68
 5015 0892 02       		.uleb128 0x2
 5016 0893 91       		.byte	0x91
 5017 0894 6C       		.sleb128 -20
 5018 0895 00       		.byte	0
 5019 0896 17       		.uleb128 0x17
 5020 0897 35000000 		.4byte	.LASF60
 5021 089b 01       		.byte	0x1
 5022 089c FA01     		.2byte	0x1fa
 5023 089e 00000000 		.4byte	.LFB87
 5024 08a2 6C000000 		.4byte	.LFE87-.LFB87
 5025 08a6 01       		.uleb128 0x1
 5026 08a7 9C       		.byte	0x9c
 5027 08a8 10090000 		.4byte	0x910
 5028 08ac 18       		.uleb128 0x18
 5029 08ad C0010000 		.4byte	.LASF34
 5030 08b1 01       		.byte	0x1
 5031 08b2 FA01     		.2byte	0x1fa
 5032 08b4 81020000 		.4byte	0x281
 5033 08b8 02       		.uleb128 0x2
 5034 08b9 91       		.byte	0x91
 5035 08ba 6C       		.sleb128 -20
 5036 08bb 19       		.uleb128 0x19
 5037 08bc 786300   		.ascii	"xc\000"
 5038 08bf 01       		.byte	0x1
 5039 08c0 FA01     		.2byte	0x1fa
 5040 08c2 68000000 		.4byte	0x68
 5041 08c6 02       		.uleb128 0x2
 5042 08c7 91       		.byte	0x91
 5043 08c8 68       		.sleb128 -24
 5044 08c9 19       		.uleb128 0x19
 5045 08ca 796300   		.ascii	"yc\000"
 5046 08cd 01       		.byte	0x1
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 108


 5047 08ce FA01     		.2byte	0x1fa
 5048 08d0 68000000 		.4byte	0x68
 5049 08d4 02       		.uleb128 0x2
 5050 08d5 91       		.byte	0x91
 5051 08d6 64       		.sleb128 -28
 5052 08d7 19       		.uleb128 0x19
 5053 08d8 7200     		.ascii	"r\000"
 5054 08da 01       		.byte	0x1
 5055 08db FA01     		.2byte	0x1fa
 5056 08dd 68000000 		.4byte	0x68
 5057 08e1 02       		.uleb128 0x2
 5058 08e2 91       		.byte	0x91
 5059 08e3 60       		.sleb128 -32
 5060 08e4 19       		.uleb128 0x19
 5061 08e5 613000   		.ascii	"a0\000"
 5062 08e8 01       		.byte	0x1
 5063 08e9 FA01     		.2byte	0x1fa
 5064 08eb 68000000 		.4byte	0x68
 5065 08ef 02       		.uleb128 0x2
 5066 08f0 91       		.byte	0x91
 5067 08f1 00       		.sleb128 0
 5068 08f2 19       		.uleb128 0x19
 5069 08f3 613100   		.ascii	"a1\000"
 5070 08f6 01       		.byte	0x1
 5071 08f7 FA01     		.2byte	0x1fa
 5072 08f9 68000000 		.4byte	0x68
 5073 08fd 02       		.uleb128 0x2
 5074 08fe 91       		.byte	0x91
 5075 08ff 04       		.sleb128 4
 5076 0900 1B       		.uleb128 0x1b
 5077 0901 DF020000 		.4byte	.LASF57
 5078 0905 01       		.byte	0x1
 5079 0906 FF01     		.2byte	0x1ff
 5080 0908 81000000 		.4byte	0x81
 5081 090c 02       		.uleb128 0x2
 5082 090d 91       		.byte	0x91
 5083 090e 77       		.sleb128 -9
 5084 090f 00       		.byte	0
 5085 0910 17       		.uleb128 0x17
 5086 0911 16000000 		.4byte	.LASF61
 5087 0915 01       		.byte	0x1
 5088 0916 1402     		.2byte	0x214
 5089 0918 00000000 		.4byte	.LFB88
 5090 091c 3C020000 		.4byte	.LFE88-.LFB88
 5091 0920 01       		.uleb128 0x1
 5092 0921 9C       		.byte	0x9c
 5093 0922 BC090000 		.4byte	0x9bc
 5094 0926 18       		.uleb128 0x18
 5095 0927 C0010000 		.4byte	.LASF34
 5096 092b 01       		.byte	0x1
 5097 092c 1402     		.2byte	0x214
 5098 092e 81020000 		.4byte	0x281
 5099 0932 02       		.uleb128 0x2
 5100 0933 91       		.byte	0x91
 5101 0934 5C       		.sleb128 -36
 5102 0935 19       		.uleb128 0x19
 5103 0936 783000   		.ascii	"x0\000"
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 109


 5104 0939 01       		.byte	0x1
 5105 093a 1402     		.2byte	0x214
 5106 093c 68000000 		.4byte	0x68
 5107 0940 02       		.uleb128 0x2
 5108 0941 91       		.byte	0x91
 5109 0942 58       		.sleb128 -40
 5110 0943 19       		.uleb128 0x19
 5111 0944 793000   		.ascii	"y0\000"
 5112 0947 01       		.byte	0x1
 5113 0948 1402     		.2byte	0x214
 5114 094a 68000000 		.4byte	0x68
 5115 094e 02       		.uleb128 0x2
 5116 094f 91       		.byte	0x91
 5117 0950 54       		.sleb128 -44
 5118 0951 18       		.uleb128 0x18
 5119 0952 85010000 		.4byte	.LASF62
 5120 0956 01       		.byte	0x1
 5121 0957 1402     		.2byte	0x214
 5122 0959 BC090000 		.4byte	0x9bc
 5123 095d 02       		.uleb128 0x2
 5124 095e 91       		.byte	0x91
 5125 095f 50       		.sleb128 -48
 5126 0960 18       		.uleb128 0x18
 5127 0961 99030000 		.4byte	.LASF18
 5128 0965 01       		.byte	0x1
 5129 0966 1402     		.2byte	0x214
 5130 0968 8D000000 		.4byte	0x8d
 5131 096c 02       		.uleb128 0x2
 5132 096d 91       		.byte	0x91
 5133 096e 00       		.sleb128 0
 5134 096f 18       		.uleb128 0x18
 5135 0970 CB020000 		.4byte	.LASF19
 5136 0974 01       		.byte	0x1
 5137 0975 1402     		.2byte	0x214
 5138 0977 8D000000 		.4byte	0x8d
 5139 097b 02       		.uleb128 0x2
 5140 097c 91       		.byte	0x91
 5141 097d 04       		.sleb128 4
 5142 097e 1B       		.uleb128 0x1b
 5143 097f 4F000000 		.4byte	.LASF27
 5144 0983 01       		.byte	0x1
 5145 0984 1502     		.2byte	0x215
 5146 0986 81000000 		.4byte	0x81
 5147 098a 02       		.uleb128 0x2
 5148 098b 91       		.byte	0x91
 5149 098c 67       		.sleb128 -25
 5150 098d 12       		.uleb128 0x12
 5151 098e 0E000000 		.4byte	.LBB3
 5152 0992 20020000 		.4byte	.LBE3-.LBB3
 5153 0996 1A       		.uleb128 0x1a
 5154 0997 6900     		.ascii	"i\000"
 5155 0999 01       		.byte	0x1
 5156 099a 1602     		.2byte	0x216
 5157 099c 68000000 		.4byte	0x68
 5158 09a0 02       		.uleb128 0x2
 5159 09a1 91       		.byte	0x91
 5160 09a2 6C       		.sleb128 -20
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 110


 5161 09a3 12       		.uleb128 0x12
 5162 09a4 14000000 		.4byte	.LBB4
 5163 09a8 0A020000 		.4byte	.LBE4-.LBB4
 5164 09ac 1A       		.uleb128 0x1a
 5165 09ad 6A00     		.ascii	"j\000"
 5166 09af 01       		.byte	0x1
 5167 09b0 1702     		.2byte	0x217
 5168 09b2 68000000 		.4byte	0x68
 5169 09b6 02       		.uleb128 0x2
 5170 09b7 91       		.byte	0x91
 5171 09b8 68       		.sleb128 -24
 5172 09b9 00       		.byte	0
 5173 09ba 00       		.byte	0
 5174 09bb 00       		.byte	0
 5175 09bc 06       		.uleb128 0x6
 5176 09bd 04       		.byte	0x4
 5177 09be F5000000 		.4byte	0xf5
 5178 09c2 17       		.uleb128 0x17
 5179 09c3 A8010000 		.4byte	.LASF63
 5180 09c7 01       		.byte	0x1
 5181 09c8 4302     		.2byte	0x243
 5182 09ca 00000000 		.4byte	.LFB89
 5183 09ce 76000000 		.4byte	.LFE89-.LFB89
 5184 09d2 01       		.uleb128 0x1
 5185 09d3 9C       		.byte	0x9c
 5186 09d4 2D0A0000 		.4byte	0xa2d
 5187 09d8 18       		.uleb128 0x18
 5188 09d9 C0010000 		.4byte	.LASF34
 5189 09dd 01       		.byte	0x1
 5190 09de 4302     		.2byte	0x243
 5191 09e0 81020000 		.4byte	0x281
 5192 09e4 02       		.uleb128 0x2
 5193 09e5 91       		.byte	0x91
 5194 09e6 6C       		.sleb128 -20
 5195 09e7 19       		.uleb128 0x19
 5196 09e8 783000   		.ascii	"x0\000"
 5197 09eb 01       		.byte	0x1
 5198 09ec 4302     		.2byte	0x243
 5199 09ee 68000000 		.4byte	0x68
 5200 09f2 02       		.uleb128 0x2
 5201 09f3 91       		.byte	0x91
 5202 09f4 68       		.sleb128 -24
 5203 09f5 19       		.uleb128 0x19
 5204 09f6 793000   		.ascii	"y0\000"
 5205 09f9 01       		.byte	0x1
 5206 09fa 4302     		.2byte	0x243
 5207 09fc 68000000 		.4byte	0x68
 5208 0a00 02       		.uleb128 0x2
 5209 0a01 91       		.byte	0x91
 5210 0a02 64       		.sleb128 -28
 5211 0a03 19       		.uleb128 0x19
 5212 0a04 6300     		.ascii	"c\000"
 5213 0a06 01       		.byte	0x1
 5214 0a07 4302     		.2byte	0x243
 5215 0a09 C2000000 		.4byte	0xc2
 5216 0a0d 02       		.uleb128 0x2
 5217 0a0e 91       		.byte	0x91
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 111


 5218 0a0f 63       		.sleb128 -29
 5219 0a10 1B       		.uleb128 0x1b
 5220 0a11 EA010000 		.4byte	.LASF30
 5221 0a15 01       		.byte	0x1
 5222 0a16 4402     		.2byte	0x244
 5223 0a18 81000000 		.4byte	0x81
 5224 0a1c 02       		.uleb128 0x2
 5225 0a1d 91       		.byte	0x91
 5226 0a1e 77       		.sleb128 -9
 5227 0a1f 1A       		.uleb128 0x1a
 5228 0a20 6900     		.ascii	"i\000"
 5229 0a22 01       		.byte	0x1
 5230 0a23 4602     		.2byte	0x246
 5231 0a25 68000000 		.4byte	0x68
 5232 0a29 02       		.uleb128 0x2
 5233 0a2a 91       		.byte	0x91
 5234 0a2b 70       		.sleb128 -16
 5235 0a2c 00       		.byte	0
 5236 0a2d 17       		.uleb128 0x17
 5237 0a2e 30010000 		.4byte	.LASF64
 5238 0a32 01       		.byte	0x1
 5239 0a33 5D02     		.2byte	0x25d
 5240 0a35 00000000 		.4byte	.LFB90
 5241 0a39 7A000000 		.4byte	.LFE90-.LFB90
 5242 0a3d 01       		.uleb128 0x1
 5243 0a3e 9C       		.byte	0x9c
 5244 0a3f 960A0000 		.4byte	0xa96
 5245 0a43 18       		.uleb128 0x18
 5246 0a44 C0010000 		.4byte	.LASF34
 5247 0a48 01       		.byte	0x1
 5248 0a49 5D02     		.2byte	0x25d
 5249 0a4b 81020000 		.4byte	0x281
 5250 0a4f 02       		.uleb128 0x2
 5251 0a50 91       		.byte	0x91
 5252 0a51 6C       		.sleb128 -20
 5253 0a52 19       		.uleb128 0x19
 5254 0a53 783000   		.ascii	"x0\000"
 5255 0a56 01       		.byte	0x1
 5256 0a57 5D02     		.2byte	0x25d
 5257 0a59 68000000 		.4byte	0x68
 5258 0a5d 02       		.uleb128 0x2
 5259 0a5e 91       		.byte	0x91
 5260 0a5f 68       		.sleb128 -24
 5261 0a60 19       		.uleb128 0x19
 5262 0a61 793000   		.ascii	"y0\000"
 5263 0a64 01       		.byte	0x1
 5264 0a65 5D02     		.2byte	0x25d
 5265 0a67 68000000 		.4byte	0x68
 5266 0a6b 02       		.uleb128 0x2
 5267 0a6c 91       		.byte	0x91
 5268 0a6d 64       		.sleb128 -28
 5269 0a6e 19       		.uleb128 0x19
 5270 0a6f 7300     		.ascii	"s\000"
 5271 0a71 01       		.byte	0x1
 5272 0a72 5D02     		.2byte	0x25d
 5273 0a74 BC000000 		.4byte	0xbc
 5274 0a78 02       		.uleb128 0x2
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 112


 5275 0a79 91       		.byte	0x91
 5276 0a7a 60       		.sleb128 -32
 5277 0a7b 1A       		.uleb128 0x1a
 5278 0a7c 6900     		.ascii	"i\000"
 5279 0a7e 01       		.byte	0x1
 5280 0a7f 5E02     		.2byte	0x25e
 5281 0a81 68000000 		.4byte	0x68
 5282 0a85 02       		.uleb128 0x2
 5283 0a86 91       		.byte	0x91
 5284 0a87 74       		.sleb128 -12
 5285 0a88 1A       		.uleb128 0x1a
 5286 0a89 6A00     		.ascii	"j\000"
 5287 0a8b 01       		.byte	0x1
 5288 0a8c 5E02     		.2byte	0x25e
 5289 0a8e 68000000 		.4byte	0x68
 5290 0a92 02       		.uleb128 0x2
 5291 0a93 91       		.byte	0x91
 5292 0a94 70       		.sleb128 -16
 5293 0a95 00       		.byte	0
 5294 0a96 17       		.uleb128 0x17
 5295 0a97 59010000 		.4byte	.LASF65
 5296 0a9b 01       		.byte	0x1
 5297 0a9c 7602     		.2byte	0x276
 5298 0a9e 00000000 		.4byte	.LFB91
 5299 0aa2 5E000000 		.4byte	.LFE91-.LFB91
 5300 0aa6 01       		.uleb128 0x1
 5301 0aa7 9C       		.byte	0x9c
 5302 0aa8 D60A0000 		.4byte	0xad6
 5303 0aac 18       		.uleb128 0x18
 5304 0aad C0010000 		.4byte	.LASF34
 5305 0ab1 01       		.byte	0x1
 5306 0ab2 7602     		.2byte	0x276
 5307 0ab4 81020000 		.4byte	0x281
 5308 0ab8 02       		.uleb128 0x2
 5309 0ab9 91       		.byte	0x91
 5310 0aba 74       		.sleb128 -12
 5311 0abb 19       		.uleb128 0x19
 5312 0abc 4100     		.ascii	"A\000"
 5313 0abe 01       		.byte	0x1
 5314 0abf 7602     		.2byte	0x276
 5315 0ac1 81000000 		.4byte	0x81
 5316 0ac5 02       		.uleb128 0x2
 5317 0ac6 91       		.byte	0x91
 5318 0ac7 73       		.sleb128 -13
 5319 0ac8 19       		.uleb128 0x19
 5320 0ac9 4200     		.ascii	"B\000"
 5321 0acb 01       		.byte	0x1
 5322 0acc 7602     		.2byte	0x276
 5323 0ace 81000000 		.4byte	0x81
 5324 0ad2 02       		.uleb128 0x2
 5325 0ad3 91       		.byte	0x91
 5326 0ad4 72       		.sleb128 -14
 5327 0ad5 00       		.byte	0
 5328 0ad6 17       		.uleb128 0x17
 5329 0ad7 00000000 		.4byte	.LASF66
 5330 0adb 01       		.byte	0x1
 5331 0adc 8B02     		.2byte	0x28b
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 113


 5332 0ade 00000000 		.4byte	.LFB92
 5333 0ae2 62000000 		.4byte	.LFE92-.LFB92
 5334 0ae6 01       		.uleb128 0x1
 5335 0ae7 9C       		.byte	0x9c
 5336 0ae8 160B0000 		.4byte	0xb16
 5337 0aec 18       		.uleb128 0x18
 5338 0aed C0010000 		.4byte	.LASF34
 5339 0af1 01       		.byte	0x1
 5340 0af2 8B02     		.2byte	0x28b
 5341 0af4 81020000 		.4byte	0x281
 5342 0af8 02       		.uleb128 0x2
 5343 0af9 91       		.byte	0x91
 5344 0afa 74       		.sleb128 -12
 5345 0afb 19       		.uleb128 0x19
 5346 0afc 4100     		.ascii	"A\000"
 5347 0afe 01       		.byte	0x1
 5348 0aff 8B02     		.2byte	0x28b
 5349 0b01 81000000 		.4byte	0x81
 5350 0b05 02       		.uleb128 0x2
 5351 0b06 91       		.byte	0x91
 5352 0b07 73       		.sleb128 -13
 5353 0b08 19       		.uleb128 0x19
 5354 0b09 4200     		.ascii	"B\000"
 5355 0b0b 01       		.byte	0x1
 5356 0b0c 8B02     		.2byte	0x28b
 5357 0b0e 81000000 		.4byte	0x81
 5358 0b12 02       		.uleb128 0x2
 5359 0b13 91       		.byte	0x91
 5360 0b14 72       		.sleb128 -14
 5361 0b15 00       		.byte	0
 5362 0b16 17       		.uleb128 0x17
 5363 0b17 26000000 		.4byte	.LASF67
 5364 0b1b 01       		.byte	0x1
 5365 0b1c A402     		.2byte	0x2a4
 5366 0b1e 00000000 		.4byte	.LFB93
 5367 0b22 C8010000 		.4byte	.LFE93-.LFB93
 5368 0b26 01       		.uleb128 0x1
 5369 0b27 9C       		.byte	0x9c
 5370 0b28 C00B0000 		.4byte	0xbc0
 5371 0b2c 18       		.uleb128 0x18
 5372 0b2d C0010000 		.4byte	.LASF34
 5373 0b31 01       		.byte	0x1
 5374 0b32 A402     		.2byte	0x2a4
 5375 0b34 81020000 		.4byte	0x281
 5376 0b38 02       		.uleb128 0x2
 5377 0b39 91       		.byte	0x91
 5378 0b3a 64       		.sleb128 -28
 5379 0b3b 19       		.uleb128 0x19
 5380 0b3c 783000   		.ascii	"x0\000"
 5381 0b3f 01       		.byte	0x1
 5382 0b40 A402     		.2byte	0x2a4
 5383 0b42 68000000 		.4byte	0x68
 5384 0b46 02       		.uleb128 0x2
 5385 0b47 91       		.byte	0x91
 5386 0b48 60       		.sleb128 -32
 5387 0b49 19       		.uleb128 0x19
 5388 0b4a 793000   		.ascii	"y0\000"
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 114


 5389 0b4d 01       		.byte	0x1
 5390 0b4e A402     		.2byte	0x2a4
 5391 0b50 68000000 		.4byte	0x68
 5392 0b54 02       		.uleb128 0x2
 5393 0b55 91       		.byte	0x91
 5394 0b56 5C       		.sleb128 -36
 5395 0b57 19       		.uleb128 0x19
 5396 0b58 783100   		.ascii	"x1\000"
 5397 0b5b 01       		.byte	0x1
 5398 0b5c A402     		.2byte	0x2a4
 5399 0b5e 68000000 		.4byte	0x68
 5400 0b62 02       		.uleb128 0x2
 5401 0b63 91       		.byte	0x91
 5402 0b64 58       		.sleb128 -40
 5403 0b65 19       		.uleb128 0x19
 5404 0b66 793100   		.ascii	"y1\000"
 5405 0b69 01       		.byte	0x1
 5406 0b6a A402     		.2byte	0x2a4
 5407 0b6c 68000000 		.4byte	0x68
 5408 0b70 02       		.uleb128 0x2
 5409 0b71 91       		.byte	0x91
 5410 0b72 00       		.sleb128 0
 5411 0b73 18       		.uleb128 0x18
 5412 0b74 4F000000 		.4byte	.LASF27
 5413 0b78 01       		.byte	0x1
 5414 0b79 A402     		.2byte	0x2a4
 5415 0b7b 81000000 		.4byte	0x81
 5416 0b7f 02       		.uleb128 0x2
 5417 0b80 91       		.byte	0x91
 5418 0b81 04       		.sleb128 4
 5419 0b82 1B       		.uleb128 0x1b
 5420 0b83 94030000 		.4byte	.LASF68
 5421 0b87 01       		.byte	0x1
 5422 0b88 B302     		.2byte	0x2b3
 5423 0b8a 81000000 		.4byte	0x81
 5424 0b8e 02       		.uleb128 0x2
 5425 0b8f 91       		.byte	0x91
 5426 0b90 77       		.sleb128 -9
 5427 0b91 12       		.uleb128 0x12
 5428 0b92 90000000 		.4byte	.LBB5
 5429 0b96 20010000 		.4byte	.LBE5-.LBB5
 5430 0b9a 1A       		.uleb128 0x1a
 5431 0b9b 6900     		.ascii	"i\000"
 5432 0b9d 01       		.byte	0x1
 5433 0b9e B402     		.2byte	0x2b4
 5434 0ba0 68000000 		.4byte	0x68
 5435 0ba4 02       		.uleb128 0x2
 5436 0ba5 91       		.byte	0x91
 5437 0ba6 70       		.sleb128 -16
 5438 0ba7 12       		.uleb128 0x12
 5439 0ba8 0A010000 		.4byte	.LBB6
 5440 0bac 8C000000 		.4byte	.LBE6-.LBB6
 5441 0bb0 1A       		.uleb128 0x1a
 5442 0bb1 6A00     		.ascii	"j\000"
 5443 0bb3 01       		.byte	0x1
 5444 0bb4 BC02     		.2byte	0x2bc
 5445 0bb6 68000000 		.4byte	0x68
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 115


 5446 0bba 02       		.uleb128 0x2
 5447 0bbb 91       		.byte	0x91
 5448 0bbc 6C       		.sleb128 -20
 5449 0bbd 00       		.byte	0
 5450 0bbe 00       		.byte	0
 5451 0bbf 00       		.byte	0
 5452 0bc0 17       		.uleb128 0x17
 5453 0bc1 B6010000 		.4byte	.LASF69
 5454 0bc5 01       		.byte	0x1
 5455 0bc6 D502     		.2byte	0x2d5
 5456 0bc8 00000000 		.4byte	.LFB94
 5457 0bcc 94000000 		.4byte	.LFE94-.LFB94
 5458 0bd0 01       		.uleb128 0x1
 5459 0bd1 9C       		.byte	0x9c
 5460 0bd2 0F0C0000 		.4byte	0xc0f
 5461 0bd6 18       		.uleb128 0x18
 5462 0bd7 C0010000 		.4byte	.LASF34
 5463 0bdb 01       		.byte	0x1
 5464 0bdc D502     		.2byte	0x2d5
 5465 0bde 81020000 		.4byte	0x281
 5466 0be2 02       		.uleb128 0x2
 5467 0be3 91       		.byte	0x91
 5468 0be4 6C       		.sleb128 -20
 5469 0be5 19       		.uleb128 0x19
 5470 0be6 7900     		.ascii	"y\000"
 5471 0be8 01       		.byte	0x1
 5472 0be9 D502     		.2byte	0x2d5
 5473 0beb 68000000 		.4byte	0x68
 5474 0bef 02       		.uleb128 0x2
 5475 0bf0 91       		.byte	0x91
 5476 0bf1 68       		.sleb128 -24
 5477 0bf2 19       		.uleb128 0x19
 5478 0bf3 783000   		.ascii	"x0\000"
 5479 0bf6 01       		.byte	0x1
 5480 0bf7 D502     		.2byte	0x2d5
 5481 0bf9 68000000 		.4byte	0x68
 5482 0bfd 02       		.uleb128 0x2
 5483 0bfe 91       		.byte	0x91
 5484 0bff 64       		.sleb128 -28
 5485 0c00 19       		.uleb128 0x19
 5486 0c01 783100   		.ascii	"x1\000"
 5487 0c04 01       		.byte	0x1
 5488 0c05 D502     		.2byte	0x2d5
 5489 0c07 68000000 		.4byte	0x68
 5490 0c0b 02       		.uleb128 0x2
 5491 0c0c 91       		.byte	0x91
 5492 0c0d 60       		.sleb128 -32
 5493 0c0e 00       		.byte	0
 5494 0c0f 17       		.uleb128 0x17
 5495 0c10 6B030000 		.4byte	.LASF70
 5496 0c14 01       		.byte	0x1
 5497 0c15 E602     		.2byte	0x2e6
 5498 0c17 00000000 		.4byte	.LFB95
 5499 0c1b 94000000 		.4byte	.LFE95-.LFB95
 5500 0c1f 01       		.uleb128 0x1
 5501 0c20 9C       		.byte	0x9c
 5502 0c21 5E0C0000 		.4byte	0xc5e
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 116


 5503 0c25 18       		.uleb128 0x18
 5504 0c26 C0010000 		.4byte	.LASF34
 5505 0c2a 01       		.byte	0x1
 5506 0c2b E602     		.2byte	0x2e6
 5507 0c2d 81020000 		.4byte	0x281
 5508 0c31 02       		.uleb128 0x2
 5509 0c32 91       		.byte	0x91
 5510 0c33 6C       		.sleb128 -20
 5511 0c34 19       		.uleb128 0x19
 5512 0c35 7800     		.ascii	"x\000"
 5513 0c37 01       		.byte	0x1
 5514 0c38 E602     		.2byte	0x2e6
 5515 0c3a 68000000 		.4byte	0x68
 5516 0c3e 02       		.uleb128 0x2
 5517 0c3f 91       		.byte	0x91
 5518 0c40 68       		.sleb128 -24
 5519 0c41 19       		.uleb128 0x19
 5520 0c42 793000   		.ascii	"y0\000"
 5521 0c45 01       		.byte	0x1
 5522 0c46 E602     		.2byte	0x2e6
 5523 0c48 68000000 		.4byte	0x68
 5524 0c4c 02       		.uleb128 0x2
 5525 0c4d 91       		.byte	0x91
 5526 0c4e 64       		.sleb128 -28
 5527 0c4f 19       		.uleb128 0x19
 5528 0c50 793100   		.ascii	"y1\000"
 5529 0c53 01       		.byte	0x1
 5530 0c54 E602     		.2byte	0x2e6
 5531 0c56 68000000 		.4byte	0x68
 5532 0c5a 02       		.uleb128 0x2
 5533 0c5b 91       		.byte	0x91
 5534 0c5c 60       		.sleb128 -32
 5535 0c5d 00       		.byte	0
 5536 0c5e 17       		.uleb128 0x17
 5537 0c5f 8C010000 		.4byte	.LASF71
 5538 0c63 01       		.byte	0x1
 5539 0c64 FE02     		.2byte	0x2fe
 5540 0c66 00000000 		.4byte	.LFB96
 5541 0c6a E2000000 		.4byte	.LFE96-.LFB96
 5542 0c6e 01       		.uleb128 0x1
 5543 0c6f 9C       		.byte	0x9c
 5544 0c70 120D0000 		.4byte	0xd12
 5545 0c74 18       		.uleb128 0x18
 5546 0c75 C0010000 		.4byte	.LASF34
 5547 0c79 01       		.byte	0x1
 5548 0c7a FE02     		.2byte	0x2fe
 5549 0c7c 81020000 		.4byte	0x281
 5550 0c80 02       		.uleb128 0x2
 5551 0c81 91       		.byte	0x91
 5552 0c82 5C       		.sleb128 -36
 5553 0c83 19       		.uleb128 0x19
 5554 0c84 783000   		.ascii	"x0\000"
 5555 0c87 01       		.byte	0x1
 5556 0c88 FE02     		.2byte	0x2fe
 5557 0c8a 68000000 		.4byte	0x68
 5558 0c8e 02       		.uleb128 0x2
 5559 0c8f 91       		.byte	0x91
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 117


 5560 0c90 58       		.sleb128 -40
 5561 0c91 19       		.uleb128 0x19
 5562 0c92 793000   		.ascii	"y0\000"
 5563 0c95 01       		.byte	0x1
 5564 0c96 FE02     		.2byte	0x2fe
 5565 0c98 68000000 		.4byte	0x68
 5566 0c9c 02       		.uleb128 0x2
 5567 0c9d 91       		.byte	0x91
 5568 0c9e 54       		.sleb128 -44
 5569 0c9f 19       		.uleb128 0x19
 5570 0ca0 647800   		.ascii	"dx\000"
 5571 0ca3 01       		.byte	0x1
 5572 0ca4 FE02     		.2byte	0x2fe
 5573 0ca6 68000000 		.4byte	0x68
 5574 0caa 02       		.uleb128 0x2
 5575 0cab 91       		.byte	0x91
 5576 0cac 50       		.sleb128 -48
 5577 0cad 19       		.uleb128 0x19
 5578 0cae 647900   		.ascii	"dy\000"
 5579 0cb1 01       		.byte	0x1
 5580 0cb2 FE02     		.2byte	0x2fe
 5581 0cb4 68000000 		.4byte	0x68
 5582 0cb8 02       		.uleb128 0x2
 5583 0cb9 91       		.byte	0x91
 5584 0cba 00       		.sleb128 0
 5585 0cbb 19       		.uleb128 0x19
 5586 0cbc 726F7400 		.ascii	"rot\000"
 5587 0cc0 01       		.byte	0x1
 5588 0cc1 FE02     		.2byte	0x2fe
 5589 0cc3 81000000 		.4byte	0x81
 5590 0cc7 02       		.uleb128 0x2
 5591 0cc8 91       		.byte	0x91
 5592 0cc9 04       		.sleb128 4
 5593 0cca 1B       		.uleb128 0x1b
 5594 0ccb 10040000 		.4byte	.LASF72
 5595 0ccf 01       		.byte	0x1
 5596 0cd0 0203     		.2byte	0x302
 5597 0cd2 68000000 		.4byte	0x68
 5598 0cd6 02       		.uleb128 0x2
 5599 0cd7 91       		.byte	0x91
 5600 0cd8 74       		.sleb128 -12
 5601 0cd9 1A       		.uleb128 0x1a
 5602 0cda 7800     		.ascii	"x\000"
 5603 0cdc 01       		.byte	0x1
 5604 0cdd 0303     		.2byte	0x303
 5605 0cdf 68000000 		.4byte	0x68
 5606 0ce3 02       		.uleb128 0x2
 5607 0ce4 91       		.byte	0x91
 5608 0ce5 70       		.sleb128 -16
 5609 0ce6 1A       		.uleb128 0x1a
 5610 0ce7 7900     		.ascii	"y\000"
 5611 0ce9 01       		.byte	0x1
 5612 0cea 0303     		.2byte	0x303
 5613 0cec 68000000 		.4byte	0x68
 5614 0cf0 02       		.uleb128 0x2
 5615 0cf1 91       		.byte	0x91
 5616 0cf2 6C       		.sleb128 -20
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 118


 5617 0cf3 1B       		.uleb128 0x1b
 5618 0cf4 4F020000 		.4byte	.LASF73
 5619 0cf8 01       		.byte	0x1
 5620 0cf9 0403     		.2byte	0x304
 5621 0cfb 68000000 		.4byte	0x68
 5622 0cff 02       		.uleb128 0x2
 5623 0d00 91       		.byte	0x91
 5624 0d01 64       		.sleb128 -28
 5625 0d02 1B       		.uleb128 0x1b
 5626 0d03 E7020000 		.4byte	.LASF74
 5627 0d07 01       		.byte	0x1
 5628 0d08 0503     		.2byte	0x305
 5629 0d0a 81000000 		.4byte	0x81
 5630 0d0e 02       		.uleb128 0x2
 5631 0d0f 91       		.byte	0x91
 5632 0d10 6B       		.sleb128 -21
 5633 0d11 00       		.byte	0
 5634 0d12 17       		.uleb128 0x17
 5635 0d13 55000000 		.4byte	.LASF75
 5636 0d17 01       		.byte	0x1
 5637 0d18 3503     		.2byte	0x335
 5638 0d1a 00000000 		.4byte	.LFB97
 5639 0d1e A8000000 		.4byte	.LFE97-.LFB97
 5640 0d22 01       		.uleb128 0x1
 5641 0d23 9C       		.byte	0x9c
 5642 0d24 DD0D0000 		.4byte	0xddd
 5643 0d28 18       		.uleb128 0x18
 5644 0d29 C0010000 		.4byte	.LASF34
 5645 0d2d 01       		.byte	0x1
 5646 0d2e 3503     		.2byte	0x335
 5647 0d30 81020000 		.4byte	0x281
 5648 0d34 02       		.uleb128 0x2
 5649 0d35 91       		.byte	0x91
 5650 0d36 64       		.sleb128 -28
 5651 0d37 19       		.uleb128 0x19
 5652 0d38 783000   		.ascii	"x0\000"
 5653 0d3b 01       		.byte	0x1
 5654 0d3c 3503     		.2byte	0x335
 5655 0d3e 68000000 		.4byte	0x68
 5656 0d42 02       		.uleb128 0x2
 5657 0d43 91       		.byte	0x91
 5658 0d44 60       		.sleb128 -32
 5659 0d45 19       		.uleb128 0x19
 5660 0d46 793000   		.ascii	"y0\000"
 5661 0d49 01       		.byte	0x1
 5662 0d4a 3503     		.2byte	0x335
 5663 0d4c 68000000 		.4byte	0x68
 5664 0d50 02       		.uleb128 0x2
 5665 0d51 91       		.byte	0x91
 5666 0d52 5C       		.sleb128 -36
 5667 0d53 19       		.uleb128 0x19
 5668 0d54 647800   		.ascii	"dx\000"
 5669 0d57 01       		.byte	0x1
 5670 0d58 3503     		.2byte	0x335
 5671 0d5a 68000000 		.4byte	0x68
 5672 0d5e 02       		.uleb128 0x2
 5673 0d5f 91       		.byte	0x91
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 119


 5674 0d60 58       		.sleb128 -40
 5675 0d61 19       		.uleb128 0x19
 5676 0d62 647900   		.ascii	"dy\000"
 5677 0d65 01       		.byte	0x1
 5678 0d66 3503     		.2byte	0x335
 5679 0d68 68000000 		.4byte	0x68
 5680 0d6c 02       		.uleb128 0x2
 5681 0d6d 91       		.byte	0x91
 5682 0d6e 00       		.sleb128 0
 5683 0d6f 19       		.uleb128 0x19
 5684 0d70 7800     		.ascii	"x\000"
 5685 0d72 01       		.byte	0x1
 5686 0d73 3503     		.2byte	0x335
 5687 0d75 68000000 		.4byte	0x68
 5688 0d79 02       		.uleb128 0x2
 5689 0d7a 91       		.byte	0x91
 5690 0d7b 04       		.sleb128 4
 5691 0d7c 19       		.uleb128 0x19
 5692 0d7d 7900     		.ascii	"y\000"
 5693 0d7f 01       		.byte	0x1
 5694 0d80 3503     		.2byte	0x335
 5695 0d82 68000000 		.4byte	0x68
 5696 0d86 02       		.uleb128 0x2
 5697 0d87 91       		.byte	0x91
 5698 0d88 08       		.sleb128 8
 5699 0d89 18       		.uleb128 0x18
 5700 0d8a E7020000 		.4byte	.LASF74
 5701 0d8e 01       		.byte	0x1
 5702 0d8f 3503     		.2byte	0x335
 5703 0d91 68000000 		.4byte	0x68
 5704 0d95 02       		.uleb128 0x2
 5705 0d96 91       		.byte	0x91
 5706 0d97 0C       		.sleb128 12
 5707 0d98 19       		.uleb128 0x19
 5708 0d99 726F7400 		.ascii	"rot\000"
 5709 0d9d 01       		.byte	0x1
 5710 0d9e 3503     		.2byte	0x335
 5711 0da0 81000000 		.4byte	0x81
 5712 0da4 02       		.uleb128 0x2
 5713 0da5 91       		.byte	0x91
 5714 0da6 10       		.sleb128 16
 5715 0da7 1B       		.uleb128 0x1b
 5716 0da8 10040000 		.4byte	.LASF72
 5717 0dac 01       		.byte	0x1
 5718 0dad 3703     		.2byte	0x337
 5719 0daf 68000000 		.4byte	0x68
 5720 0db3 02       		.uleb128 0x2
 5721 0db4 91       		.byte	0x91
 5722 0db5 74       		.sleb128 -12
 5723 0db6 1B       		.uleb128 0x1b
 5724 0db7 4F020000 		.4byte	.LASF73
 5725 0dbb 01       		.byte	0x1
 5726 0dbc 3803     		.2byte	0x338
 5727 0dbe 68000000 		.4byte	0x68
 5728 0dc2 02       		.uleb128 0x2
 5729 0dc3 91       		.byte	0x91
 5730 0dc4 6C       		.sleb128 -20
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 120


 5731 0dc5 12       		.uleb128 0x12
 5732 0dc6 1C000000 		.4byte	.LBB7
 5733 0dca 84000000 		.4byte	.LBE7-.LBB7
 5734 0dce 1A       		.uleb128 0x1a
 5735 0dcf 6900     		.ascii	"i\000"
 5736 0dd1 01       		.byte	0x1
 5737 0dd2 3A03     		.2byte	0x33a
 5738 0dd4 68000000 		.4byte	0x68
 5739 0dd8 02       		.uleb128 0x2
 5740 0dd9 91       		.byte	0x91
 5741 0dda 70       		.sleb128 -16
 5742 0ddb 00       		.byte	0
 5743 0ddc 00       		.byte	0
 5744 0ddd 17       		.uleb128 0x17
 5745 0dde 5D030000 		.4byte	.LASF76
 5746 0de2 01       		.byte	0x1
 5747 0de3 6803     		.2byte	0x368
 5748 0de5 00000000 		.4byte	.LFB98
 5749 0de9 B4000000 		.4byte	.LFE98-.LFB98
 5750 0ded 01       		.uleb128 0x1
 5751 0dee 9C       		.byte	0x9c
 5752 0def A80E0000 		.4byte	0xea8
 5753 0df3 18       		.uleb128 0x18
 5754 0df4 C0010000 		.4byte	.LASF34
 5755 0df8 01       		.byte	0x1
 5756 0df9 6803     		.2byte	0x368
 5757 0dfb 81020000 		.4byte	0x281
 5758 0dff 02       		.uleb128 0x2
 5759 0e00 91       		.byte	0x91
 5760 0e01 64       		.sleb128 -28
 5761 0e02 19       		.uleb128 0x19
 5762 0e03 783000   		.ascii	"x0\000"
 5763 0e06 01       		.byte	0x1
 5764 0e07 6803     		.2byte	0x368
 5765 0e09 68000000 		.4byte	0x68
 5766 0e0d 02       		.uleb128 0x2
 5767 0e0e 91       		.byte	0x91
 5768 0e0f 60       		.sleb128 -32
 5769 0e10 19       		.uleb128 0x19
 5770 0e11 793000   		.ascii	"y0\000"
 5771 0e14 01       		.byte	0x1
 5772 0e15 6803     		.2byte	0x368
 5773 0e17 68000000 		.4byte	0x68
 5774 0e1b 02       		.uleb128 0x2
 5775 0e1c 91       		.byte	0x91
 5776 0e1d 5C       		.sleb128 -36
 5777 0e1e 19       		.uleb128 0x19
 5778 0e1f 647800   		.ascii	"dx\000"
 5779 0e22 01       		.byte	0x1
 5780 0e23 6803     		.2byte	0x368
 5781 0e25 68000000 		.4byte	0x68
 5782 0e29 02       		.uleb128 0x2
 5783 0e2a 91       		.byte	0x91
 5784 0e2b 58       		.sleb128 -40
 5785 0e2c 19       		.uleb128 0x19
 5786 0e2d 647900   		.ascii	"dy\000"
 5787 0e30 01       		.byte	0x1
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 121


 5788 0e31 6803     		.2byte	0x368
 5789 0e33 68000000 		.4byte	0x68
 5790 0e37 02       		.uleb128 0x2
 5791 0e38 91       		.byte	0x91
 5792 0e39 00       		.sleb128 0
 5793 0e3a 19       		.uleb128 0x19
 5794 0e3b 7800     		.ascii	"x\000"
 5795 0e3d 01       		.byte	0x1
 5796 0e3e 6803     		.2byte	0x368
 5797 0e40 68000000 		.4byte	0x68
 5798 0e44 02       		.uleb128 0x2
 5799 0e45 91       		.byte	0x91
 5800 0e46 04       		.sleb128 4
 5801 0e47 19       		.uleb128 0x19
 5802 0e48 7900     		.ascii	"y\000"
 5803 0e4a 01       		.byte	0x1
 5804 0e4b 6803     		.2byte	0x368
 5805 0e4d 68000000 		.4byte	0x68
 5806 0e51 02       		.uleb128 0x2
 5807 0e52 91       		.byte	0x91
 5808 0e53 08       		.sleb128 8
 5809 0e54 18       		.uleb128 0x18
 5810 0e55 E7020000 		.4byte	.LASF74
 5811 0e59 01       		.byte	0x1
 5812 0e5a 6803     		.2byte	0x368
 5813 0e5c 68000000 		.4byte	0x68
 5814 0e60 02       		.uleb128 0x2
 5815 0e61 91       		.byte	0x91
 5816 0e62 0C       		.sleb128 12
 5817 0e63 19       		.uleb128 0x19
 5818 0e64 726F7400 		.ascii	"rot\000"
 5819 0e68 01       		.byte	0x1
 5820 0e69 6803     		.2byte	0x368
 5821 0e6b 81000000 		.4byte	0x81
 5822 0e6f 02       		.uleb128 0x2
 5823 0e70 91       		.byte	0x91
 5824 0e71 10       		.sleb128 16
 5825 0e72 1B       		.uleb128 0x1b
 5826 0e73 10040000 		.4byte	.LASF72
 5827 0e77 01       		.byte	0x1
 5828 0e78 6A03     		.2byte	0x36a
 5829 0e7a 68000000 		.4byte	0x68
 5830 0e7e 02       		.uleb128 0x2
 5831 0e7f 91       		.byte	0x91
 5832 0e80 74       		.sleb128 -12
 5833 0e81 1B       		.uleb128 0x1b
 5834 0e82 4F020000 		.4byte	.LASF73
 5835 0e86 01       		.byte	0x1
 5836 0e87 6B03     		.2byte	0x36b
 5837 0e89 68000000 		.4byte	0x68
 5838 0e8d 02       		.uleb128 0x2
 5839 0e8e 91       		.byte	0x91
 5840 0e8f 6C       		.sleb128 -20
 5841 0e90 12       		.uleb128 0x12
 5842 0e91 1C000000 		.4byte	.LBB8
 5843 0e95 90000000 		.4byte	.LBE8-.LBB8
 5844 0e99 1A       		.uleb128 0x1a
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 122


 5845 0e9a 6900     		.ascii	"i\000"
 5846 0e9c 01       		.byte	0x1
 5847 0e9d 6D03     		.2byte	0x36d
 5848 0e9f 68000000 		.4byte	0x68
 5849 0ea3 02       		.uleb128 0x2
 5850 0ea4 91       		.byte	0x91
 5851 0ea5 70       		.sleb128 -16
 5852 0ea6 00       		.byte	0
 5853 0ea7 00       		.byte	0
 5854 0ea8 17       		.uleb128 0x17
 5855 0ea9 C1020000 		.4byte	.LASF77
 5856 0ead 01       		.byte	0x1
 5857 0eae 9403     		.2byte	0x394
 5858 0eb0 00000000 		.4byte	.LFB99
 5859 0eb4 88000000 		.4byte	.LFE99-.LFB99
 5860 0eb8 01       		.uleb128 0x1
 5861 0eb9 9C       		.byte	0x9c
 5862 0eba 130F0000 		.4byte	0xf13
 5863 0ebe 18       		.uleb128 0x18
 5864 0ebf C0010000 		.4byte	.LASF34
 5865 0ec3 01       		.byte	0x1
 5866 0ec4 9403     		.2byte	0x394
 5867 0ec6 81020000 		.4byte	0x281
 5868 0eca 02       		.uleb128 0x2
 5869 0ecb 91       		.byte	0x91
 5870 0ecc 74       		.sleb128 -12
 5871 0ecd 19       		.uleb128 0x19
 5872 0ece 783000   		.ascii	"x0\000"
 5873 0ed1 01       		.byte	0x1
 5874 0ed2 9403     		.2byte	0x394
 5875 0ed4 68000000 		.4byte	0x68
 5876 0ed8 02       		.uleb128 0x2
 5877 0ed9 91       		.byte	0x91
 5878 0eda 70       		.sleb128 -16
 5879 0edb 19       		.uleb128 0x19
 5880 0edc 793000   		.ascii	"y0\000"
 5881 0edf 01       		.byte	0x1
 5882 0ee0 9403     		.2byte	0x394
 5883 0ee2 68000000 		.4byte	0x68
 5884 0ee6 02       		.uleb128 0x2
 5885 0ee7 91       		.byte	0x91
 5886 0ee8 6C       		.sleb128 -20
 5887 0ee9 19       		.uleb128 0x19
 5888 0eea 7800     		.ascii	"x\000"
 5889 0eec 01       		.byte	0x1
 5890 0eed 9403     		.2byte	0x394
 5891 0eef 68000000 		.4byte	0x68
 5892 0ef3 02       		.uleb128 0x2
 5893 0ef4 91       		.byte	0x91
 5894 0ef5 68       		.sleb128 -24
 5895 0ef6 19       		.uleb128 0x19
 5896 0ef7 7900     		.ascii	"y\000"
 5897 0ef9 01       		.byte	0x1
 5898 0efa 9403     		.2byte	0x394
 5899 0efc 68000000 		.4byte	0x68
 5900 0f00 02       		.uleb128 0x2
 5901 0f01 91       		.byte	0x91
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 123


 5902 0f02 00       		.sleb128 0
 5903 0f03 19       		.uleb128 0x19
 5904 0f04 726F7400 		.ascii	"rot\000"
 5905 0f08 01       		.byte	0x1
 5906 0f09 9403     		.2byte	0x394
 5907 0f0b 81000000 		.4byte	0x81
 5908 0f0f 02       		.uleb128 0x2
 5909 0f10 91       		.byte	0x91
 5910 0f11 04       		.sleb128 4
 5911 0f12 00       		.byte	0
 5912 0f13 17       		.uleb128 0x17
 5913 0f14 F7030000 		.4byte	.LASF78
 5914 0f18 01       		.byte	0x1
 5915 0f19 AD03     		.2byte	0x3ad
 5916 0f1b 00000000 		.4byte	.LFB100
 5917 0f1f D4000000 		.4byte	.LFE100-.LFB100
 5918 0f23 01       		.uleb128 0x1
 5919 0f24 9C       		.byte	0x9c
 5920 0f25 CB0F0000 		.4byte	0xfcb
 5921 0f29 18       		.uleb128 0x18
 5922 0f2a C0010000 		.4byte	.LASF34
 5923 0f2e 01       		.byte	0x1
 5924 0f2f AD03     		.2byte	0x3ad
 5925 0f31 81020000 		.4byte	0x281
 5926 0f35 02       		.uleb128 0x2
 5927 0f36 91       		.byte	0x91
 5928 0f37 5C       		.sleb128 -36
 5929 0f38 19       		.uleb128 0x19
 5930 0f39 786300   		.ascii	"xc\000"
 5931 0f3c 01       		.byte	0x1
 5932 0f3d AD03     		.2byte	0x3ad
 5933 0f3f 68000000 		.4byte	0x68
 5934 0f43 02       		.uleb128 0x2
 5935 0f44 91       		.byte	0x91
 5936 0f45 58       		.sleb128 -40
 5937 0f46 19       		.uleb128 0x19
 5938 0f47 796300   		.ascii	"yc\000"
 5939 0f4a 01       		.byte	0x1
 5940 0f4b AD03     		.2byte	0x3ad
 5941 0f4d 68000000 		.4byte	0x68
 5942 0f51 02       		.uleb128 0x2
 5943 0f52 91       		.byte	0x91
 5944 0f53 54       		.sleb128 -44
 5945 0f54 19       		.uleb128 0x19
 5946 0f55 72496E00 		.ascii	"rIn\000"
 5947 0f59 01       		.byte	0x1
 5948 0f5a AD03     		.2byte	0x3ad
 5949 0f5c 68000000 		.4byte	0x68
 5950 0f60 02       		.uleb128 0x2
 5951 0f61 91       		.byte	0x91
 5952 0f62 50       		.sleb128 -48
 5953 0f63 18       		.uleb128 0x18
 5954 0f64 A3010000 		.4byte	.LASF79
 5955 0f68 01       		.byte	0x1
 5956 0f69 AD03     		.2byte	0x3ad
 5957 0f6b 68000000 		.4byte	0x68
 5958 0f6f 02       		.uleb128 0x2
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 124


 5959 0f70 91       		.byte	0x91
 5960 0f71 00       		.sleb128 0
 5961 0f72 18       		.uleb128 0x18
 5962 0f73 DF020000 		.4byte	.LASF57
 5963 0f77 01       		.byte	0x1
 5964 0f78 AD03     		.2byte	0x3ad
 5965 0f7a 81000000 		.4byte	0x81
 5966 0f7e 02       		.uleb128 0x2
 5967 0f7f 91       		.byte	0x91
 5968 0f80 04       		.sleb128 4
 5969 0f81 1A       		.uleb128 0x1a
 5970 0f82 64496E00 		.ascii	"dIn\000"
 5971 0f86 01       		.byte	0x1
 5972 0f87 B003     		.2byte	0x3b0
 5973 0f89 68000000 		.4byte	0x68
 5974 0f8d 02       		.uleb128 0x2
 5975 0f8e 91       		.byte	0x91
 5976 0f8f 74       		.sleb128 -12
 5977 0f90 1B       		.uleb128 0x1b
 5978 0f91 2F020000 		.4byte	.LASF80
 5979 0f95 01       		.byte	0x1
 5980 0f96 B103     		.2byte	0x3b1
 5981 0f98 68000000 		.4byte	0x68
 5982 0f9c 02       		.uleb128 0x2
 5983 0f9d 91       		.byte	0x91
 5984 0f9e 70       		.sleb128 -16
 5985 0f9f 1A       		.uleb128 0x1a
 5986 0fa0 7800     		.ascii	"x\000"
 5987 0fa2 01       		.byte	0x1
 5988 0fa3 B203     		.2byte	0x3b2
 5989 0fa5 68000000 		.4byte	0x68
 5990 0fa9 02       		.uleb128 0x2
 5991 0faa 91       		.byte	0x91
 5992 0fab 6C       		.sleb128 -20
 5993 0fac 1A       		.uleb128 0x1a
 5994 0fad 79496E00 		.ascii	"yIn\000"
 5995 0fb1 01       		.byte	0x1
 5996 0fb2 B203     		.2byte	0x3b2
 5997 0fb4 68000000 		.4byte	0x68
 5998 0fb8 02       		.uleb128 0x2
 5999 0fb9 91       		.byte	0x91
 6000 0fba 68       		.sleb128 -24
 6001 0fbb 1B       		.uleb128 0x1b
 6002 0fbc 11000000 		.4byte	.LASF81
 6003 0fc0 01       		.byte	0x1
 6004 0fc1 B203     		.2byte	0x3b2
 6005 0fc3 68000000 		.4byte	0x68
 6006 0fc7 02       		.uleb128 0x2
 6007 0fc8 91       		.byte	0x91
 6008 0fc9 64       		.sleb128 -28
 6009 0fca 00       		.byte	0
 6010 0fcb 17       		.uleb128 0x17
 6011 0fcc 85020000 		.4byte	.LASF82
 6012 0fd0 01       		.byte	0x1
 6013 0fd1 DE03     		.2byte	0x3de
 6014 0fd3 00000000 		.4byte	.LFB101
 6015 0fd7 C2010000 		.4byte	.LFE101-.LFB101
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 125


 6016 0fdb 01       		.uleb128 0x1
 6017 0fdc 9C       		.byte	0x9c
 6018 0fdd 47100000 		.4byte	0x1047
 6019 0fe1 18       		.uleb128 0x18
 6020 0fe2 C0010000 		.4byte	.LASF34
 6021 0fe6 01       		.byte	0x1
 6022 0fe7 DE03     		.2byte	0x3de
 6023 0fe9 81020000 		.4byte	0x281
 6024 0fed 02       		.uleb128 0x2
 6025 0fee 91       		.byte	0x91
 6026 0fef 6C       		.sleb128 -20
 6027 0ff0 19       		.uleb128 0x19
 6028 0ff1 786300   		.ascii	"xc\000"
 6029 0ff4 01       		.byte	0x1
 6030 0ff5 DE03     		.2byte	0x3de
 6031 0ff7 68000000 		.4byte	0x68
 6032 0ffb 02       		.uleb128 0x2
 6033 0ffc 91       		.byte	0x91
 6034 0ffd 68       		.sleb128 -24
 6035 0ffe 19       		.uleb128 0x19
 6036 0fff 796300   		.ascii	"yc\000"
 6037 1002 01       		.byte	0x1
 6038 1003 DE03     		.2byte	0x3de
 6039 1005 68000000 		.4byte	0x68
 6040 1009 02       		.uleb128 0x2
 6041 100a 91       		.byte	0x91
 6042 100b 64       		.sleb128 -28
 6043 100c 19       		.uleb128 0x19
 6044 100d 7800     		.ascii	"x\000"
 6045 100f 01       		.byte	0x1
 6046 1010 DE03     		.2byte	0x3de
 6047 1012 68000000 		.4byte	0x68
 6048 1016 02       		.uleb128 0x2
 6049 1017 91       		.byte	0x91
 6050 1018 60       		.sleb128 -32
 6051 1019 19       		.uleb128 0x19
 6052 101a 79496E00 		.ascii	"yIn\000"
 6053 101e 01       		.byte	0x1
 6054 101f DE03     		.2byte	0x3de
 6055 1021 68000000 		.4byte	0x68
 6056 1025 02       		.uleb128 0x2
 6057 1026 91       		.byte	0x91
 6058 1027 00       		.sleb128 0
 6059 1028 18       		.uleb128 0x18
 6060 1029 11000000 		.4byte	.LASF81
 6061 102d 01       		.byte	0x1
 6062 102e DE03     		.2byte	0x3de
 6063 1030 68000000 		.4byte	0x68
 6064 1034 02       		.uleb128 0x2
 6065 1035 91       		.byte	0x91
 6066 1036 04       		.sleb128 4
 6067 1037 18       		.uleb128 0x18
 6068 1038 DF020000 		.4byte	.LASF57
 6069 103c 01       		.byte	0x1
 6070 103d DE03     		.2byte	0x3de
 6071 103f 81000000 		.4byte	0x81
 6072 1043 02       		.uleb128 0x2
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 126


 6073 1044 91       		.byte	0x91
 6074 1045 08       		.sleb128 8
 6075 1046 00       		.byte	0
 6076 1047 1C       		.uleb128 0x1c
 6077 1048 58030000 		.4byte	.LASF83
 6078 104c 01       		.byte	0x1
 6079 104d F203     		.2byte	0x3f2
 6080 104f 00000000 		.4byte	.LFB102
 6081 1053 28000000 		.4byte	.LFE102-.LFB102
 6082 1057 01       		.uleb128 0x1
 6083 1058 9C       		.byte	0x9c
 6084 1059 8B100000 		.4byte	0x108b
 6085 105d 18       		.uleb128 0x18
 6086 105e 07010000 		.4byte	.LASF84
 6087 1062 01       		.byte	0x1
 6088 1063 F203     		.2byte	0x3f2
 6089 1065 8B100000 		.4byte	0x108b
 6090 1069 02       		.uleb128 0x2
 6091 106a 91       		.byte	0x91
 6092 106b 6C       		.sleb128 -20
 6093 106c 18       		.uleb128 0x18
 6094 106d 0C010000 		.4byte	.LASF85
 6095 1071 01       		.byte	0x1
 6096 1072 F203     		.2byte	0x3f2
 6097 1074 8B100000 		.4byte	0x108b
 6098 1078 02       		.uleb128 0x2
 6099 1079 91       		.byte	0x91
 6100 107a 68       		.sleb128 -24
 6101 107b 1B       		.uleb128 0x1b
 6102 107c 30000000 		.4byte	.LASF86
 6103 1080 01       		.byte	0x1
 6104 1081 F403     		.2byte	0x3f4
 6105 1083 68000000 		.4byte	0x68
 6106 1087 02       		.uleb128 0x2
 6107 1088 91       		.byte	0x91
 6108 1089 74       		.sleb128 -12
 6109 108a 00       		.byte	0
 6110 108b 06       		.uleb128 0x6
 6111 108c 04       		.byte	0x4
 6112 108d 68000000 		.4byte	0x68
 6113 1091 1D       		.uleb128 0x1d
 6114 1092 75040000 		.4byte	.LASF87
 6115 1096 07       		.byte	0x7
 6116 1097 1207     		.2byte	0x712
 6117 1099 9D100000 		.4byte	0x109d
 6118 109d 1E       		.uleb128 0x1e
 6119 109e 76000000 		.4byte	0x76
 6120 10a2 1F       		.uleb128 0x1f
 6121 10a3 11010000 		.4byte	.LASF29
 6122 10a7 05       		.byte	0x5
 6123 10a8 12       		.byte	0x12
 6124 10a9 EE010000 		.4byte	0x1ee
 6125 10ad 0A       		.uleb128 0xa
 6126 10ae F5000000 		.4byte	0xf5
 6127 10b2 BD100000 		.4byte	0x10bd
 6128 10b6 0B       		.uleb128 0xb
 6129 10b7 B5000000 		.4byte	0xb5
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 127


 6130 10bb 07       		.byte	0x7
 6131 10bc 00       		.byte	0
 6132 10bd 20       		.uleb128 0x20
 6133 10be EC020000 		.4byte	.LASF88
 6134 10c2 01       		.byte	0x1
 6135 10c3 19       		.byte	0x19
 6136 10c4 CE100000 		.4byte	0x10ce
 6137 10c8 05       		.uleb128 0x5
 6138 10c9 03       		.byte	0x3
 6139 10ca 00000000 		.4byte	initCmds
 6140 10ce 07       		.uleb128 0x7
 6141 10cf AD100000 		.4byte	0x10ad
 6142 10d3 00       		.byte	0
 6143              		.section	.debug_abbrev,"",%progbits
 6144              	.Ldebug_abbrev0:
 6145 0000 01       		.uleb128 0x1
 6146 0001 11       		.uleb128 0x11
 6147 0002 01       		.byte	0x1
 6148 0003 25       		.uleb128 0x25
 6149 0004 0E       		.uleb128 0xe
 6150 0005 13       		.uleb128 0x13
 6151 0006 0B       		.uleb128 0xb
 6152 0007 03       		.uleb128 0x3
 6153 0008 0E       		.uleb128 0xe
 6154 0009 1B       		.uleb128 0x1b
 6155 000a 0E       		.uleb128 0xe
 6156 000b 55       		.uleb128 0x55
 6157 000c 17       		.uleb128 0x17
 6158 000d 11       		.uleb128 0x11
 6159 000e 01       		.uleb128 0x1
 6160 000f 10       		.uleb128 0x10
 6161 0010 17       		.uleb128 0x17
 6162 0011 00       		.byte	0
 6163 0012 00       		.byte	0
 6164 0013 02       		.uleb128 0x2
 6165 0014 24       		.uleb128 0x24
 6166 0015 00       		.byte	0
 6167 0016 0B       		.uleb128 0xb
 6168 0017 0B       		.uleb128 0xb
 6169 0018 3E       		.uleb128 0x3e
 6170 0019 0B       		.uleb128 0xb
 6171 001a 03       		.uleb128 0x3
 6172 001b 0E       		.uleb128 0xe
 6173 001c 00       		.byte	0
 6174 001d 00       		.byte	0
 6175 001e 03       		.uleb128 0x3
 6176 001f 16       		.uleb128 0x16
 6177 0020 00       		.byte	0
 6178 0021 03       		.uleb128 0x3
 6179 0022 0E       		.uleb128 0xe
 6180 0023 3A       		.uleb128 0x3a
 6181 0024 0B       		.uleb128 0xb
 6182 0025 3B       		.uleb128 0x3b
 6183 0026 0B       		.uleb128 0xb
 6184 0027 49       		.uleb128 0x49
 6185 0028 13       		.uleb128 0x13
 6186 0029 00       		.byte	0
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 128


 6187 002a 00       		.byte	0
 6188 002b 04       		.uleb128 0x4
 6189 002c 24       		.uleb128 0x24
 6190 002d 00       		.byte	0
 6191 002e 0B       		.uleb128 0xb
 6192 002f 0B       		.uleb128 0xb
 6193 0030 3E       		.uleb128 0x3e
 6194 0031 0B       		.uleb128 0xb
 6195 0032 03       		.uleb128 0x3
 6196 0033 08       		.uleb128 0x8
 6197 0034 00       		.byte	0
 6198 0035 00       		.byte	0
 6199 0036 05       		.uleb128 0x5
 6200 0037 16       		.uleb128 0x16
 6201 0038 00       		.byte	0
 6202 0039 03       		.uleb128 0x3
 6203 003a 0E       		.uleb128 0xe
 6204 003b 3A       		.uleb128 0x3a
 6205 003c 0B       		.uleb128 0xb
 6206 003d 3B       		.uleb128 0x3b
 6207 003e 05       		.uleb128 0x5
 6208 003f 49       		.uleb128 0x49
 6209 0040 13       		.uleb128 0x13
 6210 0041 00       		.byte	0
 6211 0042 00       		.byte	0
 6212 0043 06       		.uleb128 0x6
 6213 0044 0F       		.uleb128 0xf
 6214 0045 00       		.byte	0
 6215 0046 0B       		.uleb128 0xb
 6216 0047 0B       		.uleb128 0xb
 6217 0048 49       		.uleb128 0x49
 6218 0049 13       		.uleb128 0x13
 6219 004a 00       		.byte	0
 6220 004b 00       		.byte	0
 6221 004c 07       		.uleb128 0x7
 6222 004d 26       		.uleb128 0x26
 6223 004e 00       		.byte	0
 6224 004f 49       		.uleb128 0x49
 6225 0050 13       		.uleb128 0x13
 6226 0051 00       		.byte	0
 6227 0052 00       		.byte	0
 6228 0053 08       		.uleb128 0x8
 6229 0054 13       		.uleb128 0x13
 6230 0055 01       		.byte	0x1
 6231 0056 0B       		.uleb128 0xb
 6232 0057 05       		.uleb128 0x5
 6233 0058 3A       		.uleb128 0x3a
 6234 0059 0B       		.uleb128 0xb
 6235 005a 3B       		.uleb128 0x3b
 6236 005b 0B       		.uleb128 0xb
 6237 005c 01       		.uleb128 0x1
 6238 005d 13       		.uleb128 0x13
 6239 005e 00       		.byte	0
 6240 005f 00       		.byte	0
 6241 0060 09       		.uleb128 0x9
 6242 0061 0D       		.uleb128 0xd
 6243 0062 00       		.byte	0
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 129


 6244 0063 03       		.uleb128 0x3
 6245 0064 0E       		.uleb128 0xe
 6246 0065 3A       		.uleb128 0x3a
 6247 0066 0B       		.uleb128 0xb
 6248 0067 3B       		.uleb128 0x3b
 6249 0068 0B       		.uleb128 0xb
 6250 0069 49       		.uleb128 0x49
 6251 006a 13       		.uleb128 0x13
 6252 006b 38       		.uleb128 0x38
 6253 006c 0B       		.uleb128 0xb
 6254 006d 00       		.byte	0
 6255 006e 00       		.byte	0
 6256 006f 0A       		.uleb128 0xa
 6257 0070 01       		.uleb128 0x1
 6258 0071 01       		.byte	0x1
 6259 0072 49       		.uleb128 0x49
 6260 0073 13       		.uleb128 0x13
 6261 0074 01       		.uleb128 0x1
 6262 0075 13       		.uleb128 0x13
 6263 0076 00       		.byte	0
 6264 0077 00       		.byte	0
 6265 0078 0B       		.uleb128 0xb
 6266 0079 21       		.uleb128 0x21
 6267 007a 00       		.byte	0
 6268 007b 49       		.uleb128 0x49
 6269 007c 13       		.uleb128 0x13
 6270 007d 2F       		.uleb128 0x2f
 6271 007e 0B       		.uleb128 0xb
 6272 007f 00       		.byte	0
 6273 0080 00       		.byte	0
 6274 0081 0C       		.uleb128 0xc
 6275 0082 15       		.uleb128 0x15
 6276 0083 01       		.byte	0x1
 6277 0084 27       		.uleb128 0x27
 6278 0085 19       		.uleb128 0x19
 6279 0086 49       		.uleb128 0x49
 6280 0087 13       		.uleb128 0x13
 6281 0088 01       		.uleb128 0x1
 6282 0089 13       		.uleb128 0x13
 6283 008a 00       		.byte	0
 6284 008b 00       		.byte	0
 6285 008c 0D       		.uleb128 0xd
 6286 008d 05       		.uleb128 0x5
 6287 008e 00       		.byte	0
 6288 008f 49       		.uleb128 0x49
 6289 0090 13       		.uleb128 0x13
 6290 0091 00       		.byte	0
 6291 0092 00       		.byte	0
 6292 0093 0E       		.uleb128 0xe
 6293 0094 15       		.uleb128 0x15
 6294 0095 00       		.byte	0
 6295 0096 27       		.uleb128 0x27
 6296 0097 19       		.uleb128 0x19
 6297 0098 49       		.uleb128 0x49
 6298 0099 13       		.uleb128 0x13
 6299 009a 00       		.byte	0
 6300 009b 00       		.byte	0
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 130


 6301 009c 0F       		.uleb128 0xf
 6302 009d 21       		.uleb128 0x21
 6303 009e 00       		.byte	0
 6304 009f 49       		.uleb128 0x49
 6305 00a0 13       		.uleb128 0x13
 6306 00a1 2F       		.uleb128 0x2f
 6307 00a2 05       		.uleb128 0x5
 6308 00a3 00       		.byte	0
 6309 00a4 00       		.byte	0
 6310 00a5 10       		.uleb128 0x10
 6311 00a6 2E       		.uleb128 0x2e
 6312 00a7 01       		.byte	0x1
 6313 00a8 3F       		.uleb128 0x3f
 6314 00a9 19       		.uleb128 0x19
 6315 00aa 03       		.uleb128 0x3
 6316 00ab 0E       		.uleb128 0xe
 6317 00ac 3A       		.uleb128 0x3a
 6318 00ad 0B       		.uleb128 0xb
 6319 00ae 3B       		.uleb128 0x3b
 6320 00af 0B       		.uleb128 0xb
 6321 00b0 27       		.uleb128 0x27
 6322 00b1 19       		.uleb128 0x19
 6323 00b2 11       		.uleb128 0x11
 6324 00b3 01       		.uleb128 0x1
 6325 00b4 12       		.uleb128 0x12
 6326 00b5 06       		.uleb128 0x6
 6327 00b6 40       		.uleb128 0x40
 6328 00b7 18       		.uleb128 0x18
 6329 00b8 9642     		.uleb128 0x2116
 6330 00ba 19       		.uleb128 0x19
 6331 00bb 01       		.uleb128 0x1
 6332 00bc 13       		.uleb128 0x13
 6333 00bd 00       		.byte	0
 6334 00be 00       		.byte	0
 6335 00bf 11       		.uleb128 0x11
 6336 00c0 05       		.uleb128 0x5
 6337 00c1 00       		.byte	0
 6338 00c2 03       		.uleb128 0x3
 6339 00c3 0E       		.uleb128 0xe
 6340 00c4 3A       		.uleb128 0x3a
 6341 00c5 0B       		.uleb128 0xb
 6342 00c6 3B       		.uleb128 0x3b
 6343 00c7 0B       		.uleb128 0xb
 6344 00c8 49       		.uleb128 0x49
 6345 00c9 13       		.uleb128 0x13
 6346 00ca 02       		.uleb128 0x2
 6347 00cb 18       		.uleb128 0x18
 6348 00cc 00       		.byte	0
 6349 00cd 00       		.byte	0
 6350 00ce 12       		.uleb128 0x12
 6351 00cf 0B       		.uleb128 0xb
 6352 00d0 01       		.byte	0x1
 6353 00d1 11       		.uleb128 0x11
 6354 00d2 01       		.uleb128 0x1
 6355 00d3 12       		.uleb128 0x12
 6356 00d4 06       		.uleb128 0x6
 6357 00d5 00       		.byte	0
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 131


 6358 00d6 00       		.byte	0
 6359 00d7 13       		.uleb128 0x13
 6360 00d8 34       		.uleb128 0x34
 6361 00d9 00       		.byte	0
 6362 00da 03       		.uleb128 0x3
 6363 00db 08       		.uleb128 0x8
 6364 00dc 3A       		.uleb128 0x3a
 6365 00dd 0B       		.uleb128 0xb
 6366 00de 3B       		.uleb128 0x3b
 6367 00df 0B       		.uleb128 0xb
 6368 00e0 49       		.uleb128 0x49
 6369 00e1 13       		.uleb128 0x13
 6370 00e2 02       		.uleb128 0x2
 6371 00e3 18       		.uleb128 0x18
 6372 00e4 00       		.byte	0
 6373 00e5 00       		.byte	0
 6374 00e6 14       		.uleb128 0x14
 6375 00e7 2E       		.uleb128 0x2e
 6376 00e8 01       		.byte	0x1
 6377 00e9 3F       		.uleb128 0x3f
 6378 00ea 19       		.uleb128 0x19
 6379 00eb 03       		.uleb128 0x3
 6380 00ec 0E       		.uleb128 0xe
 6381 00ed 3A       		.uleb128 0x3a
 6382 00ee 0B       		.uleb128 0xb
 6383 00ef 3B       		.uleb128 0x3b
 6384 00f0 0B       		.uleb128 0xb
 6385 00f1 27       		.uleb128 0x27
 6386 00f2 19       		.uleb128 0x19
 6387 00f3 11       		.uleb128 0x11
 6388 00f4 01       		.uleb128 0x1
 6389 00f5 12       		.uleb128 0x12
 6390 00f6 06       		.uleb128 0x6
 6391 00f7 40       		.uleb128 0x40
 6392 00f8 18       		.uleb128 0x18
 6393 00f9 9742     		.uleb128 0x2117
 6394 00fb 19       		.uleb128 0x19
 6395 00fc 01       		.uleb128 0x1
 6396 00fd 13       		.uleb128 0x13
 6397 00fe 00       		.byte	0
 6398 00ff 00       		.byte	0
 6399 0100 15       		.uleb128 0x15
 6400 0101 2E       		.uleb128 0x2e
 6401 0102 01       		.byte	0x1
 6402 0103 3F       		.uleb128 0x3f
 6403 0104 19       		.uleb128 0x19
 6404 0105 03       		.uleb128 0x3
 6405 0106 0E       		.uleb128 0xe
 6406 0107 3A       		.uleb128 0x3a
 6407 0108 0B       		.uleb128 0xb
 6408 0109 3B       		.uleb128 0x3b
 6409 010a 0B       		.uleb128 0xb
 6410 010b 27       		.uleb128 0x27
 6411 010c 19       		.uleb128 0x19
 6412 010d 49       		.uleb128 0x49
 6413 010e 13       		.uleb128 0x13
 6414 010f 11       		.uleb128 0x11
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 132


 6415 0110 01       		.uleb128 0x1
 6416 0111 12       		.uleb128 0x12
 6417 0112 06       		.uleb128 0x6
 6418 0113 40       		.uleb128 0x40
 6419 0114 18       		.uleb128 0x18
 6420 0115 9742     		.uleb128 0x2117
 6421 0117 19       		.uleb128 0x19
 6422 0118 01       		.uleb128 0x1
 6423 0119 13       		.uleb128 0x13
 6424 011a 00       		.byte	0
 6425 011b 00       		.byte	0
 6426 011c 16       		.uleb128 0x16
 6427 011d 05       		.uleb128 0x5
 6428 011e 00       		.byte	0
 6429 011f 03       		.uleb128 0x3
 6430 0120 08       		.uleb128 0x8
 6431 0121 3A       		.uleb128 0x3a
 6432 0122 0B       		.uleb128 0xb
 6433 0123 3B       		.uleb128 0x3b
 6434 0124 0B       		.uleb128 0xb
 6435 0125 49       		.uleb128 0x49
 6436 0126 13       		.uleb128 0x13
 6437 0127 02       		.uleb128 0x2
 6438 0128 18       		.uleb128 0x18
 6439 0129 00       		.byte	0
 6440 012a 00       		.byte	0
 6441 012b 17       		.uleb128 0x17
 6442 012c 2E       		.uleb128 0x2e
 6443 012d 01       		.byte	0x1
 6444 012e 3F       		.uleb128 0x3f
 6445 012f 19       		.uleb128 0x19
 6446 0130 03       		.uleb128 0x3
 6447 0131 0E       		.uleb128 0xe
 6448 0132 3A       		.uleb128 0x3a
 6449 0133 0B       		.uleb128 0xb
 6450 0134 3B       		.uleb128 0x3b
 6451 0135 05       		.uleb128 0x5
 6452 0136 27       		.uleb128 0x27
 6453 0137 19       		.uleb128 0x19
 6454 0138 11       		.uleb128 0x11
 6455 0139 01       		.uleb128 0x1
 6456 013a 12       		.uleb128 0x12
 6457 013b 06       		.uleb128 0x6
 6458 013c 40       		.uleb128 0x40
 6459 013d 18       		.uleb128 0x18
 6460 013e 9642     		.uleb128 0x2116
 6461 0140 19       		.uleb128 0x19
 6462 0141 01       		.uleb128 0x1
 6463 0142 13       		.uleb128 0x13
 6464 0143 00       		.byte	0
 6465 0144 00       		.byte	0
 6466 0145 18       		.uleb128 0x18
 6467 0146 05       		.uleb128 0x5
 6468 0147 00       		.byte	0
 6469 0148 03       		.uleb128 0x3
 6470 0149 0E       		.uleb128 0xe
 6471 014a 3A       		.uleb128 0x3a
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 133


 6472 014b 0B       		.uleb128 0xb
 6473 014c 3B       		.uleb128 0x3b
 6474 014d 05       		.uleb128 0x5
 6475 014e 49       		.uleb128 0x49
 6476 014f 13       		.uleb128 0x13
 6477 0150 02       		.uleb128 0x2
 6478 0151 18       		.uleb128 0x18
 6479 0152 00       		.byte	0
 6480 0153 00       		.byte	0
 6481 0154 19       		.uleb128 0x19
 6482 0155 05       		.uleb128 0x5
 6483 0156 00       		.byte	0
 6484 0157 03       		.uleb128 0x3
 6485 0158 08       		.uleb128 0x8
 6486 0159 3A       		.uleb128 0x3a
 6487 015a 0B       		.uleb128 0xb
 6488 015b 3B       		.uleb128 0x3b
 6489 015c 05       		.uleb128 0x5
 6490 015d 49       		.uleb128 0x49
 6491 015e 13       		.uleb128 0x13
 6492 015f 02       		.uleb128 0x2
 6493 0160 18       		.uleb128 0x18
 6494 0161 00       		.byte	0
 6495 0162 00       		.byte	0
 6496 0163 1A       		.uleb128 0x1a
 6497 0164 34       		.uleb128 0x34
 6498 0165 00       		.byte	0
 6499 0166 03       		.uleb128 0x3
 6500 0167 08       		.uleb128 0x8
 6501 0168 3A       		.uleb128 0x3a
 6502 0169 0B       		.uleb128 0xb
 6503 016a 3B       		.uleb128 0x3b
 6504 016b 05       		.uleb128 0x5
 6505 016c 49       		.uleb128 0x49
 6506 016d 13       		.uleb128 0x13
 6507 016e 02       		.uleb128 0x2
 6508 016f 18       		.uleb128 0x18
 6509 0170 00       		.byte	0
 6510 0171 00       		.byte	0
 6511 0172 1B       		.uleb128 0x1b
 6512 0173 34       		.uleb128 0x34
 6513 0174 00       		.byte	0
 6514 0175 03       		.uleb128 0x3
 6515 0176 0E       		.uleb128 0xe
 6516 0177 3A       		.uleb128 0x3a
 6517 0178 0B       		.uleb128 0xb
 6518 0179 3B       		.uleb128 0x3b
 6519 017a 05       		.uleb128 0x5
 6520 017b 49       		.uleb128 0x49
 6521 017c 13       		.uleb128 0x13
 6522 017d 02       		.uleb128 0x2
 6523 017e 18       		.uleb128 0x18
 6524 017f 00       		.byte	0
 6525 0180 00       		.byte	0
 6526 0181 1C       		.uleb128 0x1c
 6527 0182 2E       		.uleb128 0x2e
 6528 0183 01       		.byte	0x1
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 134


 6529 0184 3F       		.uleb128 0x3f
 6530 0185 19       		.uleb128 0x19
 6531 0186 03       		.uleb128 0x3
 6532 0187 0E       		.uleb128 0xe
 6533 0188 3A       		.uleb128 0x3a
 6534 0189 0B       		.uleb128 0xb
 6535 018a 3B       		.uleb128 0x3b
 6536 018b 05       		.uleb128 0x5
 6537 018c 27       		.uleb128 0x27
 6538 018d 19       		.uleb128 0x19
 6539 018e 11       		.uleb128 0x11
 6540 018f 01       		.uleb128 0x1
 6541 0190 12       		.uleb128 0x12
 6542 0191 06       		.uleb128 0x6
 6543 0192 40       		.uleb128 0x40
 6544 0193 18       		.uleb128 0x18
 6545 0194 9742     		.uleb128 0x2117
 6546 0196 19       		.uleb128 0x19
 6547 0197 01       		.uleb128 0x1
 6548 0198 13       		.uleb128 0x13
 6549 0199 00       		.byte	0
 6550 019a 00       		.byte	0
 6551 019b 1D       		.uleb128 0x1d
 6552 019c 34       		.uleb128 0x34
 6553 019d 00       		.byte	0
 6554 019e 03       		.uleb128 0x3
 6555 019f 0E       		.uleb128 0xe
 6556 01a0 3A       		.uleb128 0x3a
 6557 01a1 0B       		.uleb128 0xb
 6558 01a2 3B       		.uleb128 0x3b
 6559 01a3 05       		.uleb128 0x5
 6560 01a4 49       		.uleb128 0x49
 6561 01a5 13       		.uleb128 0x13
 6562 01a6 3F       		.uleb128 0x3f
 6563 01a7 19       		.uleb128 0x19
 6564 01a8 3C       		.uleb128 0x3c
 6565 01a9 19       		.uleb128 0x19
 6566 01aa 00       		.byte	0
 6567 01ab 00       		.byte	0
 6568 01ac 1E       		.uleb128 0x1e
 6569 01ad 35       		.uleb128 0x35
 6570 01ae 00       		.byte	0
 6571 01af 49       		.uleb128 0x49
 6572 01b0 13       		.uleb128 0x13
 6573 01b1 00       		.byte	0
 6574 01b2 00       		.byte	0
 6575 01b3 1F       		.uleb128 0x1f
 6576 01b4 34       		.uleb128 0x34
 6577 01b5 00       		.byte	0
 6578 01b6 03       		.uleb128 0x3
 6579 01b7 0E       		.uleb128 0xe
 6580 01b8 3A       		.uleb128 0x3a
 6581 01b9 0B       		.uleb128 0xb
 6582 01ba 3B       		.uleb128 0x3b
 6583 01bb 0B       		.uleb128 0xb
 6584 01bc 49       		.uleb128 0x49
 6585 01bd 13       		.uleb128 0x13
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 135


 6586 01be 3F       		.uleb128 0x3f
 6587 01bf 19       		.uleb128 0x19
 6588 01c0 3C       		.uleb128 0x3c
 6589 01c1 19       		.uleb128 0x19
 6590 01c2 00       		.byte	0
 6591 01c3 00       		.byte	0
 6592 01c4 20       		.uleb128 0x20
 6593 01c5 34       		.uleb128 0x34
 6594 01c6 00       		.byte	0
 6595 01c7 03       		.uleb128 0x3
 6596 01c8 0E       		.uleb128 0xe
 6597 01c9 3A       		.uleb128 0x3a
 6598 01ca 0B       		.uleb128 0xb
 6599 01cb 3B       		.uleb128 0x3b
 6600 01cc 0B       		.uleb128 0xb
 6601 01cd 49       		.uleb128 0x49
 6602 01ce 13       		.uleb128 0x13
 6603 01cf 3F       		.uleb128 0x3f
 6604 01d0 19       		.uleb128 0x19
 6605 01d1 02       		.uleb128 0x2
 6606 01d2 18       		.uleb128 0x18
 6607 01d3 00       		.byte	0
 6608 01d4 00       		.byte	0
 6609 01d5 00       		.byte	0
 6610              		.section	.debug_aranges,"",%progbits
 6611 0000 54010000 		.4byte	0x154
 6612 0004 0200     		.2byte	0x2
 6613 0006 00000000 		.4byte	.Ldebug_info0
 6614 000a 04       		.byte	0x4
 6615 000b 00       		.byte	0
 6616 000c 0000     		.2byte	0
 6617 000e 0000     		.2byte	0
 6618 0010 00000000 		.4byte	.LFB63
 6619 0014 90000000 		.4byte	.LFE63-.LFB63
 6620 0018 00000000 		.4byte	.LFB64
 6621 001c 28000000 		.4byte	.LFE64-.LFB64
 6622 0020 00000000 		.4byte	.LFB65
 6623 0024 16000000 		.4byte	.LFE65-.LFB65
 6624 0028 00000000 		.4byte	.LFB66
 6625 002c 28000000 		.4byte	.LFE66-.LFB66
 6626 0030 00000000 		.4byte	.LFB67
 6627 0034 16000000 		.4byte	.LFE67-.LFB67
 6628 0038 00000000 		.4byte	.LFB68
 6629 003c 1C000000 		.4byte	.LFE68-.LFB68
 6630 0040 00000000 		.4byte	.LFB69
 6631 0044 16000000 		.4byte	.LFE69-.LFB69
 6632 0048 00000000 		.4byte	.LFB70
 6633 004c 1A000000 		.4byte	.LFE70-.LFB70
 6634 0050 00000000 		.4byte	.LFB71
 6635 0054 40000000 		.4byte	.LFE71-.LFB71
 6636 0058 00000000 		.4byte	.LFB72
 6637 005c 16000000 		.4byte	.LFE72-.LFB72
 6638 0060 00000000 		.4byte	.LFB73
 6639 0064 28000000 		.4byte	.LFE73-.LFB73
 6640 0068 00000000 		.4byte	.LFB74
 6641 006c 16000000 		.4byte	.LFE74-.LFB74
 6642 0070 00000000 		.4byte	.LFB75
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 136


 6643 0074 26000000 		.4byte	.LFE75-.LFB75
 6644 0078 00000000 		.4byte	.LFB76
 6645 007c 2C000000 		.4byte	.LFE76-.LFB76
 6646 0080 00000000 		.4byte	.LFB77
 6647 0084 2A000000 		.4byte	.LFE77-.LFB77
 6648 0088 00000000 		.4byte	.LFB78
 6649 008c 1A010000 		.4byte	.LFE78-.LFB78
 6650 0090 00000000 		.4byte	.LFB79
 6651 0094 2C000000 		.4byte	.LFE79-.LFB79
 6652 0098 00000000 		.4byte	.LFB80
 6653 009c FC000000 		.4byte	.LFE80-.LFB80
 6654 00a0 00000000 		.4byte	.LFB81
 6655 00a4 58000000 		.4byte	.LFE81-.LFB81
 6656 00a8 00000000 		.4byte	.LFB82
 6657 00ac FC000000 		.4byte	.LFE82-.LFB82
 6658 00b0 00000000 		.4byte	.LFB83
 6659 00b4 3C000000 		.4byte	.LFE83-.LFB83
 6660 00b8 00000000 		.4byte	.LFB84
 6661 00bc 7E000000 		.4byte	.LFE84-.LFB84
 6662 00c0 00000000 		.4byte	.LFB85
 6663 00c4 2A000000 		.4byte	.LFE85-.LFB85
 6664 00c8 00000000 		.4byte	.LFB86
 6665 00cc 2C000000 		.4byte	.LFE86-.LFB86
 6666 00d0 00000000 		.4byte	.LFB87
 6667 00d4 6C000000 		.4byte	.LFE87-.LFB87
 6668 00d8 00000000 		.4byte	.LFB88
 6669 00dc 3C020000 		.4byte	.LFE88-.LFB88
 6670 00e0 00000000 		.4byte	.LFB89
 6671 00e4 76000000 		.4byte	.LFE89-.LFB89
 6672 00e8 00000000 		.4byte	.LFB90
 6673 00ec 7A000000 		.4byte	.LFE90-.LFB90
 6674 00f0 00000000 		.4byte	.LFB91
 6675 00f4 5E000000 		.4byte	.LFE91-.LFB91
 6676 00f8 00000000 		.4byte	.LFB92
 6677 00fc 62000000 		.4byte	.LFE92-.LFB92
 6678 0100 00000000 		.4byte	.LFB93
 6679 0104 C8010000 		.4byte	.LFE93-.LFB93
 6680 0108 00000000 		.4byte	.LFB94
 6681 010c 94000000 		.4byte	.LFE94-.LFB94
 6682 0110 00000000 		.4byte	.LFB95
 6683 0114 94000000 		.4byte	.LFE95-.LFB95
 6684 0118 00000000 		.4byte	.LFB96
 6685 011c E2000000 		.4byte	.LFE96-.LFB96
 6686 0120 00000000 		.4byte	.LFB97
 6687 0124 A8000000 		.4byte	.LFE97-.LFB97
 6688 0128 00000000 		.4byte	.LFB98
 6689 012c B4000000 		.4byte	.LFE98-.LFB98
 6690 0130 00000000 		.4byte	.LFB99
 6691 0134 88000000 		.4byte	.LFE99-.LFB99
 6692 0138 00000000 		.4byte	.LFB100
 6693 013c D4000000 		.4byte	.LFE100-.LFB100
 6694 0140 00000000 		.4byte	.LFB101
 6695 0144 C2010000 		.4byte	.LFE101-.LFB101
 6696 0148 00000000 		.4byte	.LFB102
 6697 014c 28000000 		.4byte	.LFE102-.LFB102
 6698 0150 00000000 		.4byte	0
 6699 0154 00000000 		.4byte	0
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 137


 6700              		.section	.debug_ranges,"",%progbits
 6701              	.Ldebug_ranges0:
 6702 0000 00000000 		.4byte	.LFB63
 6703 0004 90000000 		.4byte	.LFE63
 6704 0008 00000000 		.4byte	.LFB64
 6705 000c 28000000 		.4byte	.LFE64
 6706 0010 00000000 		.4byte	.LFB65
 6707 0014 16000000 		.4byte	.LFE65
 6708 0018 00000000 		.4byte	.LFB66
 6709 001c 28000000 		.4byte	.LFE66
 6710 0020 00000000 		.4byte	.LFB67
 6711 0024 16000000 		.4byte	.LFE67
 6712 0028 00000000 		.4byte	.LFB68
 6713 002c 1C000000 		.4byte	.LFE68
 6714 0030 00000000 		.4byte	.LFB69
 6715 0034 16000000 		.4byte	.LFE69
 6716 0038 00000000 		.4byte	.LFB70
 6717 003c 1A000000 		.4byte	.LFE70
 6718 0040 00000000 		.4byte	.LFB71
 6719 0044 40000000 		.4byte	.LFE71
 6720 0048 00000000 		.4byte	.LFB72
 6721 004c 16000000 		.4byte	.LFE72
 6722 0050 00000000 		.4byte	.LFB73
 6723 0054 28000000 		.4byte	.LFE73
 6724 0058 00000000 		.4byte	.LFB74
 6725 005c 16000000 		.4byte	.LFE74
 6726 0060 00000000 		.4byte	.LFB75
 6727 0064 26000000 		.4byte	.LFE75
 6728 0068 00000000 		.4byte	.LFB76
 6729 006c 2C000000 		.4byte	.LFE76
 6730 0070 00000000 		.4byte	.LFB77
 6731 0074 2A000000 		.4byte	.LFE77
 6732 0078 00000000 		.4byte	.LFB78
 6733 007c 1A010000 		.4byte	.LFE78
 6734 0080 00000000 		.4byte	.LFB79
 6735 0084 2C000000 		.4byte	.LFE79
 6736 0088 00000000 		.4byte	.LFB80
 6737 008c FC000000 		.4byte	.LFE80
 6738 0090 00000000 		.4byte	.LFB81
 6739 0094 58000000 		.4byte	.LFE81
 6740 0098 00000000 		.4byte	.LFB82
 6741 009c FC000000 		.4byte	.LFE82
 6742 00a0 00000000 		.4byte	.LFB83
 6743 00a4 3C000000 		.4byte	.LFE83
 6744 00a8 00000000 		.4byte	.LFB84
 6745 00ac 7E000000 		.4byte	.LFE84
 6746 00b0 00000000 		.4byte	.LFB85
 6747 00b4 2A000000 		.4byte	.LFE85
 6748 00b8 00000000 		.4byte	.LFB86
 6749 00bc 2C000000 		.4byte	.LFE86
 6750 00c0 00000000 		.4byte	.LFB87
 6751 00c4 6C000000 		.4byte	.LFE87
 6752 00c8 00000000 		.4byte	.LFB88
 6753 00cc 3C020000 		.4byte	.LFE88
 6754 00d0 00000000 		.4byte	.LFB89
 6755 00d4 76000000 		.4byte	.LFE89
 6756 00d8 00000000 		.4byte	.LFB90
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 138


 6757 00dc 7A000000 		.4byte	.LFE90
 6758 00e0 00000000 		.4byte	.LFB91
 6759 00e4 5E000000 		.4byte	.LFE91
 6760 00e8 00000000 		.4byte	.LFB92
 6761 00ec 62000000 		.4byte	.LFE92
 6762 00f0 00000000 		.4byte	.LFB93
 6763 00f4 C8010000 		.4byte	.LFE93
 6764 00f8 00000000 		.4byte	.LFB94
 6765 00fc 94000000 		.4byte	.LFE94
 6766 0100 00000000 		.4byte	.LFB95
 6767 0104 94000000 		.4byte	.LFE95
 6768 0108 00000000 		.4byte	.LFB96
 6769 010c E2000000 		.4byte	.LFE96
 6770 0110 00000000 		.4byte	.LFB97
 6771 0114 A8000000 		.4byte	.LFE97
 6772 0118 00000000 		.4byte	.LFB98
 6773 011c B4000000 		.4byte	.LFE98
 6774 0120 00000000 		.4byte	.LFB99
 6775 0124 88000000 		.4byte	.LFE99
 6776 0128 00000000 		.4byte	.LFB100
 6777 012c D4000000 		.4byte	.LFE100
 6778 0130 00000000 		.4byte	.LFB101
 6779 0134 C2010000 		.4byte	.LFE101
 6780 0138 00000000 		.4byte	.LFB102
 6781 013c 28000000 		.4byte	.LFE102
 6782 0140 00000000 		.4byte	0
 6783 0144 00000000 		.4byte	0
 6784              		.section	.debug_line,"",%progbits
 6785              	.Ldebug_line0:
 6786 0000 17070000 		.section	.debug_str,"MS",%progbits,1
 6786      02006001 
 6786      00000201 
 6786      FB0E0D00 
 6786      01010101 
 6787              	.LASF66:
 6788 0000 53657443 		.ascii	"SetColumnAddress\000"
 6788      6F6C756D 
 6788      6E416464 
 6788      72657373 
 6788      00
 6789              	.LASF81:
 6790 0011 794F7574 		.ascii	"yOut\000"
 6790      00
 6791              	.LASF61:
 6792 0016 6F6C6564 		.ascii	"oled_DispBitmap\000"
 6792      5F446973 
 6792      70426974 
 6792      6D617000 
 6793              	.LASF67:
 6794 0026 57726974 		.ascii	"WriteGRAM\000"
 6794      65475241 
 6794      4D00
 6795              	.LASF86:
 6796 0030 74656D70 		.ascii	"temp\000"
 6796      00
 6797              	.LASF60:
 6798 0035 6F6C6564 		.ascii	"oled_DrawPie\000"
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 139


 6798      5F447261 
 6798      77506965 
 6798      00
 6799              	.LASF42:
 6800 0042 6F6C6564 		.ascii	"oled_SetFont\000"
 6800      5F536574 
 6800      466F6E74 
 6800      00
 6801              	.LASF27:
 6802 004f 636F6C6F 		.ascii	"color\000"
 6802      7200
 6803              	.LASF75:
 6804 0055 506C6F74 		.ascii	"PlotPerpLineL\000"
 6804      50657270 
 6804      4C696E65 
 6804      4C00
 6805              	.LASF53:
 6806 0063 6F6C6564 		.ascii	"oled_DrawRect\000"
 6806      5F447261 
 6806      77526563 
 6806      7400
 6807              	.LASF89:
 6808 0071 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 6808      43313120 
 6808      352E342E 
 6808      31203230 
 6808      31363036 
 6809 00a4 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 6809      20726576 
 6809      6973696F 
 6809      6E203233 
 6809      37373135 
 6810 00d7 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 6810      66756E63 
 6810      74696F6E 
 6810      2D736563 
 6810      74696F6E 
 6811              	.LASF26:
 6812 00ff 626B436F 		.ascii	"bkColor\000"
 6812      6C6F7200 
 6813              	.LASF84:
 6814 0107 76617230 		.ascii	"var0\000"
 6814      00
 6815              	.LASF85:
 6816 010c 76617231 		.ascii	"var1\000"
 6816      00
 6817              	.LASF29:
 6818 0111 666F6E74 		.ascii	"font\000"
 6818      00
 6819              	.LASF41:
 6820 0116 6F6C6564 		.ascii	"oled_GetPenSize\000"
 6820      5F476574 
 6820      50656E53 
 6820      697A6500 
 6821              	.LASF2:
 6822 0126 73686F72 		.ascii	"short int\000"
 6822      7420696E 
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 140


 6822      7400
 6823              	.LASF64:
 6824 0130 6F6C6564 		.ascii	"oled_DispString\000"
 6824      5F446973 
 6824      70537472 
 6824      696E6700 
 6825              	.LASF5:
 6826 0140 6C6F6E67 		.ascii	"long unsigned int\000"
 6826      20756E73 
 6826      69676E65 
 6826      6420696E 
 6826      7400
 6827              	.LASF90:
 6828 0152 6F6C6564 		.ascii	"oled.c\000"
 6828      2E6300
 6829              	.LASF65:
 6830 0159 53657450 		.ascii	"SetPageAddress\000"
 6830      61676541 
 6830      64647265 
 6830      737300
 6831              	.LASF12:
 6832 0168 75696E74 		.ascii	"uint16\000"
 6832      313600
 6833              	.LASF32:
 6834 016f 4752414D 		.ascii	"GRAM\000"
 6834      00
 6835              	.LASF47:
 6836 0174 6F6C6564 		.ascii	"oled_Clear\000"
 6836      5F436C65 
 6836      617200
 6837              	.LASF11:
 6838 017f 75696E74 		.ascii	"uint8\000"
 6838      3800
 6839              	.LASF62:
 6840 0185 6269746D 		.ascii	"bitmap\000"
 6840      617000
 6841              	.LASF71:
 6842 018c 42726573 		.ascii	"BresenhamLineAlgorithm\000"
 6842      656E6861 
 6842      6D4C696E 
 6842      65416C67 
 6842      6F726974 
 6843              	.LASF79:
 6844 01a3 724F7574 		.ascii	"rOut\000"
 6844      00
 6845              	.LASF63:
 6846 01a8 6F6C6564 		.ascii	"oled_DispChar\000"
 6846      5F446973 
 6846      70436861 
 6846      7200
 6847              	.LASF69:
 6848 01b6 44726177 		.ascii	"DrawHLine\000"
 6848      484C696E 
 6848      6500
 6849              	.LASF34:
 6850 01c0 6F6C6564 		.ascii	"oled\000"
 6850      00
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 141


 6851              	.LASF13:
 6852 01c5 666C6F61 		.ascii	"float\000"
 6852      7400
 6853              	.LASF45:
 6854 01cb 6F6C6564 		.ascii	"oled_SetTextMode\000"
 6854      5F536574 
 6854      54657874 
 6854      4D6F6465 
 6854      00
 6855              	.LASF6:
 6856 01dc 6C6F6E67 		.ascii	"long long int\000"
 6856      206C6F6E 
 6856      6720696E 
 6856      7400
 6857              	.LASF30:
 6858 01ea 626D4D6F 		.ascii	"bmMode\000"
 6858      646500
 6859              	.LASF33:
 6860 01f1 6F6C6564 		.ascii	"oled_t\000"
 6860      5F7400
 6861              	.LASF22:
 6862 01f8 736C6176 		.ascii	"slaveAddr\000"
 6862      65416464 
 6862      7200
 6863              	.LASF44:
 6864 0202 6F6C6564 		.ascii	"oled_GetBmMode\000"
 6864      5F476574 
 6864      426D4D6F 
 6864      646500
 6865              	.LASF49:
 6866 0211 6F6C6564 		.ascii	"oled_DrawPixel\000"
 6866      5F447261 
 6866      77506978 
 6866      656C00
 6867              	.LASF59:
 6868 0220 6F6C6564 		.ascii	"oled_DrawPoint\000"
 6868      5F447261 
 6868      77506F69 
 6868      6E7400
 6869              	.LASF80:
 6870 022f 644F7574 		.ascii	"dOut\000"
 6870      00
 6871              	.LASF56:
 6872 0234 6F6C6564 		.ascii	"oled_DrawArc\000"
 6872      5F447261 
 6872      77417263 
 6872      00
 6873              	.LASF1:
 6874 0241 756E7369 		.ascii	"unsigned char\000"
 6874      676E6564 
 6874      20636861 
 6874      7200
 6875              	.LASF73:
 6876 024f 74687265 		.ascii	"thresh\000"
 6876      736800
 6877              	.LASF16:
 6878 0256 6C6F6E67 		.ascii	"long double\000"
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 142


 6878      20646F75 
 6878      626C6500 
 6879              	.LASF24:
 6880 0262 53656E64 		.ascii	"SendStop\000"
 6880      53746F70 
 6880      00
 6881              	.LASF25:
 6882 026b 57726974 		.ascii	"WriteByte\000"
 6882      65427974 
 6882      6500
 6883              	.LASF39:
 6884 0275 6F6C6564 		.ascii	"oled_GetBkColor\000"
 6884      5F476574 
 6884      426B436F 
 6884      6C6F7200 
 6885              	.LASF82:
 6886 0285 506C6F74 		.ascii	"PlotCircle\000"
 6886      43697263 
 6886      6C6500
 6887              	.LASF38:
 6888 0290 6F6C6564 		.ascii	"oled_GetColor\000"
 6888      5F476574 
 6888      436F6C6F 
 6888      7200
 6889              	.LASF0:
 6890 029e 7369676E 		.ascii	"signed char\000"
 6890      65642063 
 6890      68617200 
 6891              	.LASF7:
 6892 02aa 6C6F6E67 		.ascii	"long long unsigned int\000"
 6892      206C6F6E 
 6892      6720756E 
 6892      7369676E 
 6892      65642069 
 6893              	.LASF77:
 6894 02c1 506C6F74 		.ascii	"PlotPoint\000"
 6894      506F696E 
 6894      7400
 6895              	.LASF19:
 6896 02cb 68656967 		.ascii	"height\000"
 6896      687400
 6897              	.LASF8:
 6898 02d2 756E7369 		.ascii	"unsigned int\000"
 6898      676E6564 
 6898      20696E74 
 6898      00
 6899              	.LASF57:
 6900 02df 6F637461 		.ascii	"octants\000"
 6900      6E747300 
 6901              	.LASF74:
 6902 02e7 73746570 		.ascii	"step\000"
 6902      00
 6903              	.LASF88:
 6904 02ec 696E6974 		.ascii	"initCmds\000"
 6904      436D6473 
 6904      00
 6905              	.LASF52:
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 143


 6906 02f5 6F6C6564 		.ascii	"oled_FillRoundedRect\000"
 6906      5F46696C 
 6906      6C526F75 
 6906      6E646564 
 6906      52656374 
 6907              	.LASF15:
 6908 030a 63686172 		.ascii	"char\000"
 6908      00
 6909              	.LASF36:
 6910 030f 6F6C6564 		.ascii	"oled_SetColor\000"
 6910      5F536574 
 6910      436F6C6F 
 6910      7200
 6911              	.LASF10:
 6912 031d 696E7433 		.ascii	"int32_t\000"
 6912      325F7400 
 6913              	.LASF3:
 6914 0325 73686F72 		.ascii	"short unsigned int\000"
 6914      7420756E 
 6914      7369676E 
 6914      65642069 
 6914      6E7400
 6915              	.LASF54:
 6916 0338 6F6C6564 		.ascii	"oled_DrawRoundedRect\000"
 6916      5F447261 
 6916      77526F75 
 6916      6E646564 
 6916      52656374 
 6917              	.LASF20:
 6918 034d 63686172 		.ascii	"characters\000"
 6918      61637465 
 6918      727300
 6919              	.LASF83:
 6920 0358 53776170 		.ascii	"Swap\000"
 6920      00
 6921              	.LASF76:
 6922 035d 506C6F74 		.ascii	"PlotPerpLineR\000"
 6922      50657270 
 6922      4C696E65 
 6922      5200
 6923              	.LASF70:
 6924 036b 44726177 		.ascii	"DrawVLine\000"
 6924      564C696E 
 6924      6500
 6925              	.LASF48:
 6926 0375 6F6C6564 		.ascii	"oled_ClearRect\000"
 6926      5F436C65 
 6926      61725265 
 6926      637400
 6927              	.LASF37:
 6928 0384 6F6C6564 		.ascii	"oled_SetBkColor\000"
 6928      5F536574 
 6928      426B436F 
 6928      6C6F7200 
 6929              	.LASF68:
 6930 0394 6D61736B 		.ascii	"mask\000"
 6930      00
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 144


 6931              	.LASF18:
 6932 0399 77696474 		.ascii	"width\000"
 6932      6800
 6933              	.LASF9:
 6934 039f 5F5F696E 		.ascii	"__int32_t\000"
 6934      7433325F 
 6934      7400
 6935              	.LASF58:
 6936 03a9 6F6C6564 		.ascii	"oled_FillCircle\000"
 6936      5F46696C 
 6936      6C436972 
 6936      636C6500 
 6937              	.LASF35:
 6938 03b9 6F6C6564 		.ascii	"oled_Init\000"
 6938      5F496E69 
 6938      7400
 6939              	.LASF43:
 6940 03c3 6F6C6564 		.ascii	"oled_SetBmMode\000"
 6940      5F536574 
 6940      426D4D6F 
 6940      646500
 6941              	.LASF50:
 6942 03d2 6F6C6564 		.ascii	"oled_DrawLine\000"
 6942      5F447261 
 6942      774C696E 
 6942      6500
 6943              	.LASF17:
 6944 03e0 73697A65 		.ascii	"sizetype\000"
 6944      74797065 
 6944      00
 6945              	.LASF51:
 6946 03e9 6F6C6564 		.ascii	"oled_FillRect\000"
 6946      5F46696C 
 6946      6C526563 
 6946      7400
 6947              	.LASF78:
 6948 03f7 42726573 		.ascii	"BresenhamCircleAlgorithm\000"
 6948      656E6861 
 6948      6D436972 
 6948      636C6541 
 6948      6C676F72 
 6949              	.LASF72:
 6950 0410 6572726F 		.ascii	"error\000"
 6950      7200
 6951              	.LASF14:
 6952 0416 646F7562 		.ascii	"double\000"
 6952      6C6500
 6953              	.LASF31:
 6954 041d 74657874 		.ascii	"textMode\000"
 6954      4D6F6465 
 6954      00
 6955              	.LASF91:
 6956 0426 433A5C55 		.ascii	"C:\\Users\\seanj\\Documents\\RLE\\kent\\OLED\\OLED_"
 6956      73657273 
 6956      5C736561 
 6956      6E6A5C44 
 6956      6F63756D 
ARM GAS  C:\Users\seanj\AppData\Local\Temp\ccw9gLN6.s 			page 145


 6957 0452 4932432E 		.ascii	"I2C.cydsn\000"
 6957      63796473 
 6957      6E00
 6958              	.LASF40:
 6959 045c 6F6C6564 		.ascii	"oled_SetPenSize\000"
 6959      5F536574 
 6959      50656E53 
 6959      697A6500 
 6960              	.LASF4:
 6961 046c 6C6F6E67 		.ascii	"long int\000"
 6961      20696E74 
 6961      00
 6962              	.LASF87:
 6963 0475 49544D5F 		.ascii	"ITM_RxBuffer\000"
 6963      52784275 
 6963      66666572 
 6963      00
 6964              	.LASF23:
 6965 0482 53656E64 		.ascii	"SendStart\000"
 6965      53746172 
 6965      7400
 6966              	.LASF55:
 6967 048c 6F6C6564 		.ascii	"oled_DrawCircle\000"
 6967      5F447261 
 6967      77436972 
 6967      636C6500 
 6968              	.LASF21:
 6969 049c 666F6E74 		.ascii	"font_t\000"
 6969      5F7400
 6970              	.LASF46:
 6971 04a3 6F6C6564 		.ascii	"oled_GetTextMode\000"
 6971      5F476574 
 6971      54657874 
 6971      4D6F6465 
 6971      00
 6972              	.LASF28:
 6973 04b4 70656E53 		.ascii	"penSize\000"
 6973      697A6500 
 6974              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
